{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { signNumber } from '../../plain/number/index.js';\nvar name = 'sign';\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\nexport var createSign = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber,\n    complex,\n    Fraction: _Fraction\n  } = _ref;\n  /**\r\n   * Compute the sign of a value. The sign of a value x is:\r\n   *\r\n   * -  1 when x > 0\r\n   * - -1 when x < 0\r\n   * -  0 when x == 0\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sign(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sign(3.5)               // returns 1\r\n   *    math.sign(-4.2)              // returns -1\r\n   *    math.sign(0)                 // returns 0\r\n   *\r\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            The number for which to determine the sign\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\r\n   *            The sign of `x`\r\n   */\n\n  return typed(name, {\n    number: signNumber,\n    Complex: function Complex(x) {\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(x.cmp(0));\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x.s, 1);\n    },\n    // deep map collection, skip zeros since sign(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\n    Unit: typed.referToSelf(self => x => {\n      if (!x._isDerived() && x.units[0].unit.offset !== 0) {\n        throw new TypeError('sign is ambiguous for units with offset');\n      }\n\n      return typed.find(self, x.valueType())(x.value);\n    })\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/sign.js"],"names":["factory","deepMap","signNumber","name","dependencies","createSign","_ref","typed","BigNumber","_BigNumber","complex","Fraction","_Fraction","number","Complex","x","im","re","sign","cmp","s","referToSelf","self","Unit","_isDerived","units","unit","offset","TypeError","find","valueType","value"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,UAAvB,EAAmC,SAAnC,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,SAAS,EAAEC,UAFT;AAGFC,IAAAA,OAHE;AAIFC,IAAAA,QAAQ,EAAEC;AAJR,MAKAN,IALJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBU,IAAAA,MAAM,EAAEX,UADS;AAEjBY,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,EAAF,KAAS,CAAT,GAAaN,OAAO,CAACR,UAAU,CAACa,CAAC,CAACE,EAAH,CAAX,CAApB,GAAyCF,CAAC,CAACG,IAAF,EAAhD;AACD,KAJgB;AAKjBV,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBO,CAAnB,EAAsB;AAC/B,aAAO,IAAIN,UAAJ,CAAeM,CAAC,CAACI,GAAF,CAAM,CAAN,CAAf,CAAP;AACD,KAPgB;AAQjBR,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBI,CAAlB,EAAqB;AAC7B,aAAO,IAAIH,SAAJ,CAAcG,CAAC,CAACK,CAAhB,EAAmB,CAAnB,CAAP;AACD,KAVgB;AAWjB;AACA,sBAAkBb,KAAK,CAACc,WAAN,CAAkBC,IAAI,IAAIP,CAAC,IAAId,OAAO,CAACc,CAAD,EAAIO,IAAJ,EAAU,IAAV,CAAtC,CAZD;AAajBC,IAAAA,IAAI,EAAEhB,KAAK,CAACc,WAAN,CAAkBC,IAAI,IAAIP,CAAC,IAAI;AACnC,UAAI,CAACA,CAAC,CAACS,UAAF,EAAD,IAAmBT,CAAC,CAACU,KAAF,CAAQ,CAAR,EAAWC,IAAX,CAAgBC,MAAhB,KAA2B,CAAlD,EAAqD;AACnD,cAAM,IAAIC,SAAJ,CAAc,yCAAd,CAAN;AACD;;AACD,aAAOrB,KAAK,CAACsB,IAAN,CAAWP,IAAX,EAAiBP,CAAC,CAACe,SAAF,EAAjB,EAAgCf,CAAC,CAACgB,KAAlC,CAAP;AACD,KALK;AAbW,GAAP,CAAZ;AAoBD,CAzD6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { signNumber } from '../../plain/number/index.js';\r\nvar name = 'sign';\r\nvar dependencies = ['typed', 'BigNumber', 'Fraction', 'complex'];\r\nexport var createSign = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber,\r\n    complex,\r\n    Fraction: _Fraction\r\n  } = _ref;\r\n  /**\r\n   * Compute the sign of a value. The sign of a value x is:\r\n   *\r\n   * -  1 when x > 0\r\n   * - -1 when x < 0\r\n   * -  0 when x == 0\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sign(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sign(3.5)               // returns 1\r\n   *    math.sign(-4.2)              // returns -1\r\n   *    math.sign(0)                 // returns 0\r\n   *\r\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\r\n   *\r\n   * See also:\r\n   *\r\n   *    abs\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            The number for which to determine the sign\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\r\n   *            The sign of `x`\r\n   */\r\n  return typed(name, {\r\n    number: signNumber,\r\n    Complex: function Complex(x) {\r\n      return x.im === 0 ? complex(signNumber(x.re)) : x.sign();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return new _BigNumber(x.cmp(0));\r\n    },\r\n    Fraction: function Fraction(x) {\r\n      return new _Fraction(x.s, 1);\r\n    },\r\n    // deep map collection, skip zeros since sign(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)),\r\n    Unit: typed.referToSelf(self => x => {\r\n      if (!x._isDerived() && x.units[0].unit.offset !== 0) {\r\n        throw new TypeError('sign is ambiguous for units with offset');\r\n      }\r\n      return typed.find(self, x.valueType())(x.value);\r\n    })\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}