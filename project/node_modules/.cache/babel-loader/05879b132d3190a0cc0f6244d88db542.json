{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { logNumber } from '../../plain/number/index.js';\nvar name = 'log';\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    divideScalar,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the logarithm of a value.\r\n   *\r\n   * To avoid confusion with the matrix logarithm, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log(x)\r\n   *    math.log(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log(3.5)                  // returns 1.252762968495368\r\n   *    math.exp(math.log(2.4))        // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                // returns 10000\r\n   *    math.log(10000, 10)            // returns 4\r\n   *    math.log(10000) / math.log(10) // returns 4\r\n   *\r\n   *    math.log(1024, 2)              // returns 10\r\n   *    math.pow(2, 10)                // returns 1024\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log2, log10, log1p\r\n   *\r\n   * @param {number | BigNumber | Complex} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x` is calculated.\r\n   * @return {number | BigNumber | Complex}\r\n   *            Returns the logarithm of `x`\r\n   */\n\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return logNumber(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log();\n      }\n    },\n    Complex: function Complex(x) {\n      return x.log();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.ln();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log();\n      }\n    },\n    'any, any': typed.referToSelf(self => (x, base) => {\n      // calculate logarithm for a specified base, log(x, base)\n      return divideScalar(self(x), self(base));\n    })\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/log.js"],"names":["factory","logNumber","name","dependencies","createLog","_ref","typed","config","divideScalar","Complex","number","x","predictable","log","BigNumber","isNegative","ln","toNumber","referToSelf","self","base"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,cAApB,EAAoC,SAApC,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACxE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBQ,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AACzB,UAAIA,CAAC,IAAI,CAAL,IAAUJ,MAAM,CAACK,WAArB,EAAkC;AAChC,eAAOX,SAAS,CAACU,CAAD,CAAhB;AACD,OAFD,MAEO;AACL;AACA,eAAO,IAAIF,OAAJ,CAAYE,CAAZ,EAAe,CAAf,EAAkBE,GAAlB,EAAP;AACD;AACF,KARgB;AASjBJ,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBE,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACE,GAAF,EAAP;AACD,KAXgB;AAYjBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBH,CAAnB,EAAsB;AAC/B,UAAI,CAACA,CAAC,CAACI,UAAF,EAAD,IAAmBR,MAAM,CAACK,WAA9B,EAA2C;AACzC,eAAOD,CAAC,CAACK,EAAF,EAAP;AACD,OAFD,MAEO;AACL;AACA,eAAO,IAAIP,OAAJ,CAAYE,CAAC,CAACM,QAAF,EAAZ,EAA0B,CAA1B,EAA6BJ,GAA7B,EAAP;AACD;AACF,KAnBgB;AAoBjB,gBAAYP,KAAK,CAACY,WAAN,CAAkBC,IAAI,IAAI,CAACR,CAAD,EAAIS,IAAJ,KAAa;AACjD;AACA,aAAOZ,YAAY,CAACW,IAAI,CAACR,CAAD,CAAL,EAAUQ,IAAI,CAACC,IAAD,CAAd,CAAnB;AACD,KAHW;AApBK,GAAP,CAAZ;AAyBD,CAnE4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { logNumber } from '../../plain/number/index.js';\r\nvar name = 'log';\r\nvar dependencies = ['config', 'typed', 'divideScalar', 'Complex'];\r\nexport var createLog = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config,\r\n    divideScalar,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the logarithm of a value.\r\n   *\r\n   * To avoid confusion with the matrix logarithm, this function does not\r\n   * apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.log(x)\r\n   *    math.log(x, base)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.log(3.5)                  // returns 1.252762968495368\r\n   *    math.exp(math.log(2.4))        // returns 2.4\r\n   *\r\n   *    math.pow(10, 4)                // returns 10000\r\n   *    math.log(10000, 10)            // returns 4\r\n   *    math.log(10000) / math.log(10) // returns 4\r\n   *\r\n   *    math.log(1024, 2)              // returns 10\r\n   *    math.pow(2, 10)                // returns 1024\r\n   *\r\n   * See also:\r\n   *\r\n   *    exp, log2, log10, log1p\r\n   *\r\n   * @param {number | BigNumber | Complex} x\r\n   *            Value for which to calculate the logarithm.\r\n   * @param {number | BigNumber | Complex} [base=e]\r\n   *            Optional base for the logarithm. If not provided, the natural\r\n   *            logarithm of `x` is calculated.\r\n   * @return {number | BigNumber | Complex}\r\n   *            Returns the logarithm of `x`\r\n   */\r\n  return typed(name, {\r\n    number: function number(x) {\r\n      if (x >= 0 || config.predictable) {\r\n        return logNumber(x);\r\n      } else {\r\n        // negative value -> complex value computation\r\n        return new Complex(x, 0).log();\r\n      }\r\n    },\r\n    Complex: function Complex(x) {\r\n      return x.log();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      if (!x.isNegative() || config.predictable) {\r\n        return x.ln();\r\n      } else {\r\n        // downgrade to number, return Complex valued result\r\n        return new Complex(x.toNumber(), 0).log();\r\n      }\r\n    },\r\n    'any, any': typed.referToSelf(self => (x, base) => {\r\n      // calculate logarithm for a specified base, log(x, base)\r\n      return divideScalar(self(x), self(base));\r\n    })\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}