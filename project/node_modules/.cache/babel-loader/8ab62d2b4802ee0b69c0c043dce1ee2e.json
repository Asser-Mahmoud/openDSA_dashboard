{"ast":null,"code":"/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\n\nexport function createElement(tagName, properties) {\n  var element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\n\nexport function addClass(elements, classes) {\n  var classList = getClassList(classes);\n  var regExp = RegExp;\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n\n    for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n      var className = classList_1[_b];\n\n      if (isObject(ele)) {\n        var curClass = getValue('attributes.className', ele);\n\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new regExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\n\nexport function removeClass(elements, classes) {\n  var classList = getClassList(classes);\n\n  for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    var flag = isObject(ele);\n    var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n\n    if (canRemove) {\n      for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n        var className = classList_2[_b];\n\n        if (flag) {\n          var classes_1 = getValue('attributes.className', ele);\n          var classArr = classes_1.split(' ');\n          var index = classArr.indexOf(className);\n\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\n\nfunction getClassList(classes) {\n  var classList = [];\n\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\n\n\nexport function isVisible(element) {\n  var ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\n\nexport function prepend(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n\n  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n    var ele = _a[_i];\n    docFrag.appendChild(ele);\n  }\n\n  toElement.insertBefore(docFrag, toElement.firstElementChild);\n\n  if (isEval) {\n    executeScript(toElement);\n  }\n\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\n\nexport function append(fromElements, toElement, isEval) {\n  var docFrag = document.createDocumentFragment();\n\n  if (fromElements instanceof NodeList) {\n    while (fromElements.length > 0) {\n      docFrag.appendChild(fromElements[0]);\n    }\n  } else {\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n      var ele = _a[_i];\n      docFrag.appendChild(ele);\n    }\n  }\n\n  toElement.appendChild(docFrag);\n\n  if (isEval) {\n    executeScript(toElement);\n  }\n\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\n\nfunction executeScript(ele) {\n  var eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(function (element) {\n    var script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\n\n\nexport function detach(element) {\n  var parentNode = element.parentNode;\n\n  if (parentNode) {\n    return parentNode.removeChild(element);\n  }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\n\nexport function remove(element) {\n  var parentNode = element.parentNode;\n  EventHandler.clearEvents(element);\n  parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\n// eslint-disable-next-line\n\nexport function attributes(element, attributes) {\n  var keys = Object.keys(attributes);\n  var ele = element;\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n\n    if (isObject(ele)) {\n      var iKey = key;\n\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n\n      ele.attributes[\"\" + iKey] = attributes[\"\" + key];\n    } else {\n      ele.setAttribute(key, attributes[\"\" + key]);\n    }\n  }\n\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\n\nexport function select(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  selector = querySelectId(selector);\n  return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\n// eslint-disable-next-line\n\nexport function selectAll(selector, context, needsVDOM) {\n  if (context === void 0) {\n    context = document;\n  }\n\n  selector = querySelectId(selector);\n  var nodeList = context.querySelectorAll(selector);\n  return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\n\nfunction querySelectId(selector) {\n  var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    var idList = selector.split(',');\n\n    for (var i = 0; i < idList.length; i++) {\n      var list = idList[parseInt(i.toString(), 10)].split(' ');\n\n      for (var j = 0; j < list.length; j++) {\n        if (list[parseInt(j.toString(), 10)].indexOf('#') > -1) {\n          if (!list[parseInt(j.toString(), 10)].match(/\\[.*\\]/)) {\n            var splitId = list[parseInt(j.toString(), 10)].split('#');\n\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              var setId = list[parseInt(j.toString(), 10)].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[parseInt(j.toString(), 10)] = setId.join('.');\n            }\n          }\n        }\n      }\n\n      idList[parseInt(i.toString(), 10)] = list.join(' ');\n    }\n\n    return idList.join(',');\n  }\n\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\n\n\nexport function closest(element, selector) {\n  var el = element;\n\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\n\nexport function siblings(element) {\n  var siblings = [];\n  var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n\n  for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n    var curNode = childNodes_1[_i];\n\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\n\nexport function getAttributeOrDefault(element, property, value) {\n  var attrVal;\n  var isObj = isObject(element);\n\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[\"\" + property] = value;\n    }\n\n    attrVal = value;\n  }\n\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\n\nexport function setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    Object.keys(attrs).forEach(function (key) {\n      // eslint-disable-next-line\n      element.style[key] = attrs[key];\n    });\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\n\nexport function classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\n\nexport function matches(element, selector) {\n  // eslint-disable-next-line\n  var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\n\nexport function includeInnerHTML(ele, innerHTML) {\n  ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\n\nexport function containsClass(ele, className) {\n  if (isObject(ele)) {\n    // eslint-disable-next-line\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\n\nexport function cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-base/src/dom.js"],"names":["EventHandler","isNullOrUndefined","getValue","setValue","isObject","extend","SVG_REG","createElement","tagName","properties","element","test","document","createElementNS","innerHTML","className","undefined","id","styles","setAttribute","attrs","attributes","addClass","elements","classes","classList","getClassList","regExp","RegExp","_i","_a","length","ele","_b","classList_1","curClass","contains","add","removeClass","flag","canRemove","classList_2","classes_1","classArr","split","index","indexOf","splice","join","remove","push","isVisible","style","visibility","offsetWidth","prepend","fromElements","toElement","isEval","docFrag","createDocumentFragment","appendChild","insertBefore","firstElementChild","executeScript","append","NodeList","eleArray","querySelectorAll","forEach","script","text","head","detach","parentNode","removeChild","clearEvents","keys","Object","keys_1","key","iKey","select","selector","context","needsVDOM","querySelectId","querySelector","selectAll","nodeList","charRegex","match","idList","i","list","parseInt","toString","j","splitId","setId","replace","closest","el","nodeType","matches","siblings","childNodes","Array","prototype","slice","call","childNodes_1","curNode","Node","ELEMENT_NODE","getAttributeOrDefault","property","value","attrVal","isObj","getAttribute","setStyleAttribute","addClasses","removeClasses","msMatchesSelector","webkitMatchesSelector","includeInnerHTML","containsClass","cloneNode","deep"],"mappings":"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","sourcesContent":["/**\n * Functions related to dom operations.\n */\nimport { EventHandler } from './event-handler';\nimport { isNullOrUndefined, getValue, setValue, isObject, extend } from './util';\nvar SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n *\n * @param {string} tagName - Name of the tag, id and class names.\n * @param {ElementProperties} properties - Object to set properties in the element.\n * @param {ElementProperties} properties.id - To set the id to the created element.\n * @param {ElementProperties} properties.className - To add classes to the element.\n * @param {ElementProperties} properties.innerHTML - To set the innerHTML to element.\n * @param {ElementProperties} properties.styles - To set the some custom styles to element.\n * @param {ElementProperties} properties.attrs - To set the attributes to element.\n * @returns {any} ?\n * @private\n */\nexport function createElement(tagName, properties) {\n    var element = (SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName));\n    if (typeof (properties) === 'undefined') {\n        return element;\n    }\n    element.innerHTML = (properties.innerHTML ? properties.innerHTML : '');\n    if (properties.className !== undefined) {\n        element.className = properties.className;\n    }\n    if (properties.id !== undefined) {\n        element.id = properties.id;\n    }\n    if (properties.styles !== undefined) {\n        element.setAttribute('style', properties.styles);\n    }\n    if (properties.attrs !== undefined) {\n        attributes(element, properties.attrs);\n    }\n    return element;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function addClass(elements, classes) {\n    var classList = getClassList(classes);\n    var regExp = RegExp;\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        for (var _b = 0, classList_1 = classList; _b < classList_1.length; _b++) {\n            var className = classList_1[_b];\n            if (isObject(ele)) {\n                var curClass = getValue('attributes.className', ele);\n                if (isNullOrUndefined(curClass)) {\n                    setValue('attributes.className', className, ele);\n                }\n                else if (!new regExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n                    setValue('attributes.className', curClass + ' ' + className, ele);\n                }\n            }\n            else {\n                if (!ele.classList.contains(className)) {\n                    ele.classList.add(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to add the classes to array of elements\n *\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @returns {any} .\n * @private\n */\nexport function removeClass(elements, classes) {\n    var classList = getClassList(classes);\n    for (var _i = 0, _a = elements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        var flag = isObject(ele);\n        var canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n        if (canRemove) {\n            for (var _b = 0, classList_2 = classList; _b < classList_2.length; _b++) {\n                var className = classList_2[_b];\n                if (flag) {\n                    var classes_1 = getValue('attributes.className', ele);\n                    var classArr = classes_1.split(' ');\n                    var index = classArr.indexOf(className);\n                    if (index !== -1) {\n                        classArr.splice(index, 1);\n                    }\n                    setValue('attributes.className', classArr.join(' '), ele);\n                }\n                else {\n                    ele.classList.remove(className);\n                }\n            }\n        }\n    }\n    return elements;\n}\n/**\n * The function used to get classlist.\n *\n * @param  {string | string[]} classes - An element the need to check visibility\n * @returns {string[]} ?\n * @private\n */\nfunction getClassList(classes) {\n    var classList = [];\n    if (typeof classes === 'string') {\n        classList.push(classes);\n    }\n    else {\n        classList = classes;\n    }\n    return classList;\n}\n/**\n * The function used to check element is visible or not.\n *\n * @param  {Element|Node} element - An element the need to check visibility\n * @returns {boolean} ?\n * @private\n */\nexport function isVisible(element) {\n    var ele = element;\n    return (ele.style.visibility === '' && ele.offsetWidth > 0);\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function prepend(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n        var ele = _a[_i];\n        docFrag.appendChild(ele);\n    }\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n *\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @param {boolean} isEval - ?\n * @returns {Element[] | NodeList} ?\n * @private\n */\nexport function append(fromElements, toElement, isEval) {\n    var docFrag = document.createDocumentFragment();\n    if (fromElements instanceof NodeList) {\n        while (fromElements.length > 0) {\n            docFrag.appendChild(fromElements[0]);\n        }\n    }\n    else {\n        for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {\n            var ele = _a[_i];\n            docFrag.appendChild(ele);\n        }\n    }\n    toElement.appendChild(docFrag);\n    if (isEval) {\n        executeScript(toElement);\n    }\n    return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n *\n * @param {Element} ele - An element is going to evaluate the script\n * @returns {void} ?\n */\nfunction executeScript(ele) {\n    var eleArray = ele.querySelectorAll('script');\n    eleArray.forEach(function (element) {\n        var script = document.createElement('script');\n        script.text = element.innerHTML;\n        document.head.appendChild(script);\n        detach(script);\n    });\n}\n/**\n * The function used to remove the element from parentnode\n *\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function detach(element) {\n    var parentNode = element.parentNode;\n    if (parentNode) {\n        return parentNode.removeChild(element);\n    }\n}\n/**\n * The function used to remove the element from Dom also clear the bounded events\n *\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @returns {void} ?\n * @private\n */\nexport function remove(element) {\n    var parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n}\n/**\n * The function helps to set multiple attributes to an element\n *\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {string} attributes - JSON Object that is going to as attributes.\n * @returns {Element} ?\n * @private\n */\n// eslint-disable-next-line\nexport function attributes(element, attributes) {\n    var keys = Object.keys(attributes);\n    var ele = element;\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (isObject(ele)) {\n            var iKey = key;\n            if (key === 'tabindex') {\n                iKey = 'tabIndex';\n            }\n            ele.attributes[\"\" + iKey] = attributes[\"\" + key];\n        }\n        else {\n            ele.setAttribute(key, attributes[\"\" + key]);\n        }\n    }\n    return ele;\n}\n/**\n * The function selects the element from giving context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function select(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n}\n/**\n * The function selects an array of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @param  {Document|Element} context - It is an optional type, That specifies a Dom context.\n * @param {boolean} needsVDOM ?\n * @returns {HTMLElement[]} ?\n * @private\n */\n// eslint-disable-next-line\nexport function selectAll(selector, context, needsVDOM) {\n    if (context === void 0) { context = document; }\n    selector = querySelectId(selector);\n    var nodeList = context.querySelectorAll(selector);\n    return nodeList;\n}\n/**\n * The function selects an id of element from the given context.\n *\n * @param  {string} selector - Selector string need fetch element\n * @returns {string} ?\n * @private\n */\nfunction querySelectId(selector) {\n    var charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n    if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n        var idList = selector.split(',');\n        for (var i = 0; i < idList.length; i++) {\n            var list = idList[parseInt(i.toString(), 10)].split(' ');\n            for (var j = 0; j < list.length; j++) {\n                if (list[parseInt(j.toString(), 10)].indexOf('#') > -1) {\n                    if (!list[parseInt(j.toString(), 10)].match(/\\[.*\\]/)) {\n                        var splitId = list[parseInt(j.toString(), 10)].split('#');\n                        if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n                            var setId = list[parseInt(j.toString(), 10)].split('.');\n                            setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n                            list[parseInt(j.toString(), 10)] = setId.join('.');\n                        }\n                    }\n                }\n            }\n            idList[parseInt(i.toString(), 10)] = list.join(' ');\n        }\n        return idList.join(',');\n    }\n    return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n *\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @returns {Element} ?\n * @private\n */\nexport function closest(element, selector) {\n    var el = element;\n    if (typeof el.closest === 'function') {\n        return el.closest(selector);\n    }\n    while (el && el.nodeType === 1) {\n        if (matches(el, selector)) {\n            return el;\n        }\n        el = el.parentNode;\n    }\n    return null;\n}\n/**\n * Returns all sibling elements of the given element.\n *\n * @param  {Element|Node} element - An element that need to get siblings.\n * @returns {Element[]} ?\n * @private\n */\nexport function siblings(element) {\n    var siblings = [];\n    var childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n    for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n        var curNode = childNodes_1[_i];\n        if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n            siblings.push(curNode);\n        }\n    }\n    return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n *\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @returns {string} ?\n * @private\n */\nexport function getAttributeOrDefault(element, property, value) {\n    var attrVal;\n    var isObj = isObject(element);\n    if (isObj) {\n        attrVal = getValue('attributes.' + property, element);\n    }\n    else {\n        attrVal = element.getAttribute(property);\n    }\n    if (isNullOrUndefined(attrVal) && value) {\n        if (!isObj) {\n            element.setAttribute(property, value.toString());\n        }\n        else {\n            element.attributes[\"\" + property] = value;\n        }\n        attrVal = value;\n    }\n    return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n *\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @returns {void} ?\n * @private\n */\nexport function setStyleAttribute(element, attrs) {\n    if (attrs !== undefined) {\n        Object.keys(attrs).forEach(function (key) {\n            // eslint-disable-next-line\n            element.style[key] = attrs[key];\n        });\n    }\n}\n/**\n * Method for add and remove classes to a dom element.\n *\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @returns {void} ?\n * @private\n */\nexport function classList(element, addClasses, removeClasses) {\n    addClass([element], addClasses);\n    removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function matches(element, selector) {\n    // eslint-disable-next-line\n    var matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n    if (matches) {\n        return matches.call(element, selector);\n    }\n    else {\n        return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n    }\n}\n/**\n * Method to get the html text from DOM.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} innerHTML - String selector which element will satisfy.\n * @returns {void} ?\n * @private\n */\nexport function includeInnerHTML(ele, innerHTML) {\n    ele.innerHTML = innerHTML;\n}\n/**\n * Method to get the containsclass.\n *\n * @param {HTMLElement} ele - Element to compare with the selector.\n * @param {string} className - String selector which element will satisfy.\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function containsClass(ele, className) {\n    if (isObject(ele)) {\n        // eslint-disable-next-line\n        return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n    }\n    else {\n        return ele.classList.contains(className);\n    }\n}\n/**\n * Method to check whether the element matches the given selector.\n *\n * @param {Object} element - Element to compare with the selector.\n * @param {boolean} deep ?\n * @returns {any} ?\n * @private\n */\n// eslint-disable-next-line\nexport function cloneNode(element, deep) {\n    if (isObject(element)) {\n        if (deep) {\n            return extend({}, {}, element, true);\n        }\n    }\n    else {\n        return element.cloneNode(deep);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}