{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'divideScalar';\nvar dependencies = ['typed', 'numeric'];\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    numeric\n  } = _ref;\n  /**\r\n   * Divide two scalar values, `x / y`.\r\n   * This function is meant for internal use: it is used by the public functions\r\n   * `divide` and `inv`.\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\r\n   * @private\r\n   */\n\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/divideScalar.js"],"names":["factory","name","dependencies","createDivideScalar","_ref","typed","numeric","numberNumber","x","y","ComplexComplex","div","BigNumberBigNumber","FractionFraction","divide","divideInto"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,cAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,SAAV,CAAnB;AACA,OAAO,IAAIC,kBAAkB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACjF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASM,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOD,CAAC,GAAGC,CAAX;AACD,KAHgB;AAIjB,wBAAoB,SAASC,cAAT,CAAwBF,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,CAAP;AACD,KANgB;AAOjB,4BAAwB,SAASG,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,CAAP;AACD,KATgB;AAUjB,0BAAsB,SAASI,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAOD,CAAC,CAACG,GAAF,CAAMF,CAAN,CAAP;AACD,KAZgB;AAajB,4DAAwD,CAACD,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACM,MAAF,CAASL,CAAT,CAbjD;AAcjB,qDAAiD,CAACD,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACM,UAAF,CAAaP,CAAb;AAd1C,GAAP,CAAZ;AAgBD,CAjCqD,CAA/C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'divideScalar';\r\nvar dependencies = ['typed', 'numeric'];\r\nexport var createDivideScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    numeric\r\n  } = _ref;\r\n  /**\r\n   * Divide two scalar values, `x / y`.\r\n   * This function is meant for internal use: it is used by the public functions\r\n   * `divide` and `inv`.\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\r\n   * @private\r\n   */\r\n  return typed(name, {\r\n    'number, number': function numberNumber(x, y) {\r\n      return x / y;\r\n    },\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return x.div(y);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return x.div(y);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.div(y);\r\n    },\r\n    'Unit, number | Complex | Fraction | BigNumber | Unit': (x, y) => x.divide(y),\r\n    'number | Fraction | Complex | BigNumber, Unit': (x, y) => y.divideInto(x)\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}