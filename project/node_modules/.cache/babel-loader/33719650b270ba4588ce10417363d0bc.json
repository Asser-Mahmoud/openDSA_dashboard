{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'subtract';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    addScalar,\n    unaryMinus,\n    DenseMatrix,\n    concat\n  } = _ref; // TODO: split function subtract in two: subtract and subtractScalar\n\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\r\n   * Subtract two values, `x - y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.subtract(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.subtract(5.3, 2)        // returns number 3.3\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\r\n   *\r\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\r\n   *\r\n   *    const c = math.unit('2.1 km')\r\n   *    const d = math.unit('500m')\r\n   *    math.subtract(c, d)          // returns Unit 1.6 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    add\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\r\n   *            Initial value\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\r\n   *            Value to subtract from `x`\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Subtraction of `x` and `y`\r\n   */\n\n  return typed(name, {\n    'number, number': (x, y) => x - y,\n    'Complex, Complex': (x, y) => x.sub(y),\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\n    'Fraction, Fraction': (x, y) => x.sub(y),\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo01xDSid,\n    SD: matAlgo03xDSf,\n    Ss: matAlgo12xSfs,\n    sS: matAlgo10xSids\n  }));\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/subtract.js"],"names":["factory","createMatAlgo01xDSid","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo10xSids","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createSubtract","_ref","typed","matrix","equalScalar","addScalar","unaryMinus","DenseMatrix","concat","matAlgo01xDSid","matAlgo03xDSf","matAlgo05xSfSf","matAlgo10xSids","matAlgo12xSfs","matrixAlgorithmSuite","x","y","sub","minus","referToSelf","self","value","Error","equalBase","res","clone","find","valueType","fixPrefix","SS","DS","SD","Ss","sS"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'subtract';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix', 'concat'];\r\nexport var createSubtract = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    addScalar,\r\n    unaryMinus,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  // TODO: split function subtract in two: subtract and subtractScalar\r\n\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Subtract two values, `x - y`.\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.subtract(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.subtract(5.3, 2)        // returns number 3.3\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    const b = math.complex(4, 1)\r\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\r\n   *\r\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\r\n   *\r\n   *    const c = math.unit('2.1 km')\r\n   *    const d = math.unit('500m')\r\n   *    math.subtract(c, d)          // returns Unit 1.6 km\r\n   *\r\n   * See also:\r\n   *\r\n   *    add\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\r\n   *            Initial value\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\r\n   *            Value to subtract from `x`\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\r\n   *            Subtraction of `x` and `y`\r\n   */\r\n  return typed(name, {\r\n    'number, number': (x, y) => x - y,\r\n    'Complex, Complex': (x, y) => x.sub(y),\r\n    'BigNumber, BigNumber': (x, y) => x.minus(y),\r\n    'Fraction, Fraction': (x, y) => x.sub(y),\r\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\r\n      if (x.value === null) {\r\n        throw new Error('Parameter x contains a unit with undefined value');\r\n      }\r\n      if (y.value === null) {\r\n        throw new Error('Parameter y contains a unit with undefined value');\r\n      }\r\n      if (!x.equalBase(y)) {\r\n        throw new Error('Units do not match');\r\n      }\r\n      var res = x.clone();\r\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\r\n      res.fixPrefix = false;\r\n      return res;\r\n    })\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo05xSfSf,\r\n    DS: matAlgo01xDSid,\r\n    SD: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs,\r\n    sS: matAlgo10xSids\r\n  }));\r\n});"]},"metadata":{},"sourceType":"module"}