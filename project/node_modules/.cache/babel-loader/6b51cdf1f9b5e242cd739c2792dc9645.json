{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n  const [selectedExercise, setSelectedExercise] = useState(0);\n  const [exerciseOptions, setExerciseOptions] = useState([]);\n\n  const handleClick = () => {\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\n\n    axios.get(`http://localhost:4000/estimate/${data}`).then(response => {\n      var _selectedExerciseData, _selectedExerciseData2, _selectedExerciseData3;\n\n      const exercises = response.data;\n      console.log(exercises);\n      const numExercises = exercises.length;\n      const options = Array.from(Array(numExercises).keys()); // Generate an array of numbers from 0 to numExercises-1\n\n      setExerciseOptions(options);\n      const selectedExerciseData = exercises[selectedExercise];\n      const x = (_selectedExerciseData = selectedExerciseData.Ability) !== null && _selectedExerciseData !== void 0 ? _selectedExerciseData : [];\n      const a = (_selectedExerciseData2 = selectedExerciseData.Discrimination) !== null && _selectedExerciseData2 !== void 0 ? _selectedExerciseData2 : [];\n      const b = (_selectedExerciseData3 = selectedExerciseData.Difficulty) !== null && _selectedExerciseData3 !== void 0 ? _selectedExerciseData3 : [];\n\n      const sigmoid = (x, a, b) => {\n        const denominator = 1 + math.exp(-a * (x - b));\n        return denominator === 0 ? NaN : 1 / denominator;\n      };\n\n      const y = x.map((val, index) => sigmoid(val, a[index], b[index]));\n      const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n      const sortedX = sortedData.map(pair => pair[0]);\n      const sortedY = sortedData.map(pair => pair[1]);\n      const meanA = math.mean(a);\n      const meanB = math.mean(b);\n      const minAbility = math.min(...x);\n      const maxAbility = math.max(...x);\n      const range = maxAbility - minAbility;\n      const step = range / 100;\n      const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n      const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB));\n      setPlotData({\n        icc: {\n          x: sortedX,\n          y: sortedY\n        },\n        tcc: {\n          x: abilityValues,\n          y: y2\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleExerciseChange = event => {\n    setSelectedExercise(parseInt(event.target.value));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleExerciseChange,\n        children: exerciseOptions.map(exercise => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: exercise,\n          children: `Exercise ${exercise + 1}`\n        }, exercise, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Estimate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Item Response Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.icc.x,\n            y: plotData.icc.y,\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Item Response Curve',\n            xaxis: {\n              title: 'Latent Trait'\n            },\n            yaxis: {\n              title: 'Item Response'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Test Characteristic Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.tcc.x,\n            y: plotData.tcc.y,\n            type: 'scatter',\n            mode: 'lines',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Test Characteristic Curve'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IRT, \"Hxbpfo56qhH/UnEoF/4d3SCrymM=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","useEffect","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","selectedExercise","setSelectedExercise","exerciseOptions","setExerciseOptions","handleClick","data","get","then","response","exercises","console","log","numExercises","length","options","Array","from","keys","selectedExerciseData","Ability","a","Discrimination","b","Difficulty","sigmoid","denominator","exp","NaN","map","val","index","sortedData","value","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","catch","error","handleExerciseChange","event","parseInt","target","exercise","display","flex","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,QAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,IAAI,GAAGH,MAAM,CAACC,GAAD,CAAnB;;AAEA,SAASG,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC;AAAEa,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAE;AAAZ,KAAP;AAAyBC,IAAAA,GAAG,EAAE;AAAEF,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAE;AAAZ;AAA9B,GAAD,CAAxC;AACA,QAAM,CAACE,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CAAC,EAAD,CAAtD;;AAEA,QAAMqB,WAAW,GAAG,MAAM;AACxB,UAAMC,IAAI,GAAG,kBAAb,CADwB,CACS;;AACjCpB,IAAAA,KAAK,CACJqB,GADD,CACM,kCAAiCD,IAAK,EAD5C,EAEGE,IAFH,CAEQC,QAAQ,IAAI;AAAA;;AAChB,YAAMC,SAAS,GAAGD,QAAQ,CAACH,IAA3B;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,YAAMG,YAAY,GAAGH,SAAS,CAACI,MAA/B;AACA,YAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACH,YAAD,CAAL,CAAoBK,IAApB,EAAX,CAAhB,CAJgB,CAIwC;;AACxDd,MAAAA,kBAAkB,CAACW,OAAD,CAAlB;AAEA,YAAMI,oBAAoB,GAAGT,SAAS,CAACT,gBAAD,CAAtC;AACA,YAAMH,CAAC,4BAAGqB,oBAAoB,CAACC,OAAxB,yEAAmC,EAA1C;AACA,YAAMC,CAAC,6BAAGF,oBAAoB,CAACG,cAAxB,2EAA0C,EAAjD;AACA,YAAMC,CAAC,6BAAGJ,oBAAoB,CAACK,UAAxB,2EAAsC,EAA7C;;AACA,YAAMC,OAAO,GAAG,CAAC3B,CAAD,EAAIuB,CAAJ,EAAOE,CAAP,KAAa;AAC3B,cAAMG,WAAW,GAAG,IAAInC,IAAI,CAACoC,GAAL,CAAS,CAACN,CAAD,IAAMvB,CAAC,GAAGyB,CAAV,CAAT,CAAxB;AACA,eAAOG,WAAW,KAAK,CAAhB,GAAoBE,GAApB,GAA0B,IAAIF,WAArC;AACD,OAHD;;AAIA,YAAM3B,CAAC,GAAGD,CAAC,CAAC+B,GAAF,CAAM,CAACC,GAAD,EAAMC,KAAN,KAAgBN,OAAO,CAACK,GAAD,EAAMT,CAAC,CAACU,KAAD,CAAP,EAAgBR,CAAC,CAACQ,KAAD,CAAjB,CAA7B,CAAV;AACA,YAAMC,UAAU,GAAGlC,CAAC,CAAC+B,GAAF,CAAM,CAACI,KAAD,EAAQF,KAAR,KAAkB,CAACE,KAAD,EAAQlC,CAAC,CAACgC,KAAD,CAAT,CAAxB,EAA2CG,IAA3C,CAAgD,CAACb,CAAD,EAAIE,CAAJ,KAAUF,CAAC,CAAC,CAAD,CAAD,GAAOE,CAAC,CAAC,CAAD,CAAlE,CAAnB;AACA,YAAMY,OAAO,GAAGH,UAAU,CAACH,GAAX,CAAeO,IAAI,IAAIA,IAAI,CAAC,CAAD,CAA3B,CAAhB;AACA,YAAMC,OAAO,GAAGL,UAAU,CAACH,GAAX,CAAeO,IAAI,IAAIA,IAAI,CAAC,CAAD,CAA3B,CAAhB;AAEA,YAAME,KAAK,GAAG/C,IAAI,CAACgD,IAAL,CAAUlB,CAAV,CAAd;AACA,YAAMmB,KAAK,GAAGjD,IAAI,CAACgD,IAAL,CAAUhB,CAAV,CAAd;AACA,YAAMkB,UAAU,GAAGlD,IAAI,CAACmD,GAAL,CAAS,GAAG5C,CAAZ,CAAnB;AACA,YAAM6C,UAAU,GAAGpD,IAAI,CAACqD,GAAL,CAAS,GAAG9C,CAAZ,CAAnB;AACA,YAAM+C,KAAK,GAAGF,UAAU,GAAGF,UAA3B;AACA,YAAMK,IAAI,GAAGD,KAAK,GAAG,GAArB;AACA,YAAME,aAAa,GAAGxD,IAAI,CAACsD,KAAL,CAAWJ,UAAX,EAAuBE,UAAvB,EAAmCG,IAAnC,EAAyCE,OAAzC,EAAtB;AACA,YAAMC,EAAE,GAAGF,aAAa,CAAClB,GAAd,CAAmBC,GAAD,IAASL,OAAO,CAACK,GAAD,EAAMQ,KAAN,EAAaE,KAAb,CAAlC,CAAX;AAEA5C,MAAAA,WAAW,CAAC;AACVC,QAAAA,GAAG,EAAE;AAAEC,UAAAA,CAAC,EAAEqC,OAAL;AAAcpC,UAAAA,CAAC,EAAEsC;AAAjB,SADK;AAEVrC,QAAAA,GAAG,EAAE;AAAEF,UAAAA,CAAC,EAAEiD,aAAL;AAAoBhD,UAAAA,CAAC,EAAEkD;AAAvB;AAFK,OAAD,CAAX;AAID,KAnCH,EAoCGC,KApCH,CAoCSC,KAAK,IAAI;AACdxC,MAAAA,OAAO,CAACwC,KAAR,CAAcA,KAAd;AACD,KAtCH;AAuCD,GAzCD;;AA2CA,QAAMC,oBAAoB,GAAIC,KAAD,IAAW;AACtCnD,IAAAA,mBAAmB,CAACoD,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAatB,KAAd,CAAT,CAAnB;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAQ,QAAA,QAAQ,EAAEmB,oBAAlB;AAAA,kBACGjD,eAAe,CAAC0B,GAAhB,CAAoB2B,QAAQ,iBAC3B;AAAuB,UAAA,KAAK,EAAEA,QAA9B;AAAA,oBAA0C,YAAWA,QAAQ,GAAG,CAAE;AAAlE,WAAaA,QAAb;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAQ,QAAA,OAAO,EAAEnD,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAK,MAAA,KAAK,EAAE;AAAEoD,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA,8BACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,CACJ;AACE5D,YAAAA,CAAC,EAAEH,QAAQ,CAACE,GAAT,CAAaC,CADlB;AAEEC,YAAAA,CAAC,EAAEJ,QAAQ,CAACE,GAAT,CAAaE,CAFlB;AAGE4D,YAAAA,IAAI,EAAE,SAHR;AAIEC,YAAAA,IAAI,EAAE,eAJR;AAKEC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aALR;AAMEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,MAAM,EAAE,QAAV;AAAoBC,cAAAA,IAAI,EAAE;AAA1B;AANV,WADI,CADR;AAWE,UAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,GADD;AAENC,YAAAA,MAAM,EAAE,GAFF;AAGNC,YAAAA,KAAK,EAAE,iCAHD;AAINC,YAAAA,KAAK,EAAE;AAAED,cAAAA,KAAK,EAAE;AAAT,aAJD;AAKNE,YAAAA,KAAK,EAAE;AAAEF,cAAAA,KAAK,EAAE;AAAT;AALD;AAXV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE;AAAK,QAAA,KAAK,EAAE;AAAEV,UAAAA,IAAI,EAAE;AAAR,SAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,CACJ;AACE5D,YAAAA,CAAC,EAAEH,QAAQ,CAACK,GAAT,CAAaF,CADlB;AAEEC,YAAAA,CAAC,EAAEJ,QAAQ,CAACK,GAAT,CAAaD,CAFlB;AAGE4D,YAAAA,IAAI,EAAE,SAHR;AAIEC,YAAAA,IAAI,EAAE,OAJR;AAKEC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aALR;AAMEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,MAAM,EAAE,QAAV;AAAoBC,cAAAA,IAAI,EAAE;AAA1B;AANV,WADI,CADR;AAWE,UAAA,MAAM,EAAE;AAAEC,YAAAA,KAAK,EAAE,GAAT;AAAcC,YAAAA,MAAM,EAAE,GAAtB;AAA2BC,YAAAA,KAAK,EAAE;AAAlC;AAXV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAzGQ5E,G;;KAAAA,G;AA2GT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all);\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] } });\r\n  const [selectedExercise, setSelectedExercise] = useState(0);\r\n  const [exerciseOptions, setExerciseOptions] = useState([]);\r\n\r\n  const handleClick = () => {    \r\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\r\n    axios\r\n    .get(`http://localhost:4000/estimate/${data}`)\r\n      .then(response => {\r\n        const exercises = response.data;\r\n        console.log(exercises)\r\n        const numExercises = exercises.length;\r\n        const options = Array.from(Array(numExercises).keys()); // Generate an array of numbers from 0 to numExercises-1\r\n        setExerciseOptions(options);\r\n\r\n        const selectedExerciseData = exercises[selectedExercise];\r\n        const x = selectedExerciseData.Ability ?? [];\r\n        const a = selectedExerciseData.Discrimination ?? [];\r\n        const b = selectedExerciseData.Difficulty ?? [];\r\n        const sigmoid = (x, a, b) => {\r\n          const denominator = 1 + math.exp(-a * (x - b));\r\n          return denominator === 0 ? NaN : 1 / denominator;\r\n        };\r\n        const y = x.map((val, index) => sigmoid(val, a[index], b[index]));\r\n        const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\r\n        const sortedX = sortedData.map(pair => pair[0]);\r\n        const sortedY = sortedData.map(pair => pair[1]);\r\n\r\n        const meanA = math.mean(a);\r\n        const meanB = math.mean(b);\r\n        const minAbility = math.min(...x);\r\n        const maxAbility = math.max(...x);\r\n        const range = maxAbility - minAbility;\r\n        const step = range / 100;\r\n        const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n        const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n        setPlotData({\r\n          icc: { x: sortedX, y: sortedY },\r\n          tcc: { x: abilityValues, y: y2 }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const handleExerciseChange = (event) => {\r\n    setSelectedExercise(parseInt(event.target.value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <select onChange={handleExerciseChange}>\r\n          {exerciseOptions.map(exercise => (\r\n            <option key={exercise} value={exercise}>{`Exercise ${exercise + 1}`}</option>\r\n          ))}\r\n        </select>\r\n        <button onClick={handleClick}>Estimate</button>\r\n      </div>\r\n      <div style={{ display: 'flex' }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div>Item Response Curve</div>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.icc.x,\r\n                y: plotData.icc.y,\r\n                type: 'scatter',\r\n                mode: 'lines+markers',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              }\r\n            ]}\r\n            layout={{\r\n              width: 550,\r\n              height: 600,\r\n              title: 'IRT Model - Item Response Curve',\r\n              xaxis: { title: 'Latent Trait' },\r\n              yaxis: { title: 'Item Response' }\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ flex: 1 }}>\r\n          <div>Test Characteristic Curve</div>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.tcc.x,\r\n                y: plotData.tcc.y,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              },\r\n            ]}\r\n            layout={{ width: 550, height: 600, title: 'IRT Model - Test Characteristic Curve' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}