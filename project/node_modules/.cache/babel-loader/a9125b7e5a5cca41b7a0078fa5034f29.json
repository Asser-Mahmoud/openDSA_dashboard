{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'to';\nvar dependencies = ['typed', 'matrix', 'concat'];\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    concat\n  } = _ref;\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\r\n   * Change the unit of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.to(x, unit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.to(math.unit('2 inch'), 'cm')             // returns Unit 5.08 cm\r\n   *    math.to(math.unit('2 inch'), math.unit('cm'))  // returns Unit 5.08 cm\r\n   *    math.to(math.unit(16, 'bytes'), 'bits')        // returns Unit 128 bits\r\n   *\r\n   * See also:\r\n   *\r\n   *    unit\r\n   *\r\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\r\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\r\n   *                                      or a unit without value.\r\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\r\n   */\n\n  return typed(name, {\n    'Unit, Unit | string': (x, unit) => x.to(unit)\n  }, matrixAlgorithmSuite({\n    Ds: true\n  }));\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/unit/to.js"],"names":["factory","createMatrixAlgorithmSuite","name","dependencies","createTo","_ref","typed","matrix","concat","matrixAlgorithmSuite","x","unit","to","Ds"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,QAApB,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACvE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAKA,MAAII,oBAAoB,GAAGR,0BAA0B,CAAC;AACpDK,IAAAA,KADoD;AAEpDC,IAAAA,MAFoD;AAGpDC,IAAAA;AAHoD,GAAD,CAArD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOF,KAAK,CAACJ,IAAD,EAAO;AACjB,2BAAuB,CAACQ,CAAD,EAAIC,IAAJ,KAAaD,CAAC,CAACE,EAAF,CAAKD,IAAL;AADnB,GAAP,EAETF,oBAAoB,CAAC;AACtBI,IAAAA,EAAE,EAAE;AADkB,GAAD,CAFX,CAAZ;AAKD,CAzC2C,CAArC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'to';\r\nvar dependencies = ['typed', 'matrix', 'concat'];\r\nexport var createTo = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    concat\r\n  } = _ref;\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Change the unit of a value.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.to(x, unit)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.to(math.unit('2 inch'), 'cm')             // returns Unit 5.08 cm\r\n   *    math.to(math.unit('2 inch'), math.unit('cm'))  // returns Unit 5.08 cm\r\n   *    math.to(math.unit(16, 'bytes'), 'bits')        // returns Unit 128 bits\r\n   *\r\n   * See also:\r\n   *\r\n   *    unit\r\n   *\r\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\r\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\r\n   *                                      or a unit without value.\r\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\r\n   */\r\n  return typed(name, {\r\n    'Unit, Unit | string': (x, unit) => x.to(unit)\r\n  }, matrixAlgorithmSuite({\r\n    Ds: true\r\n  }));\r\n});"]},"metadata":{},"sourceType":"module"}