{"ast":null,"code":"/*!\r\n * Chart.js v4.2.1\r\n * https://www.chartjs.org\r\n * (c) 2023 Chart.js Contributors\r\n * Released under the MIT License\r\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  _update() {\n    let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n\n        this._notify(chart, anims, date, 'complete');\n\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n\n    return anims;\n  }\n\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n\n    this._getAnims(chart).items.push(...items);\n  }\n\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  start(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims) {\n      return;\n    }\n\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  stop(chart) {\n    const anims = this._charts.get(chart);\n\n    if (!anims || !anims.items.length) {\n      return;\n    }\n\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n\n    anims.items = [];\n\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n\n}\n\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n\n};\n\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n\n    if (!this._active) {\n      this._target[prop] = to;\n\n      this._notify(true);\n\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n\n}\n\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n\n      if (!isObject(cfg)) {\n        return;\n      }\n\n      const resolved = {};\n\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n\n    return animations;\n  }\n\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n\n    return animations;\n  }\n\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n\n  let options = target.options;\n\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n\n      break;\n    }\n\n    otherValue = stack.values[datasetIndex];\n\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n\n    delete stacks[axis][datasetIndex];\n\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\n\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\n\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\n\nclass DatasetController {\n  static defaults = {};\n  static datasetElementType = null;\n  static dataElementType = null;\n\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  _destroy() {\n    const meta = this._cachedMeta;\n\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    this._resyncElements(resetNewElements);\n\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n\n          prev = cur;\n        }\n      }\n\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n\n    return parsed;\n  }\n\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n\n    const otherScale = this._getOtherScale(scale);\n\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n\n      if (sorted) {\n        break;\n      }\n    }\n\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n\n    return values;\n  }\n\n  getMaxOverflow() {\n    return false;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  update(mode) {}\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n\n      if (element.hidden) {\n        continue;\n      }\n\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  _resolveElementOptions(elementType) {\n    let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n\n    const context = () => this.getContext(index, active, mode);\n\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n\n    if (cached) {\n      return cached;\n    }\n\n    let options;\n\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n\n    const animations = new Animations(chart, options && options.animations);\n\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  _insertElements(start, count) {\n    let resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = arr => {\n      arr.length += count;\n\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {}\n\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n\n    meta.data.splice(start, count);\n  }\n\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n\n    const newCount = arguments.length - 2;\n\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n\n}\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n\n  return scale._cache.$bar;\n}\n\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\n\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, _ref, ratio) {\n  let {\n    inflateAmount\n  } = _ref;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\n\nclass BarController extends DatasetController {\n  static id = 'bar';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n\n    return parsed;\n  }\n\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  getMaxOverflow() {\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n\n    const ruler = this._getRuler();\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = meta => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n\nclass BubbleController extends DatasetController {\n  static id = 'bubble';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n\n    return parsed;\n  }\n\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n\n    return parsed;\n  }\n\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n\n    return max > 0 && max;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n\n    const radius = values.radius;\n\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\n\nclass DoughnutController extends DatasetController {\n  static id = 'doughnut';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      }\n    },\n    cutout: '50%',\n    rotation: 0,\n    circumference: 360,\n    radius: '100%',\n    spacing: 0,\n    indexAxis: 'r'\n  };\n  static descriptors = {\n    _scriptable: name => name !== 'spacing',\n    _indexable: name => name !== 'spacing'\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n\n        const rotation = controller._getRotation();\n\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n\n    const chartWeight = this._getRingWeight(this.index);\n\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n\n    const circumference = this._getCircumference();\n\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    let startAngle = this._getRotation();\n\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n\n    return max;\n  }\n\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n\n}\n\nclass LineController extends DatasetController {\n  static id = 'line';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    showLine: true,\n    spanGaps: false\n  };\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category'\n      },\n      _value_: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n\n}\n\nclass PolarAreaController extends DatasetController {\n  static id = 'polarArea';\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      }\n    },\n    indexAxis: 'r',\n    startAngle: 0\n  };\n  static overrides = {\n    aspectRatio: 1,\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n\n            if (data.labels.length && data.datasets.length) {\n              const {\n                labels: {\n                  pointStyle,\n                  color\n                }\n              } = chart.legend.options;\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n                  index: i\n                };\n              });\n            }\n\n            return [];\n          }\n\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n\n      }\n    },\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n\n}\n\nclass PieController extends DoughnutController {\n  static id = 'pie';\n  static defaults = {\n    cutout: 0,\n    rotation: 0,\n    circumference: 360,\n    radius: '100%'\n  };\n}\n\nclass RadarController extends DatasetController {\n  static id = 'radar';\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    }\n  };\n  static overrides = {\n    aspectRatio: 1,\n    scales: {\n      r: {\n        type: 'radialLinear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n}\n\nclass ScatterController extends DatasetController {\n  static id = 'scatter';\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n  static overrides = {\n    interaction: {\n      mode: 'point'\n    },\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PolarAreaController: PolarAreaController,\n  PieController: PieController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */\n\n\nclass DateAdapterBase {\n  /**\r\n  * Override default date adapter methods.\r\n  * Accepts type parameter to define options type.\r\n  * @example\r\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n  *   init() {\r\n  *     console.log(this.options.myAdapterOption);\r\n  *   }\r\n  * })\r\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  constructor(options) {\n    this.options = options || {};\n  } // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  init() {}\n\n  formats() {\n    return abstract();\n  }\n\n  parse() {\n    return abstract();\n  }\n\n  format() {\n    return abstract();\n  }\n\n  add() {\n    return abstract();\n  }\n\n  diff() {\n    return abstract();\n  }\n\n  startOf() {\n    return abstract();\n  }\n\n  endOf() {\n    return abstract();\n  }\n\n}\n\nvar adapters = {\n  _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\n\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n\n  return items;\n}\n\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n\n      return items;\n    },\n\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n\n  return stacks;\n}\n\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height1 = chartArea.h * weight;\n      const width1 = stack.size || box.width;\n\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n      }\n\n      stack.start = x;\n      stack.placed += height1;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n\n  releaseContext(context) {\n    return false;\n  }\n\n  addEventListener(chart, type, listener) {}\n\n  removeEventListener(chart, type, listener) {}\n\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  isAttached(canvas) {\n    return true;\n  }\n\n  updateConfig(config) {}\n\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n\n  const container = canvas && _getParentNode(canvas);\n\n  if (!container) {\n    return;\n  }\n\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\n\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  releaseContext(context) {\n    const canvas = context.canvas;\n\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n\n    return !!(container && container.isConnected);\n  }\n\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n\n  return DomPlatform;\n}\n\nclass Element {\n  static defaults = {};\n  static defaultRoutes = undefined;\n  active = false;\n\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  getProps(props, final) {\n    const anims = this.$animations;\n\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n\n}\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n\n  const tickLength = scale._tickSize();\n\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n\n  return Math.max(spacing, 1);\n}\n\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n\n  return result;\n}\n\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n\n  return diff;\n}\n\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n\n  return result;\n}\n\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n\n    lineValue += validIndex < index ? offset : -offset;\n\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n\n  return lineValue;\n}\n\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID1 = Object.keys(position)[0];\n      const value1 = position[positionAxisID1];\n      titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\n\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  parse(raw, index) {\n    return raw;\n  }\n\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  getTicks() {\n    return this.ticks;\n  }\n\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  getLabelItems() {\n    let chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n\n    return items;\n  }\n\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n\n  determineDataLimits() {}\n\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n\n  buildTicks() {\n    return [];\n  }\n\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n\n  afterAutoSkip() {}\n\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n\n    const display = this._isVisible();\n\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n\n  getLabelForValue(value) {\n    return value;\n  }\n\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n\n  getValueForPixel(pixel) {}\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret1 = this._getYAxisLabelAlignment(tl);\n\n      textAlign = ret1.textAlign;\n      x = ret1.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID1 = Object.keys(position)[0];\n        const value1 = position[positionAxisID1];\n        x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n      }\n\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n\n        if (mirror) {\n          textOffset *= -1;\n        }\n\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n\n          case 'bottom':\n            top -= height;\n            break;\n        }\n\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n\n          case 'right':\n            left -= width;\n            break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n\n    const labelSizes = this._getLabelSizes();\n\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {\n      textAlign,\n      x\n    };\n  }\n\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n\n    return 0;\n  }\n\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n\n    if (!axisWidth) {\n      return;\n    }\n\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  get(id) {\n    return this.items[id];\n  }\n\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  add() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    this._each('register', args);\n  }\n\n  remove() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this._each('unregister', args);\n  }\n\n  addControllers() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this._each('register', args, this.controllers);\n  }\n\n  addElements() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this._each('register', args, this.elements);\n  }\n\n  addPlugins() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this._each('register', args, this.plugins);\n  }\n\n  addScales() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    this._each('register', args, this.scales);\n  }\n\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  removeControllers() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    this._each('unregister', args, this.controllers);\n  }\n\n  removeElements() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    this._each('unregister', args, this.elements);\n  }\n\n  removePlugins() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    this._each('unregister', args, this.plugins);\n  }\n\n  removeScales() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    this._each('unregister', args, this.scales);\n  }\n\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n\n    return this.plugins;\n  }\n\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n\n    return item;\n  }\n\n}\n\nvar registry = /* #__PURE__ */new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n\n      this._notify(this._init, chart, 'uninstall');\n    }\n\n    return result;\n  }\n\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n\n}\n\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n\n  for (let i1 = 0; i1 < local.length; i1++) {\n    const plugin = local[i1];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {\n    plugins,\n    localIds\n  };\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n\n  if (options === true) {\n    return {};\n  }\n\n  return options;\n}\n\nfunction createDescriptors(chart, _ref2, options, all) {\n  let {\n    plugins,\n    localIds\n  } = _ref2;\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n\n    if (opts === null) {\n      continue;\n    }\n\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, _ref3, opts, context) {\n  let {\n    plugin,\n    local\n  } = _ref3;\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n\n    this._resolverCache.clear();\n  }\n\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n\n    let cache = _scopeCache.get(mainScope);\n\n    if (!cache || resetCache) {\n      cache = new Map();\n\n      _scopeCache.set(mainScope, cache);\n    }\n\n    return cache;\n  }\n\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n\n    const cache = this._cachedScopes(mainScope, resetCache);\n\n    const cached = cache.get(keyLists);\n\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n\n    return array;\n  }\n\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n\n  resolveNamedOptions(scopes, names, context) {\n    let prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n\n    return result;\n  }\n\n  createResolver(scopes, context) {\n    let prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n    let descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n\n  return cached;\n}\n\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar version = \"4.2.1\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\n\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\n\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n\n  return item;\n}\n\nconst instances = {};\n\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n\n  for (const key of keys) {\n    const intKey = +key;\n\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n\n  if (isClick) {\n    return lastEvent;\n  }\n\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {\n    xScale,\n    yScale\n  } = meta;\n\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register() {\n    registry.add(...arguments);\n    invalidatePlugins();\n  }\n\n  static unregister() {\n    registry.remove(...arguments);\n    invalidatePlugins();\n  }\n\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n\n      metasets.splice(numData, numMeta - numData);\n    }\n\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n\n        meta = this.getDatasetMeta(i);\n      }\n\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n\n    return newControllers;\n  }\n\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  reset() {\n    this._resetElements();\n\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n\n    this._checkEventBindings();\n\n    this._updateHiddenIndices();\n\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n\n    this._updateLayout(minPadding);\n\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    const {\n      _active,\n      _lastEvent\n    } = this;\n\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n\n    const changeSet = makeSet(0);\n\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n\n      if (box.configure) {\n        box.configure();\n      }\n\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1) {\n      this._updateDataset(i1, isFunction(mode) ? mode({\n        datasetIndex: i1\n      }) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n\n  draw() {\n    let i;\n\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n\n      this._resize(width, height);\n\n      this._resizeBeforeDraw = null;\n    }\n\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const layers = this._layers;\n\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n\n    this._stop();\n\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image() {\n    return this.canvas.toDataURL(...arguments);\n  }\n\n  bindEvents() {\n    this.bindUserEvents();\n\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, type => _add(type, listener));\n  }\n\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached;\n\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      this._stop();\n\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(_ref4 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref4;\n      const meta = this.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n\n    const isClick = _isClickEvent(e);\n\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed || replay) {\n      this._active = active;\n\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n\n}\n\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius; // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\r\n * Parse border radius from the provided options\r\n */\n\n\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2); // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */\n\n\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\r\n * Path the arc, respecting border radius by separating into left and right halves.\r\n *\r\n *   Start      End\r\n *\r\n *    1--->a--->2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6<---b<---5    Inner\r\n */\n\n\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle); // The corner segment from point 2 to point 3\n\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    } // The line from point 3 to point 4\n\n\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y); // The corner segment from point 4 to point 5\n\n    if (innerEnd > 0) {\n      const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    } // The inner arc from point 5 to point b to point 6\n\n\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true); // The corner segment from point 6 to point 7\n\n    if (innerStart > 0) {\n      const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    } // The line from point 7 to point 8\n\n\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y); // The corner segment from point 8 to point 1\n\n    if (outerStart > 0) {\n      const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nclass ArcElement extends Element {\n  static id = 'arc';\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return betweenAngles && withinRadius;\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n\n}\n\nfunction setStyle(ctx, options) {\n  let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment) {\n  let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n\n    lastY = y;\n  }\n\n  drawX();\n}\n\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n\n  if (!path) {\n    path = line._path = new Path2D();\n\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nclass LineElement extends Element {\n  static id = 'line';\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n  static descriptors = {\n    _scriptable: true,\n    _indexable: name => name !== 'borderDash' && name !== 'fill'\n  };\n\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n\n    const _interpolate = _getInterpolationMethod(options);\n\n    let i, ilen;\n\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n\n    return result.length === 1 ? result[0] : result;\n  }\n\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  path(ctx, start, count) {\n    const segments = this.segments;\n\n    const segmentMethod = _getSegmentMethod(this);\n\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n\n    return !!loop;\n  }\n\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\n\nclass PointElement extends Element {\n  static id = 'point';\n  /**\r\n  * @type {any}\r\n  */\n\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n  /**\r\n  * @type {any}\r\n  */\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx, area) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {}; // @ts-expect-error Fallbacks should never be hit in practice\n\n    return options.radius + options.hitRadius;\n  }\n\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount) {\n  let refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nclass BarElement extends Element {\n  static id = 'bar';\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  LineElement: LineElement,\n  PointElement: PointElement,\n  BarElement: BarElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n]; // Border colors with 50% transparency\n\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\n\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({ ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {\n    start,\n    count\n  };\n}\n\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n\n      if (chart.options.parsing) {\n        return;\n      }\n\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n\n      let decimated;\n\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n\n  return parts;\n}\n\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n\n  return {\n    property,\n    start,\n    end\n  };\n}\n\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(_ref5 => {\n    let {\n      start,\n      end\n    } = _ref5;\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\n\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n\n  return pixel;\n}\n\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n\n  return value;\n}\n\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\n\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n\n    if (meta.index === index) {\n      break;\n    }\n\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n\n  return below;\n}\n\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n\n    if (!point || first && last) {\n      continue;\n    }\n\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n\n      if (!last) {\n        break;\n      }\n    }\n  }\n\n  points.push(...postponed);\n}\n\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n\n  return {\n    first,\n    last,\n    point\n  };\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n\n}\n\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n\n  return computeLinearBoundary(source);\n}\n\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n\n  const value = _getTargetValue(fill, scale, start);\n\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n\n  const {\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis\n    });\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line,\n      target,\n      color: above,\n      scale,\n      property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n\n  fill(ctx, {\n    line,\n    target,\n    color: below,\n    scale,\n    property\n  });\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale\n  } = cfg;\n\n  const segments = _segments(line, target, property);\n\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {\n    top,\n    bottom\n  } = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n\n    const titleHeight = this._computeTitleHeight();\n\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n\n    if (this.isHorizontal()) {\n      let row = 0;\n\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n\n      for (const hitbox1 of hitboxes) {\n        if (hitbox1.col !== col) {\n          col = hitbox1.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n\n        hitbox1.top = top;\n        hitbox1.left += this.left + padding;\n        hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n        top += hitbox1.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    const isHorizontal = this.isHorizontal();\n\n    const titleHeight = this._computeTitleHeight();\n\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  handleEvent(e) {\n    const opts = this.options;\n\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n\n  return false;\n}\n\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n\n      maxWidth = bottom - top;\n    }\n\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n\n};\n\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n\n  return str;\n}\n\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  let widthPadding = 0;\n\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\n\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n\n  return y;\n}\n\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  beforeTitle: noop,\n\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n\n    const value = tooltipItem.formattedValue;\n\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n\n    return label;\n  },\n\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nclass Tooltip extends Element {\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n\n      y3 = y1;\n    }\n\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n\n      if (!position) {\n        return;\n      }\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(_ref6 => {\n      let {\n        datasetIndex,\n        index\n      } = _ref6;\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  handleEvent(e, replay) {\n    let inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    const positionChanged = this._positionChanged(active, e);\n\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      return lastActive;\n    }\n\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n\n}\n\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', { ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n\n  return value;\n}\n\nclass CategoryScale extends Scale {\n  static id = 'category';\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n\n    if (added.length) {\n      const labels = this.getLabels();\n\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n\n      this._addedLabels = [];\n    }\n\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n\n      if (niceMin < min) {\n        j++;\n      }\n\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({\n      value: Math.round((niceMin + j * spacing) * factor) / factor\n    });\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, _ref7) {\n  let {\n    horizontal,\n    minRotation\n  } = _ref7;\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n}\n\nclass LinearScale extends LinearScaleBase {\n  static id = 'linear';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n\n    const tickFont = this._resolveTickFontOptions(0);\n\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n\n}\n\nconst log10Floor = v => Math.floor(log10(v));\n\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n\n  return Math.min(rangeExp, log10Floor(min));\n}\n\nfunction generateTicks(generationOptions, _ref8) {\n  let {\n    min,\n    max\n  } = _ref8;\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\n\nclass LogarithmicScale extends Scale {\n  static id = 'logarithmic';\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => min = minDefined ? min : v;\n\n    const setMax = v => max = maxDefined ? max : v;\n\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n\n}\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign,\n      left,\n      top,\n      right,\n      bottom\n    } = scale._pointLabelItems[i];\n    const {\n      backdropColor\n    } = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nclass RadialLinearScale extends LinearScaleBase {\n  static id = 'radialLinear';\n  static defaults = {\n    display: true,\n    animate: true,\n    position: 'chartArea',\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n    grid: {\n      circular: false\n    },\n    startAngle: 0,\n    ticks: {\n      showLabelBackdrop: true,\n      callback: Ticks.formatters.numeric\n    },\n    pointLabels: {\n      backdropColor: undefined,\n      backdropPadding: 2,\n      display: true,\n      font: {\n        size: 10\n      },\n\n      callback(label) {\n        return label;\n      },\n\n      padding: 5,\n      centerPointLabels: false\n    }\n  };\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter) {\n    let additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  drawBorder() {}\n\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color\n      });\n    });\n    ctx.restore();\n  }\n\n  drawTitle() {}\n\n}\n\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\n\nfunction sorter(a, b) {\n  return a - b;\n}\n\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n\n  return ticks;\n}\n\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nclass TimeScale extends Scale {\n  static id = 'time';\n  static defaults = {\n    bounds: 'data',\n    adapters: {},\n    time: {\n      parser: false,\n      unit: false,\n      round: false,\n      isoWeekday: false,\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      source: 'auto',\n      callback: false,\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n\n    return {\n      min,\n      max\n    };\n  }\n\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  initOffsets() {\n    let timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n\n    const size = this._getLabelSize(exampleLabel);\n\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return this._cache.data = this.normalize(timestamps);\n  }\n\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n\n}\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n  static id = 'timeseries';\n  static defaults = TimeScale.defaults;\n\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n\n    return table;\n  }\n\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"mappings":"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","names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","transparent","interpolators","boolean","from","to","factor","color","c0","helpersColor","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","animator","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","new","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","grouped","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","iAxisKey","vAxisKey","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","skipNull","val","isNaN","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","animateRotate","animateScale","spacing","descriptors","_scriptable","_indexable","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","borderWidth","onClick","e","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","arc","metaData","formatNumber","locale","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","LineController","showLine","spanGaps","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","segment","animated","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","angleLines","display","circular","pointLabels","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","interaction","registry","getElement","abstract","Error","DateAdapterBase","members","override","prototype","init","formats","format","diff","startOf","endOf","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","defaultRoutes","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","callCallback","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getDatasetArea","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","Interaction","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","chartX","chartY","rAdjust","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","capBezierPoints","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","forceOverride","_args","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","algorithm","beforeElementsUpdate","xAxis","threshold","d","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","clipVertical","clipY","lineLoop","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","_element","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","WeakMap","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","generateTicks","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","minExp","exp","significand","lastTick","LogarithmicScale","logarithmic","_zero","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","extra","outerDistance","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","drawPointLabels","backdropLeft","backdropTop","backdropWidth","backdropHeight","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","animate","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","adapters","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.animator.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.animation.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.animations.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.datasetController.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.bar.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.bubble.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.doughnut.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.line.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.polarArea.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.pie.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.radar.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\controllers\\controller.scatter.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.adapters.ts","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.interaction.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.layouts.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\platform\\platform.base.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\platform\\platform.basic.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\platform\\platform.dom.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\platform\\index.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.element.ts","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.scale.autoskip.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.scale.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.typedRegistry.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.registry.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.plugins.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.config.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\core\\core.controller.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\elements\\element.arc.ts","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\elements\\element.line.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\elements\\element.point.ts","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\elements\\element.bar.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.colors.ts","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.decimation.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.segment.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.helper.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.options.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.stack.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\simpleArc.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.target.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\filler.drawing.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.filler\\index.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.legend.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.title.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.subtitle.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\plugins\\plugin.tooltip.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.category.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.linearbase.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.linear.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.logarithmic.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.radialLinear.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.time.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\scales\\scale.timeseries.js","C:\\Users\\amase\\Desktop\\open_dsa\\openDSA_dashboard\\project\\node_modules\\chart.js\\src\\index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (an thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal meta data accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing',\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outr radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n\n  id = scaleOptions.axis\n    || axisFromPosition(scaleOptions.position)\n    || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n\n  if (id) {\n    return id;\n  }\n\n  throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getDatasetArea(meta) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: xScale.left,\n      right: xScale.right,\n      top: yScale.top,\n      bottom: yScale.bottom\n    };\n  }\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta) || this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n\n    items.push({\n      // Text position\n      x: pointLabelPosition.x,\n      y,\n\n      // Text rendering data\n      textAlign,\n\n      // Bounding box\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if its not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @private\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guestimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"]},"metadata":{},"sourceType":"module"}