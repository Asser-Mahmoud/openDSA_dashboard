{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'equal';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\r\n   * Test whether two values are equal.\r\n   *\r\n   * The function tests whether the relative difference between x and y is\r\n   * smaller than the configured epsilon. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\r\n   *\r\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\r\n   * equal to `null` and nothing else, and `undefined` is only equal to\r\n   * `undefined` and nothing else. Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.equal(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.equal(2 + 2, 3)         // returns false\r\n   *    math.equal(2 + 2, 4)         // returns true\r\n   *\r\n   *    const a = math.unit('50 cm')\r\n   *    const b = math.unit('5 m')\r\n   *    math.equal(a, b)             // returns true\r\n   *\r\n   *    const c = [2, 5, 1]\r\n   *    const d = [2, 7, 1]\r\n   *\r\n   *    math.equal(c, d)             // returns [true, false, true]\r\n   *    math.deepEqual(c, d)         // returns false\r\n   *\r\n   *    math.equal(\"1000\", \"1e3\")    // returns true\r\n   *    math.equal(0, null)          // returns false\r\n   *\r\n   * See also:\r\n   *\r\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\r\n   *\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\r\n   */\n\n  return typed(name, createEqualNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: equalScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y === null;\n      }\n\n      if (y === null) {\n        return x === null;\n      }\n\n      if (x === undefined) {\n        return y === undefined;\n      }\n\n      if (y === undefined) {\n        return x === undefined;\n      }\n\n      return equalScalar(x, y);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/relational/equal.js"],"names":["factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createEqual","_ref","typed","matrix","equalScalar","DenseMatrix","concat","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","createEqualNumber","elop","SS","DS","Ss","_ref2","anyAny","x","y","undefined"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,aAAnC,EAAkD,QAAlD,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC1E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,WAJE;AAKFC,IAAAA;AALE,MAMAL,IANJ;AAOA,MAAIM,aAAa,GAAGb,mBAAmB,CAAC;AACtCQ,IAAAA;AADsC,GAAD,CAAvC;AAGA,MAAIM,aAAa,GAAGb,mBAAmB,CAAC;AACtCO,IAAAA,KADsC;AAEtCG,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAII,aAAa,GAAGb,mBAAmB,CAAC;AACtCM,IAAAA,KADsC;AAEtCG,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAIK,oBAAoB,GAAGb,0BAA0B,CAAC;AACpDK,IAAAA,KADoD;AAEpDC,IAAAA,MAFoD;AAGpDG,IAAAA;AAHoD,GAAD,CAArD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOJ,KAAK,CAACJ,IAAD,EAAOa,iBAAiB,CAAC;AACnCT,IAAAA,KADmC;AAEnCE,IAAAA;AAFmC,GAAD,CAAxB,EAGRM,oBAAoB,CAAC;AACvBE,IAAAA,IAAI,EAAER,WADiB;AAEvBS,IAAAA,EAAE,EAAEL,aAFmB;AAGvBM,IAAAA,EAAE,EAAEP,aAHmB;AAIvBQ,IAAAA,EAAE,EAAEN;AAJmB,GAAD,CAHZ,CAAZ;AASD,CA9E8C,CAAxC;AA+EP,OAAO,IAAIE,iBAAiB,GAAGlB,OAAO,CAACK,IAAD,EAAO,CAAC,OAAD,EAAU,aAAV,CAAP,EAAiCkB,KAAK,IAAI;AAC9E,MAAI;AACFd,IAAAA,KADE;AAEFE,IAAAA;AAFE,MAGAY,KAHJ;AAIA,SAAOd,KAAK,CAACJ,IAAD,EAAO;AACjB,gBAAY,SAASmB,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAChC;AACA,UAAID,CAAC,KAAK,IAAV,EAAgB;AACd,eAAOC,CAAC,KAAK,IAAb;AACD;;AACD,UAAIA,CAAC,KAAK,IAAV,EAAgB;AACd,eAAOD,CAAC,KAAK,IAAb;AACD;;AACD,UAAIA,CAAC,KAAKE,SAAV,EAAqB;AACnB,eAAOD,CAAC,KAAKC,SAAb;AACD;;AACD,UAAID,CAAC,KAAKC,SAAV,EAAqB;AACnB,eAAOF,CAAC,KAAKE,SAAb;AACD;;AACD,aAAOhB,WAAW,CAACc,CAAD,EAAIC,CAAJ,CAAlB;AACD;AAhBgB,GAAP,CAAZ;AAkBD,CAvBqC,CAA/B","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'equal';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\r\nexport var createEqual = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo07xSSf = createMatAlgo07xSSf({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Test whether two values are equal.\r\n   *\r\n   * The function tests whether the relative difference between x and y is\r\n   * smaller than the configured epsilon. The function cannot be used to\r\n   * compare values smaller than approximately 2.22e-16.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.\r\n   *\r\n   * Values `null` and `undefined` are compared strictly, thus `null` is only\r\n   * equal to `null` and nothing else, and `undefined` is only equal to\r\n   * `undefined` and nothing else. Strings are compared by their numerical value.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.equal(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.equal(2 + 2, 3)         // returns false\r\n   *    math.equal(2 + 2, 4)         // returns true\r\n   *\r\n   *    const a = math.unit('50 cm')\r\n   *    const b = math.unit('5 m')\r\n   *    math.equal(a, b)             // returns true\r\n   *\r\n   *    const c = [2, 5, 1]\r\n   *    const d = [2, 7, 1]\r\n   *\r\n   *    math.equal(c, d)             // returns [true, false, true]\r\n   *    math.deepEqual(c, d)         // returns false\r\n   *\r\n   *    math.equal(\"1000\", \"1e3\")    // returns true\r\n   *    math.equal(0, null)          // returns false\r\n   *\r\n   * See also:\r\n   *\r\n   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual, equalText\r\n   *\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare\r\n   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare\r\n   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false\r\n   */\r\n  return typed(name, createEqualNumber({\r\n    typed,\r\n    equalScalar\r\n  }), matrixAlgorithmSuite({\r\n    elop: equalScalar,\r\n    SS: matAlgo07xSSf,\r\n    DS: matAlgo03xDSf,\r\n    Ss: matAlgo12xSfs\r\n  }));\r\n});\r\nexport var createEqualNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\r\n  var {\r\n    typed,\r\n    equalScalar\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'any, any': function anyAny(x, y) {\r\n      // strict equality for null and undefined?\r\n      if (x === null) {\r\n        return y === null;\r\n      }\r\n      if (y === null) {\r\n        return x === null;\r\n      }\r\n      if (x === undefined) {\r\n        return y === undefined;\r\n      }\r\n      if (y === undefined) {\r\n        return x === undefined;\r\n      }\r\n      return equalScalar(x, y);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}