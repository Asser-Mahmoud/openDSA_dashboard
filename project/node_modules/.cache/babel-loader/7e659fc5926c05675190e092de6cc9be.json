{"ast":null,"code":"import { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\n/**\r\n * Represents a simple `transparency`.\r\n * @private\r\n */\n\nvar PdfTransparency =\n/** @class */\nfunction () {\n  // Properties\n  // /**\n  //  * Gets the `stroke` operation alpha value.\n  //  * @private\n  //  */\n  // public get stroke() : number {\n  //     let result : number = this.getNumber(this.dictionaryProperties.CA);\n  //     return result;\n  // }\n  // /**\n  //  * Gets the `fill` operation alpha value.\n  //  * @private\n  //  */\n  // public get fill() : number {\n  //     let result : number = this.getNumber(this.dictionaryProperties.ca);\n  //     return result;\n  // }\n  // /**\n  //  * Gets the `blend mode`.\n  //  * @private\n  //  */\n  // public get mode() : PdfBlendMode {\n  //     let result : string = this.getName(this.dictionaryProperties.ca);\n  //     return PdfBlendMode.Normal;\n  // }\n  // Constructors\n\n  /**\r\n   * Initializes a new instance of the `Transparency` class.\r\n   * @private\r\n   */\n  function PdfTransparency(stroke, fill, mode) {\n    // Fields\n\n    /**\r\n     * Internal variable to store `dictionary`.\r\n     * @default new PdfDictionary()\r\n     * @private\r\n     */\n    this.dictionary = new PdfDictionary();\n    /**\r\n     * Internal variable for accessing fields from `DictionryProperties` class.\r\n     * @default new DictionaryProperties()\r\n     * @private\r\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\n    this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\n    this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\n  }\n\n  Object.defineProperty(PdfTransparency.prototype, \"element\", {\n    // // Implementation\n    // /**\n    //  * Gets the `number value`.\n    //  * @private\n    //  */\n    // private getNumber(keyName : string) : number {\n    //     let result : number = 0.0;\n    //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\n    //     result = numb.intValue;\n    //     return result;\n    // }\n    // /**\n    //  * Gets the `name value`.\n    //  * @private\n    //  */\n    // private getName(keyName : string) : string {\n    //     let result : string = null;\n    //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\n    //     result = name.value;\n    //     return result;\n    // }\n    // IPdfWrapper Members\n\n    /**\r\n     * Gets the `element`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.dictionary;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfTransparency;\n}();\n\nexport { PdfTransparency };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-transparency.js"],"names":["PdfDictionary","PdfNumber","PdfName","DictionaryProperties","PdfTransparency","stroke","fill","mode","dictionary","dictionaryProperties","items","setValue","CA","ca","BM","toString","Object","defineProperty","prototype","get","enumerable","configurable"],"mappings":"AAAA,SAASA,aAAT,QAA8B,gCAA9B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,oBAAT,QAAqC,6CAArC;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe;AAAG;AAAe,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;AACI,WAASA,eAAT,CAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,IAAvC,EAA6C;AACzC;;AACA;AACR;AACA;AACA;AACA;AACQ,SAAKC,UAAL,GAAkB,IAAIR,aAAJ,EAAlB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKS,oBAAL,GAA4B,IAAIN,oBAAJ,EAA5B;AACA,SAAKK,UAAL,CAAgBE,KAAhB,CAAsBC,QAAtB,CAA+B,KAAKF,oBAAL,CAA0BG,EAAzD,EAA6D,IAAIX,SAAJ,CAAcI,MAAd,CAA7D;AACA,SAAKG,UAAL,CAAgBE,KAAhB,CAAsBC,QAAtB,CAA+B,KAAKF,oBAAL,CAA0BI,EAAzD,EAA6D,IAAIZ,SAAJ,CAAcK,IAAd,CAA7D;AACA,SAAKE,UAAL,CAAgBE,KAAhB,CAAsBC,QAAtB,CAA+B,KAAKF,oBAAL,CAA0BK,EAAzD,EAA6D,IAAIZ,OAAJ,CAAYK,IAAI,CAACQ,QAAL,EAAZ,CAA7D;AACH;;AACDC,EAAAA,MAAM,CAACC,cAAP,CAAsBb,eAAe,CAACc,SAAtC,EAAiD,SAAjD,EAA4D;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACR;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKX,UAAZ;AACH,KA7BuD;AA8BxDY,IAAAA,UAAU,EAAE,IA9B4C;AA+BxDC,IAAAA,YAAY,EAAE;AA/B0C,GAA5D;AAiCA,SAAOjB,eAAP;AACH,CAnFoC,EAArC;;AAoFA,SAASA,eAAT","sourcesContent":["import { PdfDictionary } from './../primitives/pdf-dictionary';\r\nimport { PdfNumber } from './../primitives/pdf-number';\r\nimport { PdfName } from './../primitives/pdf-name';\r\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\r\n/**\r\n * Represents a simple `transparency`.\r\n * @private\r\n */\r\nvar PdfTransparency = /** @class */ (function () {\r\n    // Properties\r\n    // /**\r\n    //  * Gets the `stroke` operation alpha value.\r\n    //  * @private\r\n    //  */\r\n    // public get stroke() : number {\r\n    //     let result : number = this.getNumber(this.dictionaryProperties.CA);\r\n    //     return result;\r\n    // }\r\n    // /**\r\n    //  * Gets the `fill` operation alpha value.\r\n    //  * @private\r\n    //  */\r\n    // public get fill() : number {\r\n    //     let result : number = this.getNumber(this.dictionaryProperties.ca);\r\n    //     return result;\r\n    // }\r\n    // /**\r\n    //  * Gets the `blend mode`.\r\n    //  * @private\r\n    //  */\r\n    // public get mode() : PdfBlendMode {\r\n    //     let result : string = this.getName(this.dictionaryProperties.ca);\r\n    //     return PdfBlendMode.Normal;\r\n    // }\r\n    // Constructors\r\n    /**\r\n     * Initializes a new instance of the `Transparency` class.\r\n     * @private\r\n     */\r\n    function PdfTransparency(stroke, fill, mode) {\r\n        // Fields\r\n        /**\r\n         * Internal variable to store `dictionary`.\r\n         * @default new PdfDictionary()\r\n         * @private\r\n         */\r\n        this.dictionary = new PdfDictionary();\r\n        /**\r\n         * Internal variable for accessing fields from `DictionryProperties` class.\r\n         * @default new DictionaryProperties()\r\n         * @private\r\n         */\r\n        this.dictionaryProperties = new DictionaryProperties();\r\n        this.dictionary.items.setValue(this.dictionaryProperties.CA, new PdfNumber(stroke));\r\n        this.dictionary.items.setValue(this.dictionaryProperties.ca, new PdfNumber(fill));\r\n        this.dictionary.items.setValue(this.dictionaryProperties.BM, new PdfName(mode.toString()));\r\n    }\r\n    Object.defineProperty(PdfTransparency.prototype, \"element\", {\r\n        // // Implementation\r\n        // /**\r\n        //  * Gets the `number value`.\r\n        //  * @private\r\n        //  */\r\n        // private getNumber(keyName : string) : number {\r\n        //     let result : number = 0.0;\r\n        //     let numb : PdfNumber = this.dictionary.items.getValue(keyName) as PdfNumber;\r\n        //     result = numb.intValue;\r\n        //     return result;\r\n        // }\r\n        // /**\r\n        //  * Gets the `name value`.\r\n        //  * @private\r\n        //  */\r\n        // private getName(keyName : string) : string {\r\n        //     let result : string = null;\r\n        //     let name : PdfName = this.dictionary.items.getValue(keyName) as PdfName;\r\n        //     result = name.value;\r\n        //     return result;\r\n        // }\r\n        // IPdfWrapper Members\r\n        /**\r\n         * Gets the `element`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.dictionary;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PdfTransparency;\r\n}());\r\nexport { PdfTransparency };\r\n"]},"metadata":{},"sourceType":"module"}