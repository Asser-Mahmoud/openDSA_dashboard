{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ParenthesisNode';\nvar dependencies = ['Node'];\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ParenthesisNode extends Node {\n    /**\r\n     * @constructor ParenthesisNode\r\n     * @extends {Node}\r\n     * A parenthesis node describes manual parenthesis from the user input\r\n     * @param {Node} content\r\n     * @extends {Node}\r\n     */\n    constructor(content) {\n      super(); // validate input\n\n      if (!isNode(content)) {\n        throw new TypeError('Node expected for parameter \"content\"');\n      }\n\n      this.content = content;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isParenthesisNode() {\n      return true;\n    }\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\n\n\n    _compile(math, argNames) {\n      return this.content._compile(math, argNames);\n    }\n    /**\r\n     * Get the content of the current Node.\r\n     * @return {Node} content\r\n     * @override\r\n     **/\n\n\n    getContent() {\n      return this.content.getContent();\n    }\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\n\n\n    forEach(callback) {\n      callback(this.content, 'content', this);\n    }\n    /**\r\n     * Create a new ParenthesisNode whose child is the result of calling\r\n     * the provided callback function on the child of this node.\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {ParenthesisNode} Returns a clone of the node\r\n     */\n\n\n    map(callback) {\n      var content = callback(this.content, 'content', this);\n      return new ParenthesisNode(content);\n    }\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {ParenthesisNode}\r\n     */\n\n\n    clone() {\n      return new ParenthesisNode(this.content);\n    }\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n\n\n    _toString(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '(' + this.content.toString(options) + ')';\n      }\n\n      return this.content.toString(options);\n    }\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        content: this.content\n      };\n    }\n    /**\r\n     * Instantiate an ParenthesisNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\r\n     *                       where mathjs is optional\r\n     * @returns {ParenthesisNode}\r\n     */\n\n\n    static fromJSON(json) {\n      return new ParenthesisNode(json.content);\n    }\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n\n\n    toHTML(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return this.content.toHTML(options);\n    }\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\n\n\n    _toTex(options) {\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\n      }\n\n      return this.content.toTex(options);\n    }\n\n  }\n\n  _defineProperty(ParenthesisNode, \"name\", name);\n\n  return ParenthesisNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/expression/node/ParenthesisNode.js"],"names":["_defineProperty","isNode","factory","name","dependencies","createParenthesisNode","_ref","Node","ParenthesisNode","constructor","content","TypeError","type","isParenthesisNode","_compile","math","argNames","getContent","forEach","callback","map","clone","_toString","options","parenthesis","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","concat","toTex","isClass"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\r\nimport { isNode } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'ParenthesisNode';\r\nvar dependencies = ['Node'];\r\nexport var createParenthesisNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    Node\r\n  } = _ref;\r\n  class ParenthesisNode extends Node {\r\n    /**\r\n     * @constructor ParenthesisNode\r\n     * @extends {Node}\r\n     * A parenthesis node describes manual parenthesis from the user input\r\n     * @param {Node} content\r\n     * @extends {Node}\r\n     */\r\n    constructor(content) {\r\n      super();\r\n      // validate input\r\n      if (!isNode(content)) {\r\n        throw new TypeError('Node expected for parameter \"content\"');\r\n      }\r\n      this.content = content;\r\n    }\r\n    get type() {\r\n      return name;\r\n    }\r\n    get isParenthesisNode() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\r\n    _compile(math, argNames) {\r\n      return this.content._compile(math, argNames);\r\n    }\r\n\r\n    /**\r\n     * Get the content of the current Node.\r\n     * @return {Node} content\r\n     * @override\r\n     **/\r\n    getContent() {\r\n      return this.content.getContent();\r\n    }\r\n\r\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\r\n    forEach(callback) {\r\n      callback(this.content, 'content', this);\r\n    }\r\n\r\n    /**\r\n     * Create a new ParenthesisNode whose child is the result of calling\r\n     * the provided callback function on the child of this node.\r\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\r\n     * @returns {ParenthesisNode} Returns a clone of the node\r\n     */\r\n    map(callback) {\r\n      var content = callback(this.content, 'content', this);\r\n      return new ParenthesisNode(content);\r\n    }\r\n\r\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {ParenthesisNode}\r\n     */\r\n    clone() {\r\n      return new ParenthesisNode(this.content);\r\n    }\r\n\r\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toString(options) {\r\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\r\n        return '(' + this.content.toString(options) + ')';\r\n      }\r\n      return this.content.toString(options);\r\n    }\r\n\r\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n      return {\r\n        mathjs: name,\r\n        content: this.content\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Instantiate an ParenthesisNode from its JSON representation\r\n     * @param {Object} json  An object structured like\r\n     *                       `{\"mathjs\": \"ParenthesisNode\", \"content\": ...}`,\r\n     *                       where mathjs is optional\r\n     * @returns {ParenthesisNode}\r\n     */\r\n    static fromJSON(json) {\r\n      return new ParenthesisNode(json.content);\r\n    }\r\n\r\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    toHTML(options) {\r\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\r\n        return '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + this.content.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\r\n      }\r\n      return this.content.toHTML(options);\r\n    }\r\n\r\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string} str\r\n     * @override\r\n     */\r\n    _toTex(options) {\r\n      if (!options || options && !options.parenthesis || options && options.parenthesis === 'keep') {\r\n        return \"\\\\left(\".concat(this.content.toTex(options), \"\\\\right)\");\r\n      }\r\n      return this.content.toTex(options);\r\n    }\r\n  }\r\n  _defineProperty(ParenthesisNode, \"name\", name);\r\n  return ParenthesisNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"]},"metadata":{},"sourceType":"module"}