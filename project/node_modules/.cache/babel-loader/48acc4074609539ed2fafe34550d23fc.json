{"ast":null,"code":"/**\r\n * @license Fraction.js v4.2.0 05/03/2022\r\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\r\n *\r\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\r\n * Dual licensed under the MIT or GPL Version 2 licenses.\r\n **/\n\n/**\r\n *\r\n * This class offers the possibility to calculate fractions.\r\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\r\n *\r\n * Array/Object form\r\n * [ 0 => <nominator>, 1 => <denominator> ]\r\n * [ n => <nominator>, d => <denominator> ]\r\n *\r\n * Integer form\r\n * - Single integer value\r\n *\r\n * Double form\r\n * - Single double value\r\n *\r\n * String form\r\n * 123.456 - a simple double\r\n * 123/456 - a string fraction\r\n * 123.'456' - a double with repeating decimal places\r\n * 123.(456) - synonym\r\n * 123.45'6' - a double with repeating last place\r\n * 123.45(6) - synonym\r\n *\r\n * Example:\r\n *\r\n * var f = new Fraction(\"9.4'31'\");\r\n * f.mul([-4, 3]).div(4.9);\r\n *\r\n */\n(function (root) {\n  \"use strict\"; // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\n\n  var MAX_CYCLE_LEN = 2000; // Parsed data to avoid calling \"new\" all the time\n\n  var P = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1\n  };\n\n  function assign(n, s) {\n    if (isNaN(n = parseInt(n, 10))) {\n      throw Fraction['InvalidParameter'];\n    }\n\n    return n * s;\n  } // Creates a new Fraction internally without the need of the bulky constructor\n\n\n  function newFraction(n, d) {\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    var f = Object.create(Fraction.prototype);\n    f[\"s\"] = n < 0 ? -1 : 1;\n    n = n < 0 ? -n : n;\n    var a = gcd(n, d);\n    f[\"n\"] = n / a;\n    f[\"d\"] = d / a;\n    return f;\n  }\n\n  function factorize(num) {\n    var factors = {};\n    var n = num;\n    var i = 2;\n    var s = 4;\n\n    while (s <= n) {\n      while (n % i === 0) {\n        n /= i;\n        factors[i] = (factors[i] || 0) + 1;\n      }\n\n      s += 1 + 2 * i++;\n    }\n\n    if (n !== num) {\n      if (n > 1) factors[n] = (factors[n] || 0) + 1;\n    } else {\n      factors[num] = (factors[num] || 0) + 1;\n    }\n\n    return factors;\n  }\n\n  var parse = function (p1, p2) {\n    var n = 0,\n        d = 1,\n        s = 1;\n    var v = 0,\n        w = 0,\n        x = 0,\n        y = 1,\n        z = 1;\n    var A = 0,\n        B = 1;\n    var C = 1,\n        D = 1;\n    var N = 10000000;\n    var M;\n\n    if (p1 === undefined || p1 === null) {\n      /* void */\n    } else if (p2 !== undefined) {\n      n = p1;\n      d = p2;\n      s = n * d;\n\n      if (n % 1 !== 0 || d % 1 !== 0) {\n        throw Fraction['NonIntegerParameter'];\n      }\n    } else switch (typeof p1) {\n      case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1) n *= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1) d = p1[1];\n          } else {\n            throw Fraction['InvalidParameter'];\n          }\n\n          s = n * d;\n          break;\n        }\n\n      case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) {\n            // check for != 0, scale would become NaN (log(0)), which converges really slow\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1 /= z;\n            } // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n\n                break;\n              } else {\n                if (p1 > M) {\n                  A += C;\n                  B += D;\n                } else {\n                  C += A;\n                  D += B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n\n            n *= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n\n          break;\n        }\n\n      case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n          if (B === null) throw Fraction['InvalidParameter'];\n\n          if (B[A] === '-') {\n            // Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {\n            // Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) {\n            // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') {\n            // Check if it's a decimal number\n            if (B[A] !== '.') {\n              // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n\n            A++; // Check for decimal places\n\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            } // Check for repeating places\n\n\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A += 3;\n            }\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') {\n            // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A += 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') {\n            // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A += 5;\n          }\n\n          if (B.length <= A) {\n            // Check for more tokens on the stack\n            d = y * z;\n            s =\n            /* void */\n            n = x + d * v + z * w;\n            break;\n          }\n          /* Fall through on error */\n\n        }\n\n      default:\n        throw Fraction['InvalidParameter'];\n    }\n\n    if (d === 0) {\n      throw Fraction['DivisionByZero'];\n    }\n\n    P[\"s\"] = s < 0 ? -1 : 1;\n    P[\"n\"] = Math.abs(n);\n    P[\"d\"] = Math.abs(d);\n  };\n\n  function modpow(b, e, m) {\n    var r = 1;\n\n    for (; e > 0; b = b * b % m, e >>= 1) {\n      if (e & 1) {\n        r = r * b % m;\n      }\n    }\n\n    return r;\n  }\n\n  function cycleLen(n, d) {\n    for (; d % 2 === 0; d /= 2) {}\n\n    for (; d % 5 === 0; d /= 5) {}\n\n    if (d === 1) // Catch non-cyclic numbers\n      return 0; // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n    // 10^(d-1) % d == 1\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n    // as we want to translate the numbers to strings.\n\n    var rem = 10 % d;\n    var t = 1;\n\n    for (; rem !== 1; t++) {\n      rem = rem * 10 % d;\n      if (t > MAX_CYCLE_LEN) return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n    }\n\n    return t;\n  }\n\n  function cycleStart(n, d, len) {\n    var rem1 = 1;\n    var rem2 = modpow(10, len, d);\n\n    for (var t = 0; t < 300; t++) {\n      // s < ~log10(Number.MAX_VALUE)\n      // Solve 10^s == 10^(s+t) (mod d)\n      if (rem1 === rem2) return t;\n      rem1 = rem1 * 10 % d;\n      rem2 = rem2 * 10 % d;\n    }\n\n    return 0;\n  }\n\n  function gcd(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n\n    while (1) {\n      a %= b;\n      if (!a) return b;\n      b %= a;\n      if (!b) return a;\n    }\n  }\n\n  ;\n  /**\r\n   * Module constructor\r\n   *\r\n   * @constructor\r\n   * @param {number|Fraction=} a\r\n   * @param {number=} b\r\n   */\n\n  function Fraction(a, b) {\n    parse(a, b);\n\n    if (this instanceof Fraction) {\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n\n      this[\"s\"] = P[\"s\"];\n      this[\"n\"] = P[\"n\"] / a;\n      this[\"d\"] = P[\"d\"] / a;\n    } else {\n      return newFraction(P['s'] * P['n'], P['d']);\n    }\n  }\n\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\n  Fraction.prototype = {\n    \"s\": 1,\n    \"n\": 0,\n    \"d\": 1,\n\n    /**\r\n     * Calculates the absolute value\r\n     *\r\n     * Ex: new Fraction(-4).abs() => 4\r\n     **/\n    \"abs\": function () {\n      return newFraction(this[\"n\"], this[\"d\"]);\n    },\n\n    /**\r\n     * Inverts the sign of the current fraction\r\n     *\r\n     * Ex: new Fraction(-4).neg() => 4\r\n     **/\n    \"neg\": function () {\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n    },\n\n    /**\r\n     * Adds two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\r\n     **/\n    \"add\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\r\n     * Subtracts two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\r\n     **/\n    \"sub\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\r\n     * Multiplies two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\r\n     **/\n    \"mul\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"], this[\"d\"] * P[\"d\"]);\n    },\n\n    /**\r\n     * Divides two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\r\n     **/\n    \"div\": function (a, b) {\n      parse(a, b);\n      return newFraction(this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"], this[\"d\"] * P[\"n\"]);\n    },\n\n    /**\r\n     * Clones the actual object\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").clone()\r\n     **/\n    \"clone\": function () {\n      return newFraction(this['s'] * this['n'], this['d']);\n    },\n\n    /**\r\n     * Calculates the modulo of two rational numbers - a more precise fmod\r\n     *\r\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\r\n     **/\n    \"mod\": function (a, b) {\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return new Fraction(NaN);\n      }\n\n      if (a === undefined) {\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n      }\n\n      parse(a, b);\n\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n        throw Fraction['DivisionByZero'];\n      }\n      /*\r\n       * First silly attempt, kinda slow\r\n       *\r\n       return that[\"sub\"]({\r\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\r\n       \"d\": num[\"d\"],\r\n       \"s\": this[\"s\"]\r\n       });*/\n\n      /*\r\n       * New attempt: a1 / b1 = a2 / b2 * q + r\r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\r\n       */\n\n\n      return newFraction(this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\r\n     * Calculates the fractional gcd of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\r\n     */\n    \"gcd\": function (a, b) {\n      parse(a, b); // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n    },\n\n    /**\r\n     * Calculates the fractional lcm of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\r\n     */\n    \"lcm\": function (a, b) {\n      parse(a, b); // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n        return newFraction(0, 1);\n      }\n\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n    },\n\n    /**\r\n     * Calculates the ceil of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\r\n     **/\n    \"ceil\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\r\n     * Calculates the floor of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\r\n     **/\n    \"floor\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\r\n     * Rounds a rational numbers\r\n     *\r\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\r\n     **/\n    \"round\": function (places) {\n      places = Math.pow(10, places || 0);\n\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n        return new Fraction(NaN);\n      }\n\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n    },\n\n    /**\r\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\r\n     *\r\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\r\n     **/\n    \"inverse\": function () {\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n    },\n\n    /**\r\n     * Calculates the fraction to some rational exponent, if possible\r\n     *\r\n     * Ex: new Fraction(-1,2).pow(-3) => -8\r\n     */\n    \"pow\": function (a, b) {\n      parse(a, b); // Trivial case when exp is an integer\n\n      if (P['d'] === 1) {\n        if (P['s'] < 0) {\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n        } else {\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n        }\n      } // Negative roots become complex\n      //     (-a/b)^(c/d) = x\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n\n\n      if (this['s'] < 0) return null; // Now prime factor n and d\n\n      var N = factorize(this['n']);\n      var D = factorize(this['d']); // Exponentiate and take root for n and d individually\n\n      var n = 1;\n      var d = 1;\n\n      for (var k in N) {\n        if (k === '1') continue;\n\n        if (k === '0') {\n          n = 0;\n          break;\n        }\n\n        N[k] *= P['n'];\n\n        if (N[k] % P['d'] === 0) {\n          N[k] /= P['d'];\n        } else return null;\n\n        n *= Math.pow(k, N[k]);\n      }\n\n      for (var k in D) {\n        if (k === '1') continue;\n        D[k] *= P['n'];\n\n        if (D[k] % P['d'] === 0) {\n          D[k] /= P['d'];\n        } else return null;\n\n        d *= Math.pow(k, D[k]);\n      }\n\n      if (P['s'] < 0) {\n        return newFraction(d, n);\n      }\n\n      return newFraction(n, d);\n    },\n\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\n    \"equals\": function (a, b) {\n      parse(a, b);\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n    },\n\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\n    \"compare\": function (a, b) {\n      parse(a, b);\n      var t = this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"];\n      return (0 < t) - (t < 0);\n    },\n    \"simplify\": function (eps) {\n      if (isNaN(this['n']) || isNaN(this['d'])) {\n        return this;\n      }\n\n      eps = eps || 0.001;\n      var thisABS = this['abs']();\n      var cont = thisABS['toContinued']();\n\n      for (var i = 1; i < cont.length; i++) {\n        var s = newFraction(cont[i - 1], 1);\n\n        for (var k = i - 2; k >= 0; k--) {\n          s = s['inverse']()['add'](cont[k]);\n        }\n\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\n          return s['mul'](this['s']);\n        }\n      }\n\n      return this;\n    },\n\n    /**\r\n     * Check if two rational numbers are divisible\r\n     *\r\n     * Ex: new Fraction(19.6).divisible(1.5);\r\n     */\n    \"divisible\": function (a, b) {\n      parse(a, b);\n      return !(!(P[\"n\"] * this[\"d\"]) || this[\"n\"] * P[\"d\"] % (P[\"n\"] * this[\"d\"]));\n    },\n\n    /**\r\n     * Returns a decimal representation of the fraction\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\r\n     **/\n    'valueOf': function () {\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\n    },\n\n    /**\r\n     * Returns a string-fraction representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\r\n     **/\n    'toFraction': function (excludeWhole) {\n      var whole,\n          str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          str += \" \";\n          n %= d;\n        }\n\n        str += n;\n        str += '/';\n        str += d;\n      }\n\n      return str;\n    },\n\n    /**\r\n     * Returns a latex representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\r\n     **/\n    'toLatex': function (excludeWhole) {\n      var whole,\n          str = \"\";\n      var n = this[\"n\"];\n      var d = this[\"d\"];\n\n      if (this[\"s\"] < 0) {\n        str += '-';\n      }\n\n      if (d === 1) {\n        str += n;\n      } else {\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n          str += whole;\n          n %= d;\n        }\n\n        str += \"\\\\frac{\";\n        str += n;\n        str += '}{';\n        str += d;\n        str += '}';\n      }\n\n      return str;\n    },\n\n    /**\r\n     * Returns an array of continued fraction elements\r\n     *\r\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\r\n     */\n    'toContinued': function () {\n      var t;\n      var a = this['n'];\n      var b = this['d'];\n      var res = [];\n\n      if (isNaN(a) || isNaN(b)) {\n        return res;\n      }\n\n      do {\n        res.push(Math.floor(a / b));\n        t = a % b;\n        a = b;\n        b = t;\n      } while (a !== 1);\n\n      return res;\n    },\n\n    /**\r\n     * Creates a string representation of a fraction with all digits\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\r\n     **/\n    'toString': function (dec) {\n      var N = this[\"n\"];\n      var D = this[\"d\"];\n\n      if (isNaN(N) || isNaN(D)) {\n        return \"NaN\";\n      }\n\n      dec = dec || 15; // 15 = decimal places when no repetation\n\n      var cycLen = cycleLen(N, D); // Cycle length\n\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n      var str = this['s'] < 0 ? \"-\" : \"\";\n      str += N / D | 0;\n      N %= D;\n      N *= 10;\n      if (N) str += \".\";\n\n      if (cycLen) {\n        for (var i = cycOff; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n\n        str += \"(\";\n\n        for (var i = cycLen; i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n\n        str += \")\";\n      } else {\n        for (var i = dec; N && i--;) {\n          str += N / D | 0;\n          N %= D;\n          N *= 10;\n        }\n      }\n\n      return str;\n    }\n  };\n\n  if (typeof define === \"function\" && define[\"amd\"]) {\n    define([], function () {\n      return Fraction;\n    });\n  } else if (typeof exports === \"object\") {\n    Object.defineProperty(Fraction, \"__esModule\", {\n      'value': true\n    });\n    Fraction['default'] = Fraction;\n    Fraction['Fraction'] = Fraction;\n    module['exports'] = Fraction;\n  } else {\n    root['Fraction'] = Fraction;\n  }\n})(this);","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/fraction.js/fraction.js"],"names":["root","MAX_CYCLE_LEN","P","assign","n","s","isNaN","parseInt","Fraction","newFraction","d","f","Object","create","prototype","a","gcd","factorize","num","factors","i","parse","p1","p2","v","w","x","y","z","A","B","C","D","N","M","undefined","Math","pow","floor","log","LN10","NaN","match","length","abs","modpow","b","e","m","r","cycleLen","rem","t","cycleStart","len","rem1","rem2","Error","places","ceil","round","k","eps","thisABS","cont","valueOf","excludeWhole","whole","str","res","push","dec","cycLen","cycOff","define","exports","defineProperty","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,CAAC,UAASA,IAAT,EAAe;AAEd,eAFc,CAId;AACA;AACA;;AACA,MAAIC,aAAa,GAAG,IAApB,CAPc,CASd;;AACA,MAAIC,CAAC,GAAG;AACN,SAAK,CADC;AAEN,SAAK,CAFC;AAGN,SAAK;AAHC,GAAR;;AAMA,WAASC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAEpB,QAAIC,KAAK,CAACF,CAAC,GAAGG,QAAQ,CAACH,CAAD,EAAI,EAAJ,CAAb,CAAT,EAAgC;AAC9B,YAAMI,QAAQ,CAAC,kBAAD,CAAd;AACD;;AACD,WAAOJ,CAAC,GAAGC,CAAX;AACD,GAtBa,CAwBd;;;AACA,WAASI,WAAT,CAAqBL,CAArB,EAAwBM,CAAxB,EAA2B;AAEzB,QAAIA,CAAC,KAAK,CAAV,EAAa;AACX,YAAMF,QAAQ,CAAC,gBAAD,CAAd;AACD;;AAED,QAAIG,CAAC,GAAGC,MAAM,CAACC,MAAP,CAAcL,QAAQ,CAACM,SAAvB,CAAR;AACAH,IAAAA,CAAC,CAAC,GAAD,CAAD,GAASP,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAtB;AAEAA,IAAAA,CAAC,GAAGA,CAAC,GAAG,CAAJ,GAAQ,CAACA,CAAT,GAAaA,CAAjB;AAEA,QAAIW,CAAC,GAAGC,GAAG,CAACZ,CAAD,EAAIM,CAAJ,CAAX;AAEAC,IAAAA,CAAC,CAAC,GAAD,CAAD,GAASP,CAAC,GAAGW,CAAb;AACAJ,IAAAA,CAAC,CAAC,GAAD,CAAD,GAASD,CAAC,GAAGK,CAAb;AACA,WAAOJ,CAAP;AACD;;AAED,WAASM,SAAT,CAAmBC,GAAnB,EAAwB;AAEtB,QAAIC,OAAO,GAAG,EAAd;AAEA,QAAIf,CAAC,GAAGc,GAAR;AACA,QAAIE,CAAC,GAAG,CAAR;AACA,QAAIf,CAAC,GAAG,CAAR;;AAEA,WAAOA,CAAC,IAAID,CAAZ,EAAe;AAEb,aAAOA,CAAC,GAAGgB,CAAJ,KAAU,CAAjB,EAAoB;AAClBhB,QAAAA,CAAC,IAAGgB,CAAJ;AACAD,QAAAA,OAAO,CAACC,CAAD,CAAP,GAAa,CAACD,OAAO,CAACC,CAAD,CAAP,IAAc,CAAf,IAAoB,CAAjC;AACD;;AACDf,MAAAA,CAAC,IAAG,IAAI,IAAIe,CAAC,EAAb;AACD;;AAED,QAAIhB,CAAC,KAAKc,GAAV,EAAe;AACb,UAAId,CAAC,GAAG,CAAR,EACEe,OAAO,CAACf,CAAD,CAAP,GAAa,CAACe,OAAO,CAACf,CAAD,CAAP,IAAc,CAAf,IAAoB,CAAjC;AACH,KAHD,MAGO;AACLe,MAAAA,OAAO,CAACD,GAAD,CAAP,GAAe,CAACC,OAAO,CAACD,GAAD,CAAP,IAAgB,CAAjB,IAAsB,CAArC;AACD;;AACD,WAAOC,OAAP;AACD;;AAED,MAAIE,KAAK,GAAG,UAASC,EAAT,EAAaC,EAAb,EAAiB;AAE3B,QAAInB,CAAC,GAAG,CAAR;AAAA,QAAWM,CAAC,GAAG,CAAf;AAAA,QAAkBL,CAAC,GAAG,CAAtB;AACA,QAAImB,CAAC,GAAG,CAAR;AAAA,QAAWC,CAAC,GAAG,CAAf;AAAA,QAAkBC,CAAC,GAAG,CAAtB;AAAA,QAAyBC,CAAC,GAAG,CAA7B;AAAA,QAAgCC,CAAC,GAAG,CAApC;AAEA,QAAIC,CAAC,GAAG,CAAR;AAAA,QAAWC,CAAC,GAAG,CAAf;AACA,QAAIC,CAAC,GAAG,CAAR;AAAA,QAAWC,CAAC,GAAG,CAAf;AAEA,QAAIC,CAAC,GAAG,QAAR;AACA,QAAIC,CAAJ;;AAEA,QAAIZ,EAAE,KAAKa,SAAP,IAAoBb,EAAE,KAAK,IAA/B,EAAqC;AACnC;AACD,KAFD,MAEO,IAAIC,EAAE,KAAKY,SAAX,EAAsB;AAC3B/B,MAAAA,CAAC,GAAGkB,EAAJ;AACAZ,MAAAA,CAAC,GAAGa,EAAJ;AACAlB,MAAAA,CAAC,GAAGD,CAAC,GAAGM,CAAR;;AAEA,UAAIN,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeM,CAAC,GAAG,CAAJ,KAAU,CAA7B,EAAgC;AAC9B,cAAMF,QAAQ,CAAC,qBAAD,CAAd;AACD;AAEF,KATM,MAUL,QAAQ,OAAOc,EAAf;AAEE,WAAK,QAAL;AACE;AACE,cAAI,OAAOA,EAAP,IAAa,OAAOA,EAAxB,EAA4B;AAC1BlB,YAAAA,CAAC,GAAGkB,EAAE,CAAC,GAAD,CAAN;AACAZ,YAAAA,CAAC,GAAGY,EAAE,CAAC,GAAD,CAAN;AACA,gBAAI,OAAOA,EAAX,EACElB,CAAC,IAAGkB,EAAE,CAAC,GAAD,CAAN;AACH,WALD,MAKO,IAAI,KAAKA,EAAT,EAAa;AAClBlB,YAAAA,CAAC,GAAGkB,EAAE,CAAC,CAAD,CAAN;AACA,gBAAI,KAAKA,EAAT,EACEZ,CAAC,GAAGY,EAAE,CAAC,CAAD,CAAN;AACH,WAJM,MAIA;AACL,kBAAMd,QAAQ,CAAC,kBAAD,CAAd;AACD;;AACDH,UAAAA,CAAC,GAAGD,CAAC,GAAGM,CAAR;AACA;AACD;;AACH,WAAK,QAAL;AACE;AACE,cAAIY,EAAE,GAAG,CAAT,EAAY;AACVjB,YAAAA,CAAC,GAAGiB,EAAJ;AACAA,YAAAA,EAAE,GAAG,CAACA,EAAN;AACD;;AAED,cAAIA,EAAE,GAAG,CAAL,KAAW,CAAf,EAAkB;AAChBlB,YAAAA,CAAC,GAAGkB,EAAJ;AACD,WAFD,MAEO,IAAIA,EAAE,GAAG,CAAT,EAAY;AAAE;AAEnB,gBAAIA,EAAE,IAAI,CAAV,EAAa;AACXM,cAAAA,CAAC,GAAGQ,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaD,IAAI,CAACE,KAAL,CAAW,IAAIF,IAAI,CAACG,GAAL,CAASjB,EAAT,IAAec,IAAI,CAACI,IAAnC,CAAb,CAAJ;AACAlB,cAAAA,EAAE,IAAGM,CAAL;AACD,aALgB,CAOjB;AACA;;;AAEA,mBAAOE,CAAC,IAAIG,CAAL,IAAUD,CAAC,IAAIC,CAAtB,EAAyB;AACvBC,cAAAA,CAAC,GAAG,CAACL,CAAC,GAAGE,CAAL,KAAWD,CAAC,GAAGE,CAAf,CAAJ;;AAEA,kBAAIV,EAAE,KAAKY,CAAX,EAAc;AACZ,oBAAIJ,CAAC,GAAGE,CAAJ,IAASC,CAAb,EAAgB;AACd7B,kBAAAA,CAAC,GAAGyB,CAAC,GAAGE,CAAR;AACArB,kBAAAA,CAAC,GAAGoB,CAAC,GAAGE,CAAR;AACD,iBAHD,MAGO,IAAIA,CAAC,GAAGF,CAAR,EAAW;AAChB1B,kBAAAA,CAAC,GAAG2B,CAAJ;AACArB,kBAAAA,CAAC,GAAGsB,CAAJ;AACD,iBAHM,MAGA;AACL5B,kBAAAA,CAAC,GAAGyB,CAAJ;AACAnB,kBAAAA,CAAC,GAAGoB,CAAJ;AACD;;AACD;AAED,eAbD,MAaO;AAEL,oBAAIR,EAAE,GAAGY,CAAT,EAAY;AACVL,kBAAAA,CAAC,IAAGE,CAAJ;AACAD,kBAAAA,CAAC,IAAGE,CAAJ;AACD,iBAHD,MAGO;AACLD,kBAAAA,CAAC,IAAGF,CAAJ;AACAG,kBAAAA,CAAC,IAAGF,CAAJ;AACD;;AAED,oBAAIA,CAAC,GAAGG,CAAR,EAAW;AACT7B,kBAAAA,CAAC,GAAG2B,CAAJ;AACArB,kBAAAA,CAAC,GAAGsB,CAAJ;AACD,iBAHD,MAGO;AACL5B,kBAAAA,CAAC,GAAGyB,CAAJ;AACAnB,kBAAAA,CAAC,GAAGoB,CAAJ;AACD;AACF;AACF;;AACD1B,YAAAA,CAAC,IAAGwB,CAAJ;AACD,WA9CM,MA8CA,IAAItB,KAAK,CAACgB,EAAD,CAAL,IAAahB,KAAK,CAACiB,EAAD,CAAtB,EAA4B;AACjCb,YAAAA,CAAC,GAAGN,CAAC,GAAGqC,GAAR;AACD;;AACD;AACD;;AACH,WAAK,QAAL;AACE;AACEX,UAAAA,CAAC,GAAGR,EAAE,CAACoB,KAAH,CAAS,QAAT,CAAJ;AAEA,cAAIZ,CAAC,KAAK,IAAV,EACE,MAAMtB,QAAQ,CAAC,kBAAD,CAAd;;AAEF,cAAIsB,CAAC,CAACD,CAAD,CAAD,KAAS,GAAb,EAAkB;AAAC;AACjBxB,YAAAA,CAAC,GAAG,CAAC,CAAL;AACAwB,YAAAA,CAAC;AACF,WAHD,MAGO,IAAIC,CAAC,CAACD,CAAD,CAAD,KAAS,GAAb,EAAkB;AAAC;AACxBA,YAAAA,CAAC;AACF;;AAED,cAAIC,CAAC,CAACa,MAAF,KAAad,CAAC,GAAG,CAArB,EAAwB;AAAE;AACxBJ,YAAAA,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAC,EAAF,CAAF,EAASxB,CAAT,CAAV;AACD,WAFD,MAEO,IAAIyB,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAb,IAAoBC,CAAC,CAACD,CAAD,CAAD,KAAS,GAAjC,EAAsC;AAAE;AAE7C,gBAAIC,CAAC,CAACD,CAAD,CAAD,KAAS,GAAb,EAAkB;AAAE;AAClBL,cAAAA,CAAC,GAAGrB,MAAM,CAAC2B,CAAC,CAACD,CAAC,EAAF,CAAF,EAASxB,CAAT,CAAV;AACD;;AACDwB,YAAAA,CAAC,GAL0C,CAO3C;;AACA,gBAAIA,CAAC,GAAG,CAAJ,KAAUC,CAAC,CAACa,MAAZ,IAAsBb,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAb,IAAoBC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAvD,IAA8DC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAb,IAAoBC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAnG,EAAwG;AACtGJ,cAAAA,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAD,CAAF,EAAOxB,CAAP,CAAV;AACAsB,cAAAA,CAAC,GAAGS,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaP,CAAC,CAACD,CAAD,CAAD,CAAKc,MAAlB,CAAJ;AACAd,cAAAA,CAAC;AACF,aAZ0C,CAc3C;;;AACA,gBAAIC,CAAC,CAACD,CAAD,CAAD,KAAS,GAAT,IAAgBC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAA7B,IAAoCC,CAAC,CAACD,CAAD,CAAD,KAAS,GAAT,IAAgBC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAArE,EAA0E;AACxEH,cAAAA,CAAC,GAAGvB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAL,CAAF,EAAWxB,CAAX,CAAV;AACAuB,cAAAA,CAAC,GAAGQ,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaP,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,CAASc,MAAtB,IAAgC,CAApC;AACAd,cAAAA,CAAC,IAAG,CAAJ;AACD;AAEF,WArBM,MAqBA,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAb,IAAoBC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAArC,EAA0C;AAAE;AACjDJ,YAAAA,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAD,CAAF,EAAOxB,CAAP,CAAV;AACAsB,YAAAA,CAAC,GAAGxB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAL,CAAF,EAAW,CAAX,CAAV;AACAA,YAAAA,CAAC,IAAG,CAAJ;AACD,WAJM,MAIA,IAAIC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAAb,IAAoBC,CAAC,CAACD,CAAC,GAAG,CAAL,CAAD,KAAa,GAArC,EAA0C;AAAE;AACjDL,YAAAA,CAAC,GAAGrB,MAAM,CAAC2B,CAAC,CAACD,CAAD,CAAF,EAAOxB,CAAP,CAAV;AACAoB,YAAAA,CAAC,GAAGtB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAL,CAAF,EAAWxB,CAAX,CAAV;AACAsB,YAAAA,CAAC,GAAGxB,MAAM,CAAC2B,CAAC,CAACD,CAAC,GAAG,CAAL,CAAF,EAAW,CAAX,CAAV;AACAA,YAAAA,CAAC,IAAG,CAAJ;AACD;;AAED,cAAIC,CAAC,CAACa,MAAF,IAAYd,CAAhB,EAAmB;AAAE;AACnBnB,YAAAA,CAAC,GAAGiB,CAAC,GAAGC,CAAR;AACAvB,YAAAA,CAAC;AAAG;AACJD,YAAAA,CAAC,GAAGsB,CAAC,GAAGhB,CAAC,GAAGc,CAAR,GAAYI,CAAC,GAAGH,CADpB;AAEA;AACD;AAED;;AACD;;AACH;AACE,cAAMjB,QAAQ,CAAC,kBAAD,CAAd;AAzIJ;;AA4IF,QAAIE,CAAC,KAAK,CAAV,EAAa;AACX,YAAMF,QAAQ,CAAC,gBAAD,CAAd;AACD;;AAEDN,IAAAA,CAAC,CAAC,GAAD,CAAD,GAASG,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAtB;AACAH,IAAAA,CAAC,CAAC,GAAD,CAAD,GAASkC,IAAI,CAACQ,GAAL,CAASxC,CAAT,CAAT;AACAF,IAAAA,CAAC,CAAC,GAAD,CAAD,GAASkC,IAAI,CAACQ,GAAL,CAASlC,CAAT,CAAT;AACD,GA1KD;;AA4KA,WAASmC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AAEvB,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOF,CAAC,GAAG,CAAX,EAAcD,CAAC,GAAIA,CAAC,GAAGA,CAAL,GAAUE,CAAd,EAAiBD,CAAC,KAAK,CAArC,EAAwC;AAEtC,UAAIA,CAAC,GAAG,CAAR,EAAW;AACTE,QAAAA,CAAC,GAAIA,CAAC,GAAGH,CAAL,GAAUE,CAAd;AACD;AACF;;AACD,WAAOC,CAAP;AACD;;AAGD,WAASC,QAAT,CAAkB9C,CAAlB,EAAqBM,CAArB,EAAwB;AAEtB,WAAOA,CAAC,GAAG,CAAJ,KAAU,CAAjB,EACEA,CAAC,IAAG,CADN,EACS,CACR;;AAED,WAAOA,CAAC,GAAG,CAAJ,KAAU,CAAjB,EACEA,CAAC,IAAG,CADN,EACS,CACR;;AAED,QAAIA,CAAC,KAAK,CAAV,EAAa;AACX,aAAO,CAAP,CAXoB,CAatB;AACA;AACA;AACA;;AAEA,QAAIyC,GAAG,GAAG,KAAKzC,CAAf;AACA,QAAI0C,CAAC,GAAG,CAAR;;AAEA,WAAOD,GAAG,KAAK,CAAf,EAAkBC,CAAC,EAAnB,EAAuB;AACrBD,MAAAA,GAAG,GAAGA,GAAG,GAAG,EAAN,GAAWzC,CAAjB;AAEA,UAAI0C,CAAC,GAAGnD,aAAR,EACE,OAAO,CAAP,CAJmB,CAIT;AACb;;AACD,WAAOmD,CAAP;AACD;;AAGD,WAASC,UAAT,CAAoBjD,CAApB,EAAuBM,CAAvB,EAA0B4C,GAA1B,EAA+B;AAE7B,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,IAAI,GAAGX,MAAM,CAAC,EAAD,EAAKS,GAAL,EAAU5C,CAAV,CAAjB;;AAEA,SAAK,IAAI0C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAAE;AAC9B;AAEA,UAAIG,IAAI,KAAKC,IAAb,EACE,OAAOJ,CAAP;AAEFG,MAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY7C,CAAnB;AACA8C,MAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY9C,CAAnB;AACD;;AACD,WAAO,CAAP;AACD;;AAED,WAASM,GAAT,CAAaD,CAAb,EAAgB+B,CAAhB,EAAmB;AAEjB,QAAI,CAAC/B,CAAL,EACE,OAAO+B,CAAP;AACF,QAAI,CAACA,CAAL,EACE,OAAO/B,CAAP;;AAEF,WAAO,CAAP,EAAU;AACRA,MAAAA,CAAC,IAAG+B,CAAJ;AACA,UAAI,CAAC/B,CAAL,EACE,OAAO+B,CAAP;AACFA,MAAAA,CAAC,IAAG/B,CAAJ;AACA,UAAI,CAAC+B,CAAL,EACE,OAAO/B,CAAP;AACH;AACF;;AAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,WAASP,QAAT,CAAkBO,CAAlB,EAAqB+B,CAArB,EAAwB;AAEtBzB,IAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;;AAEA,QAAI,gBAAgBtC,QAApB,EAA8B;AAC5BO,MAAAA,CAAC,GAAGC,GAAG,CAACd,CAAC,CAAC,GAAD,CAAF,EAASA,CAAC,CAAC,GAAD,CAAV,CAAP,CAD4B,CACH;;AACzB,WAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAAb;AACA,WAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAAD,GAASa,CAArB;AACA,WAAK,GAAL,IAAYb,CAAC,CAAC,GAAD,CAAD,GAASa,CAArB;AACD,KALD,MAKO;AACL,aAAON,WAAW,CAACP,CAAC,CAAC,GAAD,CAAD,GAASA,CAAC,CAAC,GAAD,CAAX,EAAkBA,CAAC,CAAC,GAAD,CAAnB,CAAlB;AACD;AACF;;AAEDM,EAAAA,QAAQ,CAAC,gBAAD,CAAR,GAA6B,IAAIiD,KAAJ,CAAU,kBAAV,CAA7B;AACAjD,EAAAA,QAAQ,CAAC,kBAAD,CAAR,GAA+B,IAAIiD,KAAJ,CAAU,kBAAV,CAA/B;AACAjD,EAAAA,QAAQ,CAAC,qBAAD,CAAR,GAAkC,IAAIiD,KAAJ,CAAU,4BAAV,CAAlC;AAEAjD,EAAAA,QAAQ,CAACM,SAAT,GAAqB;AAEnB,SAAK,CAFc;AAGnB,SAAK,CAHc;AAInB,SAAK,CAJc;;AAMnB;AACJ;AACA;AACA;AACA;AACI,WAAO,YAAW;AAEhB,aAAOL,WAAW,CAAC,KAAK,GAAL,CAAD,EAAY,KAAK,GAAL,CAAZ,CAAlB;AACD,KAdkB;;AAgBnB;AACJ;AACA;AACA;AACA;AACI,WAAO,YAAW;AAEhB,aAAOA,WAAW,CAAC,CAAC,KAAK,GAAL,CAAD,GAAa,KAAK,GAAL,CAAd,EAAyB,KAAK,GAAL,CAAzB,CAAlB;AACD,KAxBkB;;AA0BnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASM,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,aAAOrC,WAAW,CAChB,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwBP,CAAC,CAAC,GAAD,CAAzB,GAAiCA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAT,GAAqBA,CAAC,CAAC,GAAD,CADvC,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;AAID,KAtCkB;;AAwCnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASa,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,aAAOrC,WAAW,CAChB,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwBP,CAAC,CAAC,GAAD,CAAzB,GAAiCA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAT,GAAqBA,CAAC,CAAC,GAAD,CADvC,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;AAID,KApDkB;;AAsDnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASa,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,aAAOrC,WAAW,CAChB,KAAK,GAAL,IAAYP,CAAC,CAAC,GAAD,CAAb,GAAqB,KAAK,GAAL,CAArB,GAAiCA,CAAC,CAAC,GAAD,CADlB,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;AAID,KAlEkB;;AAoEnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASa,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,aAAOrC,WAAW,CAChB,KAAK,GAAL,IAAYP,CAAC,CAAC,GAAD,CAAb,GAAqB,KAAK,GAAL,CAArB,GAAiCA,CAAC,CAAC,GAAD,CADlB,EAEhB,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAFG,CAAlB;AAID,KAhFkB;;AAkFnB;AACJ;AACA;AACA;AACA;AACI,aAAS,YAAW;AAClB,aAAOO,WAAW,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,EAAwB,KAAK,GAAL,CAAxB,CAAlB;AACD,KAzFkB;;AA2FnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASM,CAAT,EAAY+B,CAAZ,EAAe;AAEpB,UAAIxC,KAAK,CAAC,KAAK,GAAL,CAAD,CAAL,IAAoBA,KAAK,CAAC,KAAK,GAAL,CAAD,CAA7B,EAA0C;AACxC,eAAO,IAAIE,QAAJ,CAAaiC,GAAb,CAAP;AACD;;AAED,UAAI1B,CAAC,KAAKoB,SAAV,EAAqB;AACnB,eAAO1B,WAAW,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwB,KAAK,GAAL,CAAzB,EAAoC,CAApC,CAAlB;AACD;;AAEDY,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;;AACA,UAAI,MAAM5C,CAAC,CAAC,GAAD,CAAP,IAAgB,MAAM,KAAK,GAAL,CAA1B,EAAqC;AACnC,cAAMM,QAAQ,CAAC,gBAAD,CAAd;AACD;AAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEM;AACN;AACA;AACA;AACA;;;AACM,aAAOC,WAAW,CAChB,KAAK,GAAL,KAAaP,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAtB,KAAoCA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAA7C,CADgB,EAEhBA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAFO,CAAlB;AAID,KAjIkB;;AAmInB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASa,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL,CAFoB,CAIpB;;AAEA,aAAOrC,WAAW,CAACO,GAAG,CAACd,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAAH,GAAyBc,GAAG,CAACd,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAA7B,EAAkDA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAA3D,CAAlB;AACD,KA/IkB;;AAiJnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASa,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL,CAFoB,CAIpB;;AAEA,UAAI5C,CAAC,CAAC,GAAD,CAAD,KAAW,CAAX,IAAgB,KAAK,GAAL,MAAc,CAAlC,EAAqC;AACnC,eAAOO,WAAW,CAAC,CAAD,EAAI,CAAJ,CAAlB;AACD;;AACD,aAAOA,WAAW,CAACP,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAV,EAAqBc,GAAG,CAACd,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAAH,GAAyBc,GAAG,CAACd,CAAC,CAAC,GAAD,CAAF,EAAS,KAAK,GAAL,CAAT,CAAjD,CAAlB;AACD,KAhKkB;;AAkKnB;AACJ;AACA;AACA;AACA;AACI,YAAQ,UAASwD,MAAT,EAAiB;AAEvBA,MAAAA,MAAM,GAAGtB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaqB,MAAM,IAAI,CAAvB,CAAT;;AAEA,UAAIpD,KAAK,CAAC,KAAK,GAAL,CAAD,CAAL,IAAoBA,KAAK,CAAC,KAAK,GAAL,CAAD,CAA7B,EAA0C;AACxC,eAAO,IAAIE,QAAJ,CAAaiC,GAAb,CAAP;AACD;;AACD,aAAOhC,WAAW,CAAC2B,IAAI,CAACuB,IAAL,CAAUD,MAAM,GAAG,KAAK,GAAL,CAAT,GAAqB,KAAK,GAAL,CAArB,GAAiC,KAAK,GAAL,CAA3C,CAAD,EAAwDA,MAAxD,CAAlB;AACD,KA/KkB;;AAiLnB;AACJ;AACA;AACA;AACA;AACI,aAAS,UAASA,MAAT,EAAiB;AAExBA,MAAAA,MAAM,GAAGtB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaqB,MAAM,IAAI,CAAvB,CAAT;;AAEA,UAAIpD,KAAK,CAAC,KAAK,GAAL,CAAD,CAAL,IAAoBA,KAAK,CAAC,KAAK,GAAL,CAAD,CAA7B,EAA0C;AACxC,eAAO,IAAIE,QAAJ,CAAaiC,GAAb,CAAP;AACD;;AACD,aAAOhC,WAAW,CAAC2B,IAAI,CAACE,KAAL,CAAWoB,MAAM,GAAG,KAAK,GAAL,CAAT,GAAqB,KAAK,GAAL,CAArB,GAAiC,KAAK,GAAL,CAA5C,CAAD,EAAyDA,MAAzD,CAAlB;AACD,KA9LkB;;AAgMnB;AACJ;AACA;AACA;AACA;AACI,aAAS,UAASA,MAAT,EAAiB;AAExBA,MAAAA,MAAM,GAAGtB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaqB,MAAM,IAAI,CAAvB,CAAT;;AAEA,UAAIpD,KAAK,CAAC,KAAK,GAAL,CAAD,CAAL,IAAoBA,KAAK,CAAC,KAAK,GAAL,CAAD,CAA7B,EAA0C;AACxC,eAAO,IAAIE,QAAJ,CAAaiC,GAAb,CAAP;AACD;;AACD,aAAOhC,WAAW,CAAC2B,IAAI,CAACwB,KAAL,CAAWF,MAAM,GAAG,KAAK,GAAL,CAAT,GAAqB,KAAK,GAAL,CAArB,GAAiC,KAAK,GAAL,CAA5C,CAAD,EAAyDA,MAAzD,CAAlB;AACD,KA7MkB;;AA+MnB;AACJ;AACA;AACA;AACA;AACI,eAAW,YAAW;AAEpB,aAAOjD,WAAW,CAAC,KAAK,GAAL,IAAY,KAAK,GAAL,CAAb,EAAwB,KAAK,GAAL,CAAxB,CAAlB;AACD,KAvNkB;;AAyNnB;AACJ;AACA;AACA;AACA;AACI,WAAO,UAASM,CAAT,EAAY+B,CAAZ,EAAe;AAEpBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL,CAFoB,CAIpB;;AAEA,UAAI5C,CAAC,CAAC,GAAD,CAAD,KAAW,CAAf,EAAkB;AAEhB,YAAIA,CAAC,CAAC,GAAD,CAAD,GAAS,CAAb,EAAgB;AACd,iBAAOO,WAAW,CAAC2B,IAAI,CAACC,GAAL,CAAS,KAAK,GAAL,IAAY,KAAK,GAAL,CAArB,EAAgCnC,CAAC,CAAC,GAAD,CAAjC,CAAD,EAA0CkC,IAAI,CAACC,GAAL,CAAS,KAAK,GAAL,CAAT,EAAoBnC,CAAC,CAAC,GAAD,CAArB,CAA1C,CAAlB;AACD,SAFD,MAEO;AACL,iBAAOO,WAAW,CAAC2B,IAAI,CAACC,GAAL,CAAS,KAAK,GAAL,IAAY,KAAK,GAAL,CAArB,EAAgCnC,CAAC,CAAC,GAAD,CAAjC,CAAD,EAA0CkC,IAAI,CAACC,GAAL,CAAS,KAAK,GAAL,CAAT,EAAoBnC,CAAC,CAAC,GAAD,CAArB,CAA1C,CAAlB;AACD;AACF,OAbmB,CAepB;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAI,KAAK,GAAL,IAAY,CAAhB,EAAmB,OAAO,IAAP,CArBC,CAuBpB;;AACA,UAAI+B,CAAC,GAAGhB,SAAS,CAAC,KAAK,GAAL,CAAD,CAAjB;AACA,UAAIe,CAAC,GAAGf,SAAS,CAAC,KAAK,GAAL,CAAD,CAAjB,CAzBoB,CA2BpB;;AACA,UAAIb,CAAC,GAAG,CAAR;AACA,UAAIM,CAAC,GAAG,CAAR;;AACA,WAAK,IAAImD,CAAT,IAAc5B,CAAd,EAAiB;AACf,YAAI4B,CAAC,KAAK,GAAV,EAAe;;AACf,YAAIA,CAAC,KAAK,GAAV,EAAe;AACbzD,UAAAA,CAAC,GAAG,CAAJ;AACA;AACD;;AACD6B,QAAAA,CAAC,CAAC4B,CAAD,CAAD,IAAO3D,CAAC,CAAC,GAAD,CAAR;;AAEA,YAAI+B,CAAC,CAAC4B,CAAD,CAAD,GAAO3D,CAAC,CAAC,GAAD,CAAR,KAAkB,CAAtB,EAAyB;AACvB+B,UAAAA,CAAC,CAAC4B,CAAD,CAAD,IAAO3D,CAAC,CAAC,GAAD,CAAR;AACD,SAFD,MAEO,OAAO,IAAP;;AACPE,QAAAA,CAAC,IAAGgC,IAAI,CAACC,GAAL,CAASwB,CAAT,EAAY5B,CAAC,CAAC4B,CAAD,CAAb,CAAJ;AACD;;AAED,WAAK,IAAIA,CAAT,IAAc7B,CAAd,EAAiB;AACf,YAAI6B,CAAC,KAAK,GAAV,EAAe;AACf7B,QAAAA,CAAC,CAAC6B,CAAD,CAAD,IAAO3D,CAAC,CAAC,GAAD,CAAR;;AAEA,YAAI8B,CAAC,CAAC6B,CAAD,CAAD,GAAO3D,CAAC,CAAC,GAAD,CAAR,KAAkB,CAAtB,EAAyB;AACvB8B,UAAAA,CAAC,CAAC6B,CAAD,CAAD,IAAO3D,CAAC,CAAC,GAAD,CAAR;AACD,SAFD,MAEO,OAAO,IAAP;;AACPQ,QAAAA,CAAC,IAAG0B,IAAI,CAACC,GAAL,CAASwB,CAAT,EAAY7B,CAAC,CAAC6B,CAAD,CAAb,CAAJ;AACD;;AAED,UAAI3D,CAAC,CAAC,GAAD,CAAD,GAAS,CAAb,EAAgB;AACd,eAAOO,WAAW,CAACC,CAAD,EAAIN,CAAJ,CAAlB;AACD;;AACD,aAAOK,WAAW,CAACL,CAAD,EAAIM,CAAJ,CAAlB;AACD,KAxRkB;;AA0RnB;AACJ;AACA;AACA;AACA;AACI,cAAU,UAASK,CAAT,EAAY+B,CAAZ,EAAe;AAEvBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,aAAO,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwB5C,CAAC,CAAC,GAAD,CAAzB,KAAmCA,CAAC,CAAC,GAAD,CAAD,GAASA,CAAC,CAAC,GAAD,CAAV,GAAkB,KAAK,GAAL,CAA5D,CAHuB,CAGgD;AACxE,KAnSkB;;AAqSnB;AACJ;AACA;AACA;AACA;AACI,eAAW,UAASa,CAAT,EAAY+B,CAAZ,EAAe;AAExBzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,UAAIM,CAAC,GAAI,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwBlD,CAAC,CAAC,GAAD,CAAzB,GAAiCA,CAAC,CAAC,GAAD,CAAD,GAASA,CAAC,CAAC,GAAD,CAAV,GAAkB,KAAK,GAAL,CAA5D;AACA,aAAO,CAAC,IAAIkD,CAAL,KAAWA,CAAC,GAAG,CAAf,CAAP;AACD,KA/SkB;AAiTnB,gBAAY,UAASU,GAAT,EAAc;AAExB,UAAIxD,KAAK,CAAC,KAAK,GAAL,CAAD,CAAL,IAAoBA,KAAK,CAAC,KAAK,GAAL,CAAD,CAA7B,EAA0C;AACxC,eAAO,IAAP;AACD;;AAEDwD,MAAAA,GAAG,GAAGA,GAAG,IAAI,KAAb;AAEA,UAAIC,OAAO,GAAG,KAAK,KAAL,GAAd;AACA,UAAIC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAAP,EAAX;;AAEA,WAAK,IAAI3C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4C,IAAI,CAACrB,MAAzB,EAAiCvB,CAAC,EAAlC,EAAsC;AAEpC,YAAIf,CAAC,GAAGI,WAAW,CAACuD,IAAI,CAAC5C,CAAC,GAAG,CAAL,CAAL,EAAc,CAAd,CAAnB;;AACA,aAAK,IAAIyC,CAAC,GAAGzC,CAAC,GAAG,CAAjB,EAAoByC,CAAC,IAAI,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;AAC/BxD,UAAAA,CAAC,GAAGA,CAAC,CAAC,SAAD,CAAD,GAAe,KAAf,EAAsB2D,IAAI,CAACH,CAAD,CAA1B,CAAJ;AACD;;AAED,YAAIxD,CAAC,CAAC,KAAD,CAAD,CAAS0D,OAAT,EAAkB,KAAlB,IAA2BE,OAA3B,KAAuCH,GAA3C,EAAgD;AAC9C,iBAAOzD,CAAC,CAAC,KAAD,CAAD,CAAS,KAAK,GAAL,CAAT,CAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD,KAxUkB;;AA0UnB;AACJ;AACA;AACA;AACA;AACI,iBAAa,UAASU,CAAT,EAAY+B,CAAZ,EAAe;AAE1BzB,MAAAA,KAAK,CAACN,CAAD,EAAI+B,CAAJ,CAAL;AACA,aAAO,EAAE,EAAE5C,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAX,KAA2B,KAAK,GAAL,IAAYA,CAAC,CAAC,GAAD,CAAd,IAAwBA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAK,GAAL,CAAjC,CAA5B,CAAP;AACD,KAnVkB;;AAqVnB;AACJ;AACA;AACA;AACA;AACI,eAAW,YAAW;AAEpB,aAAO,KAAK,GAAL,IAAY,KAAK,GAAL,CAAZ,GAAwB,KAAK,GAAL,CAA/B;AACD,KA7VkB;;AA+VnB;AACJ;AACA;AACA;AACA;AACI,kBAAc,UAASgE,YAAT,EAAuB;AAEnC,UAAIC,KAAJ;AAAA,UAAWC,GAAG,GAAG,EAAjB;AACA,UAAIhE,CAAC,GAAG,KAAK,GAAL,CAAR;AACA,UAAIM,CAAC,GAAG,KAAK,GAAL,CAAR;;AACA,UAAI,KAAK,GAAL,IAAY,CAAhB,EAAmB;AACjB0D,QAAAA,GAAG,IAAG,GAAN;AACD;;AAED,UAAI1D,CAAC,KAAK,CAAV,EAAa;AACX0D,QAAAA,GAAG,IAAGhE,CAAN;AACD,OAFD,MAEO;AAEL,YAAI8D,YAAY,IAAI,CAACC,KAAK,GAAG/B,IAAI,CAACE,KAAL,CAAWlC,CAAC,GAAGM,CAAf,CAAT,IAA8B,CAAlD,EAAqD;AACnD0D,UAAAA,GAAG,IAAGD,KAAN;AACAC,UAAAA,GAAG,IAAG,GAAN;AACAhE,UAAAA,CAAC,IAAGM,CAAJ;AACD;;AAED0D,QAAAA,GAAG,IAAGhE,CAAN;AACAgE,QAAAA,GAAG,IAAG,GAAN;AACAA,QAAAA,GAAG,IAAG1D,CAAN;AACD;;AACD,aAAO0D,GAAP;AACD,KA5XkB;;AA8XnB;AACJ;AACA;AACA;AACA;AACI,eAAW,UAASF,YAAT,EAAuB;AAEhC,UAAIC,KAAJ;AAAA,UAAWC,GAAG,GAAG,EAAjB;AACA,UAAIhE,CAAC,GAAG,KAAK,GAAL,CAAR;AACA,UAAIM,CAAC,GAAG,KAAK,GAAL,CAAR;;AACA,UAAI,KAAK,GAAL,IAAY,CAAhB,EAAmB;AACjB0D,QAAAA,GAAG,IAAG,GAAN;AACD;;AAED,UAAI1D,CAAC,KAAK,CAAV,EAAa;AACX0D,QAAAA,GAAG,IAAGhE,CAAN;AACD,OAFD,MAEO;AAEL,YAAI8D,YAAY,IAAI,CAACC,KAAK,GAAG/B,IAAI,CAACE,KAAL,CAAWlC,CAAC,GAAGM,CAAf,CAAT,IAA8B,CAAlD,EAAqD;AACnD0D,UAAAA,GAAG,IAAGD,KAAN;AACA/D,UAAAA,CAAC,IAAGM,CAAJ;AACD;;AAED0D,QAAAA,GAAG,IAAG,SAAN;AACAA,QAAAA,GAAG,IAAGhE,CAAN;AACAgE,QAAAA,GAAG,IAAG,IAAN;AACAA,QAAAA,GAAG,IAAG1D,CAAN;AACA0D,QAAAA,GAAG,IAAG,GAAN;AACD;;AACD,aAAOA,GAAP;AACD,KA5ZkB;;AA8ZnB;AACJ;AACA;AACA;AACA;AACI,mBAAe,YAAW;AAExB,UAAIhB,CAAJ;AACA,UAAIrC,CAAC,GAAG,KAAK,GAAL,CAAR;AACA,UAAI+B,CAAC,GAAG,KAAK,GAAL,CAAR;AACA,UAAIuB,GAAG,GAAG,EAAV;;AAEA,UAAI/D,KAAK,CAACS,CAAD,CAAL,IAAYT,KAAK,CAACwC,CAAD,CAArB,EAA0B;AACxB,eAAOuB,GAAP;AACD;;AAED,SAAG;AACDA,QAAAA,GAAG,CAACC,IAAJ,CAASlC,IAAI,CAACE,KAAL,CAAWvB,CAAC,GAAG+B,CAAf,CAAT;AACAM,QAAAA,CAAC,GAAGrC,CAAC,GAAG+B,CAAR;AACA/B,QAAAA,CAAC,GAAG+B,CAAJ;AACAA,QAAAA,CAAC,GAAGM,CAAJ;AACD,OALD,QAKSrC,CAAC,KAAK,CALf;;AAOA,aAAOsD,GAAP;AACD,KAtbkB;;AAwbnB;AACJ;AACA;AACA;AACA;AACI,gBAAY,UAASE,GAAT,EAAc;AAExB,UAAItC,CAAC,GAAG,KAAK,GAAL,CAAR;AACA,UAAID,CAAC,GAAG,KAAK,GAAL,CAAR;;AAEA,UAAI1B,KAAK,CAAC2B,CAAD,CAAL,IAAY3B,KAAK,CAAC0B,CAAD,CAArB,EAA0B;AACxB,eAAO,KAAP;AACD;;AAEDuC,MAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb,CATwB,CASP;;AAEjB,UAAIC,MAAM,GAAGtB,QAAQ,CAACjB,CAAD,EAAID,CAAJ,CAArB,CAXwB,CAWK;;AAC7B,UAAIyC,MAAM,GAAGpB,UAAU,CAACpB,CAAD,EAAID,CAAJ,EAAOwC,MAAP,CAAvB,CAZwB,CAYe;;AAEvC,UAAIJ,GAAG,GAAG,KAAK,GAAL,IAAY,CAAZ,GAAgB,GAAhB,GAAsB,EAAhC;AAEAA,MAAAA,GAAG,IAAGnC,CAAC,GAAGD,CAAJ,GAAQ,CAAd;AAEAC,MAAAA,CAAC,IAAGD,CAAJ;AACAC,MAAAA,CAAC,IAAG,EAAJ;AAEA,UAAIA,CAAJ,EACEmC,GAAG,IAAG,GAAN;;AAEF,UAAII,MAAJ,EAAY;AAEV,aAAK,IAAIpD,CAAC,GAAGqD,MAAb,EAAqBrD,CAAC,EAAtB,GAA2B;AACzBgD,UAAAA,GAAG,IAAGnC,CAAC,GAAGD,CAAJ,GAAQ,CAAd;AACAC,UAAAA,CAAC,IAAGD,CAAJ;AACAC,UAAAA,CAAC,IAAG,EAAJ;AACD;;AACDmC,QAAAA,GAAG,IAAG,GAAN;;AACA,aAAK,IAAIhD,CAAC,GAAGoD,MAAb,EAAqBpD,CAAC,EAAtB,GAA2B;AACzBgD,UAAAA,GAAG,IAAGnC,CAAC,GAAGD,CAAJ,GAAQ,CAAd;AACAC,UAAAA,CAAC,IAAGD,CAAJ;AACAC,UAAAA,CAAC,IAAG,EAAJ;AACD;;AACDmC,QAAAA,GAAG,IAAG,GAAN;AACD,OAdD,MAcO;AACL,aAAK,IAAIhD,CAAC,GAAGmD,GAAb,EAAkBtC,CAAC,IAAIb,CAAC,EAAxB,GAA6B;AAC3BgD,UAAAA,GAAG,IAAGnC,CAAC,GAAGD,CAAJ,GAAQ,CAAd;AACAC,UAAAA,CAAC,IAAGD,CAAJ;AACAC,UAAAA,CAAC,IAAG,EAAJ;AACD;AACF;;AACD,aAAOmC,GAAP;AACD;AA3ekB,GAArB;;AA8eA,MAAI,OAAOM,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAAC,KAAD,CAA1C,EAAmD;AACjDA,IAAAA,MAAM,CAAC,EAAD,EAAK,YAAW;AACpB,aAAOlE,QAAP;AACD,KAFK,CAAN;AAGD,GAJD,MAIO,IAAI,OAAOmE,OAAP,KAAmB,QAAvB,EAAiC;AACtC/D,IAAAA,MAAM,CAACgE,cAAP,CAAsBpE,QAAtB,EAAgC,YAAhC,EAA8C;AAAE,eAAS;AAAX,KAA9C;AACAA,IAAAA,QAAQ,CAAC,SAAD,CAAR,GAAsBA,QAAtB;AACAA,IAAAA,QAAQ,CAAC,UAAD,CAAR,GAAuBA,QAAvB;AACAqE,IAAAA,MAAM,CAAC,SAAD,CAAN,GAAoBrE,QAApB;AACD,GALM,MAKA;AACLR,IAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmBQ,QAAnB;AACD;AAEF,CAn1BD,EAm1BG,IAn1BH","sourcesContent":["/**\r\n * @license Fraction.js v4.2.0 05/03/2022\r\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\r\n *\r\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\r\n * Dual licensed under the MIT or GPL Version 2 licenses.\r\n **/\r\n\r\n\r\n/**\r\n *\r\n * This class offers the possibility to calculate fractions.\r\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\r\n *\r\n * Array/Object form\r\n * [ 0 => <nominator>, 1 => <denominator> ]\r\n * [ n => <nominator>, d => <denominator> ]\r\n *\r\n * Integer form\r\n * - Single integer value\r\n *\r\n * Double form\r\n * - Single double value\r\n *\r\n * String form\r\n * 123.456 - a simple double\r\n * 123/456 - a string fraction\r\n * 123.'456' - a double with repeating decimal places\r\n * 123.(456) - synonym\r\n * 123.45'6' - a double with repeating last place\r\n * 123.45(6) - synonym\r\n *\r\n * Example:\r\n *\r\n * var f = new Fraction(\"9.4'31'\");\r\n * f.mul([-4, 3]).div(4.9);\r\n *\r\n */\r\n\r\n(function(root) {\r\n\r\n  \"use strict\";\r\n\r\n  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\r\n  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.\r\n  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\r\n  var MAX_CYCLE_LEN = 2000;\r\n\r\n  // Parsed data to avoid calling \"new\" all the time\r\n  var P = {\r\n    \"s\": 1,\r\n    \"n\": 0,\r\n    \"d\": 1\r\n  };\r\n\r\n  function assign(n, s) {\r\n\r\n    if (isNaN(n = parseInt(n, 10))) {\r\n      throw Fraction['InvalidParameter'];\r\n    }\r\n    return n * s;\r\n  }\r\n\r\n  // Creates a new Fraction internally without the need of the bulky constructor\r\n  function newFraction(n, d) {\r\n\r\n    if (d === 0) {\r\n      throw Fraction['DivisionByZero'];\r\n    }\r\n\r\n    var f = Object.create(Fraction.prototype);\r\n    f[\"s\"] = n < 0 ? -1 : 1;\r\n\r\n    n = n < 0 ? -n : n;\r\n\r\n    var a = gcd(n, d);\r\n\r\n    f[\"n\"] = n / a;\r\n    f[\"d\"] = d / a;\r\n    return f;\r\n  }\r\n\r\n  function factorize(num) {\r\n\r\n    var factors = {};\r\n\r\n    var n = num;\r\n    var i = 2;\r\n    var s = 4;\r\n\r\n    while (s <= n) {\r\n\r\n      while (n % i === 0) {\r\n        n/= i;\r\n        factors[i] = (factors[i] || 0) + 1;\r\n      }\r\n      s+= 1 + 2 * i++;\r\n    }\r\n\r\n    if (n !== num) {\r\n      if (n > 1)\r\n        factors[n] = (factors[n] || 0) + 1;\r\n    } else {\r\n      factors[num] = (factors[num] || 0) + 1;\r\n    }\r\n    return factors;\r\n  }\r\n\r\n  var parse = function(p1, p2) {\r\n\r\n    var n = 0, d = 1, s = 1;\r\n    var v = 0, w = 0, x = 0, y = 1, z = 1;\r\n\r\n    var A = 0, B = 1;\r\n    var C = 1, D = 1;\r\n\r\n    var N = 10000000;\r\n    var M;\r\n\r\n    if (p1 === undefined || p1 === null) {\r\n      /* void */\r\n    } else if (p2 !== undefined) {\r\n      n = p1;\r\n      d = p2;\r\n      s = n * d;\r\n\r\n      if (n % 1 !== 0 || d % 1 !== 0) {\r\n        throw Fraction['NonIntegerParameter'];\r\n      }\r\n\r\n    } else\r\n      switch (typeof p1) {\r\n\r\n        case \"object\":\r\n          {\r\n            if (\"d\" in p1 && \"n\" in p1) {\r\n              n = p1[\"n\"];\r\n              d = p1[\"d\"];\r\n              if (\"s\" in p1)\r\n                n*= p1[\"s\"];\r\n            } else if (0 in p1) {\r\n              n = p1[0];\r\n              if (1 in p1)\r\n                d = p1[1];\r\n            } else {\r\n              throw Fraction['InvalidParameter'];\r\n            }\r\n            s = n * d;\r\n            break;\r\n          }\r\n        case \"number\":\r\n          {\r\n            if (p1 < 0) {\r\n              s = p1;\r\n              p1 = -p1;\r\n            }\r\n\r\n            if (p1 % 1 === 0) {\r\n              n = p1;\r\n            } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\r\n\r\n              if (p1 >= 1) {\r\n                z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\r\n                p1/= z;\r\n              }\r\n\r\n              // Using Farey Sequences\r\n              // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\r\n\r\n              while (B <= N && D <= N) {\r\n                M = (A + C) / (B + D);\r\n\r\n                if (p1 === M) {\r\n                  if (B + D <= N) {\r\n                    n = A + C;\r\n                    d = B + D;\r\n                  } else if (D > B) {\r\n                    n = C;\r\n                    d = D;\r\n                  } else {\r\n                    n = A;\r\n                    d = B;\r\n                  }\r\n                  break;\r\n\r\n                } else {\r\n\r\n                  if (p1 > M) {\r\n                    A+= C;\r\n                    B+= D;\r\n                  } else {\r\n                    C+= A;\r\n                    D+= B;\r\n                  }\r\n\r\n                  if (B > N) {\r\n                    n = C;\r\n                    d = D;\r\n                  } else {\r\n                    n = A;\r\n                    d = B;\r\n                  }\r\n                }\r\n              }\r\n              n*= z;\r\n            } else if (isNaN(p1) || isNaN(p2)) {\r\n              d = n = NaN;\r\n            }\r\n            break;\r\n          }\r\n        case \"string\":\r\n          {\r\n            B = p1.match(/\\d+|./g);\r\n\r\n            if (B === null)\r\n              throw Fraction['InvalidParameter'];\r\n\r\n            if (B[A] === '-') {// Check for minus sign at the beginning\r\n              s = -1;\r\n              A++;\r\n            } else if (B[A] === '+') {// Check for plus sign at the beginning\r\n              A++;\r\n            }\r\n\r\n            if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\r\n              w = assign(B[A++], s);\r\n            } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\r\n\r\n              if (B[A] !== '.') { // Handle 0.5 and .5\r\n                v = assign(B[A++], s);\r\n              }\r\n              A++;\r\n\r\n              // Check for decimal places\r\n              if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\r\n                w = assign(B[A], s);\r\n                y = Math.pow(10, B[A].length);\r\n                A++;\r\n              }\r\n\r\n              // Check for repeating places\r\n              if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\r\n                x = assign(B[A + 1], s);\r\n                z = Math.pow(10, B[A + 1].length) - 1;\r\n                A+= 3;\r\n              }\r\n\r\n            } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\r\n              w = assign(B[A], s);\r\n              y = assign(B[A + 2], 1);\r\n              A+= 3;\r\n            } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\r\n              v = assign(B[A], s);\r\n              w = assign(B[A + 2], s);\r\n              y = assign(B[A + 4], 1);\r\n              A+= 5;\r\n            }\r\n\r\n            if (B.length <= A) { // Check for more tokens on the stack\r\n              d = y * z;\r\n              s = /* void */\r\n              n = x + d * v + z * w;\r\n              break;\r\n            }\r\n\r\n            /* Fall through on error */\r\n          }\r\n        default:\r\n          throw Fraction['InvalidParameter'];\r\n      }\r\n\r\n    if (d === 0) {\r\n      throw Fraction['DivisionByZero'];\r\n    }\r\n\r\n    P[\"s\"] = s < 0 ? -1 : 1;\r\n    P[\"n\"] = Math.abs(n);\r\n    P[\"d\"] = Math.abs(d);\r\n  };\r\n\r\n  function modpow(b, e, m) {\r\n\r\n    var r = 1;\r\n    for (; e > 0; b = (b * b) % m, e >>= 1) {\r\n\r\n      if (e & 1) {\r\n        r = (r * b) % m;\r\n      }\r\n    }\r\n    return r;\r\n  }\r\n\r\n\r\n  function cycleLen(n, d) {\r\n\r\n    for (; d % 2 === 0;\r\n      d/= 2) {\r\n    }\r\n\r\n    for (; d % 5 === 0;\r\n      d/= 5) {\r\n    }\r\n\r\n    if (d === 1) // Catch non-cyclic numbers\r\n      return 0;\r\n\r\n    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\r\n    // 10^(d-1) % d == 1\r\n    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\r\n    // as we want to translate the numbers to strings.\r\n\r\n    var rem = 10 % d;\r\n    var t = 1;\r\n\r\n    for (; rem !== 1; t++) {\r\n      rem = rem * 10 % d;\r\n\r\n      if (t > MAX_CYCLE_LEN)\r\n        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\r\n    }\r\n    return t;\r\n  }\r\n\r\n\r\n  function cycleStart(n, d, len) {\r\n\r\n    var rem1 = 1;\r\n    var rem2 = modpow(10, len, d);\r\n\r\n    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\r\n      // Solve 10^s == 10^(s+t) (mod d)\r\n\r\n      if (rem1 === rem2)\r\n        return t;\r\n\r\n      rem1 = rem1 * 10 % d;\r\n      rem2 = rem2 * 10 % d;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function gcd(a, b) {\r\n\r\n    if (!a)\r\n      return b;\r\n    if (!b)\r\n      return a;\r\n\r\n    while (1) {\r\n      a%= b;\r\n      if (!a)\r\n        return b;\r\n      b%= a;\r\n      if (!b)\r\n        return a;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Module constructor\r\n   *\r\n   * @constructor\r\n   * @param {number|Fraction=} a\r\n   * @param {number=} b\r\n   */\r\n  function Fraction(a, b) {\r\n\r\n    parse(a, b);\r\n\r\n    if (this instanceof Fraction) {\r\n      a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\r\n      this[\"s\"] = P[\"s\"];\r\n      this[\"n\"] = P[\"n\"] / a;\r\n      this[\"d\"] = P[\"d\"] / a;\r\n    } else {\r\n      return newFraction(P['s'] * P['n'], P['d']);\r\n    }\r\n  }\r\n\r\n  Fraction['DivisionByZero'] = new Error(\"Division by Zero\");\r\n  Fraction['InvalidParameter'] = new Error(\"Invalid argument\");\r\n  Fraction['NonIntegerParameter'] = new Error(\"Parameters must be integer\");\r\n\r\n  Fraction.prototype = {\r\n\r\n    \"s\": 1,\r\n    \"n\": 0,\r\n    \"d\": 1,\r\n\r\n    /**\r\n     * Calculates the absolute value\r\n     *\r\n     * Ex: new Fraction(-4).abs() => 4\r\n     **/\r\n    \"abs\": function() {\r\n\r\n      return newFraction(this[\"n\"], this[\"d\"]);\r\n    },\r\n\r\n    /**\r\n     * Inverts the sign of the current fraction\r\n     *\r\n     * Ex: new Fraction(-4).neg() => 4\r\n     **/\r\n    \"neg\": function() {\r\n\r\n      return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\r\n    },\r\n\r\n    /**\r\n     * Adds two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\r\n     **/\r\n    \"add\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return newFraction(\r\n        this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\r\n        this[\"d\"] * P[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Subtracts two rational numbers\r\n     *\r\n     * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\r\n     **/\r\n    \"sub\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return newFraction(\r\n        this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\r\n        this[\"d\"] * P[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Multiplies two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\r\n     **/\r\n    \"mul\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return newFraction(\r\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\r\n        this[\"d\"] * P[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Divides two rational numbers\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\r\n     **/\r\n    \"div\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return newFraction(\r\n        this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\r\n        this[\"d\"] * P[\"n\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Clones the actual object\r\n     *\r\n     * Ex: new Fraction(\"-17.(345)\").clone()\r\n     **/\r\n    \"clone\": function() {\r\n      return newFraction(this['s'] * this['n'], this['d']);\r\n    },\r\n\r\n    /**\r\n     * Calculates the modulo of two rational numbers - a more precise fmod\r\n     *\r\n     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\r\n     **/\r\n    \"mod\": function(a, b) {\r\n\r\n      if (isNaN(this['n']) || isNaN(this['d'])) {\r\n        return new Fraction(NaN);\r\n      }\r\n\r\n      if (a === undefined) {\r\n        return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\r\n      }\r\n\r\n      parse(a, b);\r\n      if (0 === P[\"n\"] && 0 === this[\"d\"]) {\r\n        throw Fraction['DivisionByZero'];\r\n      }\r\n\r\n      /*\r\n       * First silly attempt, kinda slow\r\n       *\r\n       return that[\"sub\"]({\r\n       \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\r\n       \"d\": num[\"d\"],\r\n       \"s\": this[\"s\"]\r\n       });*/\r\n\r\n      /*\r\n       * New attempt: a1 / b1 = a2 / b2 * q + r\r\n       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\r\n       * => (b2 * a1 % a2 * b1) / (b1 * b2)\r\n       */\r\n      return newFraction(\r\n        this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\r\n        P[\"d\"] * this[\"d\"]\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Calculates the fractional gcd of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).gcd(3,7) => 1/56\r\n     */\r\n    \"gcd\": function(a, b) {\r\n\r\n      parse(a, b);\r\n\r\n      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\r\n\r\n      return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\r\n    },\r\n\r\n    /**\r\n     * Calculates the fractional lcm of two rational numbers\r\n     *\r\n     * Ex: new Fraction(5,8).lcm(3,7) => 15\r\n     */\r\n    \"lcm\": function(a, b) {\r\n\r\n      parse(a, b);\r\n\r\n      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\r\n\r\n      if (P[\"n\"] === 0 && this[\"n\"] === 0) {\r\n        return newFraction(0, 1);\r\n      }\r\n      return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\r\n    },\r\n\r\n    /**\r\n     * Calculates the ceil of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\r\n     **/\r\n    \"ceil\": function(places) {\r\n\r\n      places = Math.pow(10, places || 0);\r\n\r\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\r\n        return new Fraction(NaN);\r\n      }\r\n      return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\r\n    },\r\n\r\n    /**\r\n     * Calculates the floor of a rational number\r\n     *\r\n     * Ex: new Fraction('4.(3)').floor() => (4 / 1)\r\n     **/\r\n    \"floor\": function(places) {\r\n\r\n      places = Math.pow(10, places || 0);\r\n\r\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\r\n        return new Fraction(NaN);\r\n      }\r\n      return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\r\n    },\r\n\r\n    /**\r\n     * Rounds a rational numbers\r\n     *\r\n     * Ex: new Fraction('4.(3)').round() => (4 / 1)\r\n     **/\r\n    \"round\": function(places) {\r\n\r\n      places = Math.pow(10, places || 0);\r\n\r\n      if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\r\n        return new Fraction(NaN);\r\n      }\r\n      return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\r\n    },\r\n\r\n    /**\r\n     * Gets the inverse of the fraction, means numerator and denominator are exchanged\r\n     *\r\n     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\r\n     **/\r\n    \"inverse\": function() {\r\n\r\n      return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\r\n    },\r\n\r\n    /**\r\n     * Calculates the fraction to some rational exponent, if possible\r\n     *\r\n     * Ex: new Fraction(-1,2).pow(-3) => -8\r\n     */\r\n    \"pow\": function(a, b) {\r\n\r\n      parse(a, b);\r\n\r\n      // Trivial case when exp is an integer\r\n\r\n      if (P['d'] === 1) {\r\n\r\n        if (P['s'] < 0) {\r\n          return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\r\n        } else {\r\n          return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\r\n        }\r\n      }\r\n\r\n      // Negative roots become complex\r\n      //     (-a/b)^(c/d) = x\r\n      // <=> (-1)^(c/d) * (a/b)^(c/d) = x\r\n      // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°\r\n      // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\r\n      // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\r\n      if (this['s'] < 0) return null;\r\n\r\n      // Now prime factor n and d\r\n      var N = factorize(this['n']);\r\n      var D = factorize(this['d']);\r\n\r\n      // Exponentiate and take root for n and d individually\r\n      var n = 1;\r\n      var d = 1;\r\n      for (var k in N) {\r\n        if (k === '1') continue;\r\n        if (k === '0') {\r\n          n = 0;\r\n          break;\r\n        }\r\n        N[k]*= P['n'];\r\n\r\n        if (N[k] % P['d'] === 0) {\r\n          N[k]/= P['d'];\r\n        } else return null;\r\n        n*= Math.pow(k, N[k]);\r\n      }\r\n\r\n      for (var k in D) {\r\n        if (k === '1') continue;\r\n        D[k]*= P['n'];\r\n\r\n        if (D[k] % P['d'] === 0) {\r\n          D[k]/= P['d'];\r\n        } else return null;\r\n        d*= Math.pow(k, D[k]);\r\n      }\r\n\r\n      if (P['s'] < 0) {\r\n        return newFraction(d, n);\r\n      }\r\n      return newFraction(n, d);\r\n    },\r\n\r\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\r\n    \"equals\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\r\n    },\r\n\r\n    /**\r\n     * Check if two rational numbers are the same\r\n     *\r\n     * Ex: new Fraction(19.6).equals([98, 5]);\r\n     **/\r\n    \"compare\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\r\n      return (0 < t) - (t < 0);\r\n    },\r\n\r\n    \"simplify\": function(eps) {\r\n\r\n      if (isNaN(this['n']) || isNaN(this['d'])) {\r\n        return this;\r\n      }\r\n\r\n      eps = eps || 0.001;\r\n\r\n      var thisABS = this['abs']();\r\n      var cont = thisABS['toContinued']();\r\n\r\n      for (var i = 1; i < cont.length; i++) {\r\n\r\n        var s = newFraction(cont[i - 1], 1);\r\n        for (var k = i - 2; k >= 0; k--) {\r\n          s = s['inverse']()['add'](cont[k]);\r\n        }\r\n\r\n        if (s['sub'](thisABS)['abs']().valueOf() < eps) {\r\n          return s['mul'](this['s']);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Check if two rational numbers are divisible\r\n     *\r\n     * Ex: new Fraction(19.6).divisible(1.5);\r\n     */\r\n    \"divisible\": function(a, b) {\r\n\r\n      parse(a, b);\r\n      return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\r\n    },\r\n\r\n    /**\r\n     * Returns a decimal representation of the fraction\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\r\n     **/\r\n    'valueOf': function() {\r\n\r\n      return this[\"s\"] * this[\"n\"] / this[\"d\"];\r\n    },\r\n\r\n    /**\r\n     * Returns a string-fraction representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\r\n     **/\r\n    'toFraction': function(excludeWhole) {\r\n\r\n      var whole, str = \"\";\r\n      var n = this[\"n\"];\r\n      var d = this[\"d\"];\r\n      if (this[\"s\"] < 0) {\r\n        str+= '-';\r\n      }\r\n\r\n      if (d === 1) {\r\n        str+= n;\r\n      } else {\r\n\r\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\r\n          str+= whole;\r\n          str+= \" \";\r\n          n%= d;\r\n        }\r\n\r\n        str+= n;\r\n        str+= '/';\r\n        str+= d;\r\n      }\r\n      return str;\r\n    },\r\n\r\n    /**\r\n     * Returns a latex representation of a Fraction object\r\n     *\r\n     * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\r\n     **/\r\n    'toLatex': function(excludeWhole) {\r\n\r\n      var whole, str = \"\";\r\n      var n = this[\"n\"];\r\n      var d = this[\"d\"];\r\n      if (this[\"s\"] < 0) {\r\n        str+= '-';\r\n      }\r\n\r\n      if (d === 1) {\r\n        str+= n;\r\n      } else {\r\n\r\n        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\r\n          str+= whole;\r\n          n%= d;\r\n        }\r\n\r\n        str+= \"\\\\frac{\";\r\n        str+= n;\r\n        str+= '}{';\r\n        str+= d;\r\n        str+= '}';\r\n      }\r\n      return str;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of continued fraction elements\r\n     *\r\n     * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\r\n     */\r\n    'toContinued': function() {\r\n\r\n      var t;\r\n      var a = this['n'];\r\n      var b = this['d'];\r\n      var res = [];\r\n\r\n      if (isNaN(a) || isNaN(b)) {\r\n        return res;\r\n      }\r\n\r\n      do {\r\n        res.push(Math.floor(a / b));\r\n        t = a % b;\r\n        a = b;\r\n        b = t;\r\n      } while (a !== 1);\r\n\r\n      return res;\r\n    },\r\n\r\n    /**\r\n     * Creates a string representation of a fraction with all digits\r\n     *\r\n     * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\r\n     **/\r\n    'toString': function(dec) {\r\n\r\n      var N = this[\"n\"];\r\n      var D = this[\"d\"];\r\n\r\n      if (isNaN(N) || isNaN(D)) {\r\n        return \"NaN\";\r\n      }\r\n\r\n      dec = dec || 15; // 15 = decimal places when no repetation\r\n\r\n      var cycLen = cycleLen(N, D); // Cycle length\r\n      var cycOff = cycleStart(N, D, cycLen); // Cycle start\r\n\r\n      var str = this['s'] < 0 ? \"-\" : \"\";\r\n\r\n      str+= N / D | 0;\r\n\r\n      N%= D;\r\n      N*= 10;\r\n\r\n      if (N)\r\n        str+= \".\";\r\n\r\n      if (cycLen) {\r\n\r\n        for (var i = cycOff; i--;) {\r\n          str+= N / D | 0;\r\n          N%= D;\r\n          N*= 10;\r\n        }\r\n        str+= \"(\";\r\n        for (var i = cycLen; i--;) {\r\n          str+= N / D | 0;\r\n          N%= D;\r\n          N*= 10;\r\n        }\r\n        str+= \")\";\r\n      } else {\r\n        for (var i = dec; N && i--;) {\r\n          str+= N / D | 0;\r\n          N%= D;\r\n          N*= 10;\r\n        }\r\n      }\r\n      return str;\r\n    }\r\n  };\r\n\r\n  if (typeof define === \"function\" && define[\"amd\"]) {\r\n    define([], function() {\r\n      return Fraction;\r\n    });\r\n  } else if (typeof exports === \"object\") {\r\n    Object.defineProperty(Fraction, \"__esModule\", { 'value': true });\r\n    Fraction['default'] = Fraction;\r\n    Fraction['Fraction'] = Fraction;\r\n    module['exports'] = Fraction;\r\n  } else {\r\n    root['Fraction'] = Fraction;\r\n  }\r\n\r\n})(this);\r\n"]},"metadata":{},"sourceType":"script"}