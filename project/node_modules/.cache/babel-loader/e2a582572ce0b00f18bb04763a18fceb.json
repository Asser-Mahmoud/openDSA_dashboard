{"ast":null,"code":"import { setSafeProperty, hasSafeProperty, getSafeProperty } from './customs.js';\nimport { isObject } from './is.js';\n/**\r\n * A map facade on a bare object.\r\n *\r\n * The small number of methods needed to implement a scope,\r\n * forwarding on to the SafeProperty functions. Over time, the codebase\r\n * will stop using this method, as all objects will be Maps, rather than\r\n * more security prone objects.\r\n */\n\nexport class ObjectWrappingMap {\n  constructor(object) {\n    this.wrappedObject = object;\n  }\n\n  keys() {\n    return Object.keys(this.wrappedObject);\n  }\n\n  get(key) {\n    return getSafeProperty(this.wrappedObject, key);\n  }\n\n  set(key, value) {\n    setSafeProperty(this.wrappedObject, key, value);\n    return this;\n  }\n\n  has(key) {\n    return hasSafeProperty(this.wrappedObject, key);\n  }\n\n}\n/**\r\n * Creates an empty map, or whatever your platform's polyfill is.\r\n *\r\n * @returns an empty Map or Map like object.\r\n */\n\nexport function createEmptyMap() {\n  return new Map();\n}\n/**\r\n * Creates a Map from the given object.\r\n *\r\n * @param { Map | { [key: string]: unknown } | undefined } mapOrObject\r\n * @returns\r\n */\n\nexport function createMap(mapOrObject) {\n  if (!mapOrObject) {\n    return createEmptyMap();\n  }\n\n  if (isMap(mapOrObject)) {\n    return mapOrObject;\n  }\n\n  if (isObject(mapOrObject)) {\n    return new ObjectWrappingMap(mapOrObject);\n  }\n\n  throw new Error('createMap can create maps from objects or Maps');\n}\n/**\r\n * Unwraps a map into an object.\r\n *\r\n * @param {Map} map\r\n * @returns { [key: string]: unknown }\r\n */\n\nexport function toObject(map) {\n  if (map instanceof ObjectWrappingMap) {\n    return map.wrappedObject;\n  }\n\n  var object = {};\n\n  for (var key of map.keys()) {\n    var value = map.get(key);\n    setSafeProperty(object, key, value);\n  }\n\n  return object;\n}\n/**\r\n * Returns `true` if the passed object appears to be a Map (i.e. duck typing).\r\n *\r\n * Methods looked for are `get`, `set`, `keys` and `has`.\r\n *\r\n * @param {Map | object} object\r\n * @returns\r\n */\n\nexport function isMap(object) {\n  // We can use the fast instanceof, or a slower duck typing check.\n  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.\n  if (!object) {\n    return false;\n  }\n\n  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';\n}\n/**\r\n * Copies the contents of key-value pairs from each `objects` in to `map`.\r\n *\r\n * Object is `objects` can be a `Map` or object.\r\n *\r\n * This is the `Map` analog to `Object.assign`.\r\n */\n\nexport function assign(map) {\n  for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    objects[_key - 1] = arguments[_key];\n  }\n\n  for (var args of objects) {\n    if (!args) {\n      continue;\n    }\n\n    if (isMap(args)) {\n      for (var key of args.keys()) {\n        map.set(key, args.get(key));\n      }\n    } else if (isObject(args)) {\n      for (var _key2 of Object.keys(args)) {\n        map.set(_key2, args[_key2]);\n      }\n    }\n  }\n\n  return map;\n}","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/utils/map.js"],"names":["setSafeProperty","hasSafeProperty","getSafeProperty","isObject","ObjectWrappingMap","constructor","object","wrappedObject","keys","Object","get","key","set","value","has","createEmptyMap","Map","createMap","mapOrObject","isMap","Error","toObject","map","assign","_len","arguments","length","objects","Array","_key","args","_key2"],"mappings":"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","sourcesContent":["import { setSafeProperty, hasSafeProperty, getSafeProperty } from './customs.js';\r\nimport { isObject } from './is.js';\r\n\r\n/**\r\n * A map facade on a bare object.\r\n *\r\n * The small number of methods needed to implement a scope,\r\n * forwarding on to the SafeProperty functions. Over time, the codebase\r\n * will stop using this method, as all objects will be Maps, rather than\r\n * more security prone objects.\r\n */\r\nexport class ObjectWrappingMap {\r\n  constructor(object) {\r\n    this.wrappedObject = object;\r\n  }\r\n  keys() {\r\n    return Object.keys(this.wrappedObject);\r\n  }\r\n  get(key) {\r\n    return getSafeProperty(this.wrappedObject, key);\r\n  }\r\n  set(key, value) {\r\n    setSafeProperty(this.wrappedObject, key, value);\r\n    return this;\r\n  }\r\n  has(key) {\r\n    return hasSafeProperty(this.wrappedObject, key);\r\n  }\r\n}\r\n\r\n/**\r\n * Creates an empty map, or whatever your platform's polyfill is.\r\n *\r\n * @returns an empty Map or Map like object.\r\n */\r\nexport function createEmptyMap() {\r\n  return new Map();\r\n}\r\n\r\n/**\r\n * Creates a Map from the given object.\r\n *\r\n * @param { Map | { [key: string]: unknown } | undefined } mapOrObject\r\n * @returns\r\n */\r\nexport function createMap(mapOrObject) {\r\n  if (!mapOrObject) {\r\n    return createEmptyMap();\r\n  }\r\n  if (isMap(mapOrObject)) {\r\n    return mapOrObject;\r\n  }\r\n  if (isObject(mapOrObject)) {\r\n    return new ObjectWrappingMap(mapOrObject);\r\n  }\r\n  throw new Error('createMap can create maps from objects or Maps');\r\n}\r\n\r\n/**\r\n * Unwraps a map into an object.\r\n *\r\n * @param {Map} map\r\n * @returns { [key: string]: unknown }\r\n */\r\nexport function toObject(map) {\r\n  if (map instanceof ObjectWrappingMap) {\r\n    return map.wrappedObject;\r\n  }\r\n  var object = {};\r\n  for (var key of map.keys()) {\r\n    var value = map.get(key);\r\n    setSafeProperty(object, key, value);\r\n  }\r\n  return object;\r\n}\r\n\r\n/**\r\n * Returns `true` if the passed object appears to be a Map (i.e. duck typing).\r\n *\r\n * Methods looked for are `get`, `set`, `keys` and `has`.\r\n *\r\n * @param {Map | object} object\r\n * @returns\r\n */\r\nexport function isMap(object) {\r\n  // We can use the fast instanceof, or a slower duck typing check.\r\n  // The duck typing method needs to cover enough methods to not be confused with DenseMatrix.\r\n  if (!object) {\r\n    return false;\r\n  }\r\n  return object instanceof Map || object instanceof ObjectWrappingMap || typeof object.set === 'function' && typeof object.get === 'function' && typeof object.keys === 'function' && typeof object.has === 'function';\r\n}\r\n\r\n/**\r\n * Copies the contents of key-value pairs from each `objects` in to `map`.\r\n *\r\n * Object is `objects` can be a `Map` or object.\r\n *\r\n * This is the `Map` analog to `Object.assign`.\r\n */\r\nexport function assign(map) {\r\n  for (var _len = arguments.length, objects = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    objects[_key - 1] = arguments[_key];\r\n  }\r\n  for (var args of objects) {\r\n    if (!args) {\r\n      continue;\r\n    }\r\n    if (isMap(args)) {\r\n      for (var key of args.keys()) {\r\n        map.set(key, args.get(key));\r\n      }\r\n    } else if (isObject(args)) {\r\n      for (var _key2 of Object.keys(args)) {\r\n        map.set(_key2, args[_key2]);\r\n      }\r\n    }\r\n  }\r\n  return map;\r\n}"]},"metadata":{},"sourceType":"module"}