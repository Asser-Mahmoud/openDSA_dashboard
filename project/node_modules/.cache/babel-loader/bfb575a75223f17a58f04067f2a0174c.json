{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExercisePlot = () => {\n  _s();\n\n  const [selectedExercise, setSelectedExercise] = useState('');\n  const [plotData, setPlotData] = useState({\n    icc: {},\n    tcc: {}\n  });\n  useEffect(() => {\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\n\n    axios.post(`http://localhost:4000/estimate/${data}`).then(response => {\n      var _response$data$Abilit, _response$data$Discri, _response$data$Diffic;\n\n      const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n      const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : []; // use the first element for all items\n\n      const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n      console.log(x, a[0], b[0]);\n\n      const sigmoid = (x, a, b) => {\n        const denominator = 1 + Math.exp(-a * (x - b));\n        return denominator === 0 ? NaN : 1 / denominator;\n      };\n\n      const y = x.map(val => sigmoid(val, a[18], b[18]));\n      console.log(y);\n      const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n      const sortedX = sortedData.map(pair => pair[0]);\n      const sortedY = sortedData.map(pair => pair[1]); // Calculate mean discrimination and difficulty for all exercises\n\n      const meanA = math.mean(response.data.Discrimination);\n      const meanB = math.mean(response.data.Difficulty); // Calculate item response probabilities for a range of ability values\n\n      const minAbility = Math.min(...response.data.Ability);\n      const maxAbility = Math.max(...response.data.Ability);\n      const range = maxAbility - minAbility;\n      const step = range / 100;\n      const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n      const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB)); // Plot the test characteristic curve\n\n      setPlotData({\n        icc: { ...plotData.icc,\n          [selectedExercise]: {\n            x: sortedX,\n            y: sortedY\n          }\n        },\n        tcc: { ...plotData.tcc,\n          [selectedExercise]: {\n            x: abilityValues,\n            y: y2\n          }\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  }, [selectedExercise]);\n  const exerciseOptions = ['Exercise 1', 'Exercise 2', 'Exercise 3']; // Replace with your exercise options\n\n  const handleExerciseChange = event => {\n    setSelectedExercise(event.target.value);\n  };\n\n  const plotOptions = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Ability'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Probability'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exercise Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedExercise,\n      onChange: handleExerciseChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an exercise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), exerciseOptions.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: exercise,\n        children: exercise\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), selectedExercise && plotData.icc[selectedExercise] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item Characteristic Curve (ICC) - \", selectedExercise]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: plotData.icc[selectedExercise].x,\n          datasets: [{\n            label: 'ICC',\n            data: plotData.icc[selectedExercise].y,\n            borderColor: 'blue',\n            fill: false\n          }]\n        },\n        options: plotOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), selectedExercise && plotData.tcc[selectedExercise] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Test Characteristic Curve (TCC) - \", selectedExercise]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: plotData.tcc[selectedExercise].x,\n          datasets: [{\n            label: 'TCC',\n            data: plotData.tcc[selectedExercise].y,\n            borderColor: 'green',\n            fill: false\n          }]\n        },\n        options: plotOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExercisePlot, \"jeKIdxPweKMilCev9pravVa3/z4=\");\n\n_c = ExercisePlot;\nexport default ExercisePlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExercisePlot\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","useEffect","axios","Line","ExercisePlot","selectedExercise","setSelectedExercise","plotData","setPlotData","icc","tcc","data","post","then","response","x","Ability","a","Discrimination","b","Difficulty","console","log","sigmoid","denominator","Math","exp","NaN","y","map","val","sortedData","value","index","sort","sortedX","pair","sortedY","meanA","math","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","catch","error","exerciseOptions","handleExerciseChange","event","target","plotOptions","scales","title","display","text","exercise","labels","datasets","label","borderColor","fill"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst ExercisePlot = () => {\r\n  const [selectedExercise, setSelectedExercise] = useState('');\r\n  const [plotData, setPlotData] = useState({ icc: {}, tcc: {} });\r\n\r\n  useEffect(() => {\r\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\r\n    axios\r\n      .post(`http://localhost:4000/estimate/${data}`)\r\n      .then((response) => {\r\n        const x = response.data.Ability ?? [];\r\n        const a = response.data.Discrimination ?? []; // use the first element for all items\r\n        const b = response.data.Difficulty ?? [];\r\n        console.log(x, a[0], b[0]);\r\n        const sigmoid = (x, a, b) => {\r\n          const denominator = 1 + Math.exp(-a * (x - b));\r\n          return denominator === 0 ? NaN : 1 / denominator;\r\n        };\r\n        const y = x.map((val) => sigmoid(val, a[18], b[18]));\r\n        console.log(y);\r\n        const sortedData = x\r\n          .map((value, index) => [value, y[index]])\r\n          .sort((a, b) => a[0] - b[0]);\r\n        const sortedX = sortedData.map((pair) => pair[0]);\r\n        const sortedY = sortedData.map((pair) => pair[1]);\r\n        // Calculate mean discrimination and difficulty for all exercises\r\n        const meanA = math.mean(response.data.Discrimination);\r\n        const meanB = math.mean(response.data.Difficulty);\r\n\r\n        // Calculate item response probabilities for a range of ability values\r\n        const minAbility = Math.min(...response.data.Ability);\r\n        const maxAbility = Math.max(...response.data.Ability);\r\n        const range = maxAbility - minAbility;\r\n        const step = range / 100;\r\n        const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n        const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n        // Plot the test characteristic curve\r\n        setPlotData({\r\n          icc: { ...plotData.icc, [selectedExercise]: { x: sortedX, y: sortedY } },\r\n          tcc: { ...plotData.tcc, [selectedExercise]: { x: abilityValues, y: y2 } },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [selectedExercise]);\r\n\r\n  const exerciseOptions = ['Exercise 1', 'Exercise 2', 'Exercise 3']; // Replace with your exercise options\r\n\r\n  const handleExerciseChange = (event) => {\r\n    setSelectedExercise(event.target.value);\r\n  };\r\n\r\n  const plotOptions = {\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Ability',\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Probability',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Exercise Plot</h2>\r\n      <select value={selectedExercise} onChange={handleExerciseChange}>\r\n        <option value=\"\">Select an exercise</option>\r\n        {exerciseOptions.map((exercise, index) => (\r\n          <option key={index} value={exercise}>\r\n            {exercise}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {selectedExercise && plotData.icc[selectedExercise] && (\r\n        <div>\r\n          <h3>Item Characteristic Curve (ICC) - {selectedExercise}</h3>\r\n          <Line\r\n            data={{\r\n              labels: plotData.icc[selectedExercise].x,\r\n              datasets: [\r\n                {\r\n                  label: 'ICC',\r\n                  data: plotData.icc[selectedExercise].y,\r\n                  borderColor: 'blue',\r\n                  fill: false,\r\n                },\r\n              ],\r\n            }}\r\n            options={plotOptions}\r\n          />\r\n        </div>\r\n      )}\r\n      {selectedExercise && plotData.tcc[selectedExercise] && (\r\n        <div>\r\n          <h3>Test Characteristic Curve (TCC) - {selectedExercise}</h3>\r\n          <Line\r\n            data={{\r\n              labels: plotData.tcc[selectedExercise].x,\r\n              datasets: [\r\n                {\r\n                  label: 'TCC',\r\n                  data: plotData.tcc[selectedExercise].y,\r\n                  borderColor: 'green',\r\n                  fill: false,\r\n                },\r\n              ],\r\n            }}\r\n            options={plotOptions}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExercisePlot;\r\n"]},"metadata":{},"sourceType":"module"}