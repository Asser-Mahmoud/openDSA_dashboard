{"ast":null,"code":"/**\r\n * Writes data in BigEndian order.\r\n */\nvar BigEndianWriter =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\r\n   * Creates a new writer.\r\n   */\n  function BigEndianWriter(capacity) {\n    //Constants\n\n    /**\r\n     * Size of Int32 type.\r\n     */\n    this.int32Size = 4;\n    /**\r\n     * Size of Int16 type.\r\n     */\n\n    this.int16Size = 2;\n    /**\r\n     * Size of long type.\r\n     */\n\n    this.int64Size = 8;\n    this.bufferLength = capacity;\n    this.buffer = [];\n  }\n\n  Object.defineProperty(BigEndianWriter.prototype, \"data\", {\n    //Properties\n\n    /**\r\n     * Gets data written to the writer.\r\n     */\n    get: function () {\n      if (this.buffer.length < this.bufferLength) {\n        var length_1 = this.bufferLength - this.buffer.length;\n\n        for (var i = 0; i < length_1; i++) {\n          this.buffer.push(0);\n        }\n      }\n\n      return this.buffer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BigEndianWriter.prototype, \"position\", {\n    /// <summary>\n    /// Gets position of the internal buffer.\n    /// </summary>\n    get: function () {\n      if (this.internalPosition === undefined || this.internalPosition === null) {\n        this.internalPosition = 0;\n      }\n\n      return this.internalPosition;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Writes short value.\r\n   */\n\n  BigEndianWriter.prototype.writeShort = function (value) {\n    var bytes = [(value & 0x0000ff00) >> 8, value & 0x000000ff];\n    this.flush(bytes);\n  };\n  /**\r\n   * Writes int value.\r\n   */\n\n\n  BigEndianWriter.prototype.writeInt = function (value) {\n    var i1 = (value & 0xff000000) >> 24;\n    i1 = i1 < 0 ? 256 + i1 : i1;\n    var i2 = (value & 0x00ff0000) >> 16;\n    i2 = i2 < 0 ? 256 + i2 : i2;\n    var i3 = (value & 0x0000ff00) >> 8;\n    i3 = i3 < 0 ? 256 + i3 : i3;\n    var i4 = value & 0x000000ff;\n    i4 = i4 < 0 ? 256 + i4 : i4;\n    var bytes = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\n    this.flush(bytes);\n  };\n  /**\r\n   * Writes u int value.\r\n   */\n\n\n  BigEndianWriter.prototype.writeUInt = function (value) {\n    var buff = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\n    this.flush(buff);\n  };\n  /**\r\n   * Writes string value.\r\n   */\n\n\n  BigEndianWriter.prototype.writeString = function (value) {\n    if (value == null) {\n      throw new Error('Argument Null Exception : value');\n    }\n\n    var bytes = [];\n\n    for (var i = 0; i < value.length; i++) {\n      bytes.push(value.charCodeAt(i));\n    }\n\n    this.flush(bytes);\n  };\n  /**\r\n   * Writes byte[] value.\r\n   */\n\n\n  BigEndianWriter.prototype.writeBytes = function (value) {\n    this.flush(value);\n  }; // //Implementation\n\n\n  BigEndianWriter.prototype.flush = function (buff) {\n    if (buff === null) {\n      throw new Error('Argument Null Exception : buff');\n    }\n\n    var position = this.position;\n\n    for (var i = 0; i < buff.length; i++) {\n      this.buffer[position] = buff[i];\n      position++;\n    }\n\n    this.internalPosition += buff.length;\n  };\n\n  return BigEndianWriter;\n}();\n\nexport { BigEndianWriter };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-pdf-export/src/implementation/input-output/big-endian-writer.js"],"names":["BigEndianWriter","capacity","int32Size","int16Size","int64Size","bufferLength","buffer","Object","defineProperty","prototype","get","length","length_1","i","push","enumerable","configurable","internalPosition","undefined","writeShort","value","bytes","flush","writeInt","i1","i2","i3","i4","writeUInt","buff","writeString","Error","charCodeAt","writeBytes","position"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,eAAe;AAAG;AAAe,YAAY;AAC7C;;AACA;AACJ;AACA;AACI,WAASA,eAAT,CAAyBC,QAAzB,EAAmC;AAC/B;;AACA;AACR;AACA;AACQ,SAAKC,SAAL,GAAiB,CAAjB;AACA;AACR;AACA;;AACQ,SAAKC,SAAL,GAAiB,CAAjB;AACA;AACR;AACA;;AACQ,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,YAAL,GAAoBJ,QAApB;AACA,SAAKK,MAAL,GAAc,EAAd;AACH;;AACDC,EAAAA,MAAM,CAACC,cAAP,CAAsBR,eAAe,CAACS,SAAtC,EAAiD,MAAjD,EAAyD;AACrD;;AACA;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,KAAKJ,MAAL,CAAYK,MAAZ,GAAqB,KAAKN,YAA9B,EAA4C;AACxC,YAAIO,QAAQ,GAAG,KAAKP,YAAL,GAAoB,KAAKC,MAAL,CAAYK,MAA/C;;AACA,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;AAC/B,eAAKP,MAAL,CAAYQ,IAAZ,CAAiB,CAAjB;AACH;AACJ;;AACD,aAAO,KAAKR,MAAZ;AACH,KAboD;AAcrDS,IAAAA,UAAU,EAAE,IAdyC;AAerDC,IAAAA,YAAY,EAAE;AAfuC,GAAzD;AAiBAT,EAAAA,MAAM,CAACC,cAAP,CAAsBR,eAAe,CAACS,SAAtC,EAAiD,UAAjD,EAA6D;AACzD;AACA;AACA;AACAC,IAAAA,GAAG,EAAE,YAAY;AACb,UAAI,KAAKO,gBAAL,KAA0BC,SAA1B,IAAuC,KAAKD,gBAAL,KAA0B,IAArE,EAA2E;AACvE,aAAKA,gBAAL,GAAwB,CAAxB;AACH;;AACD,aAAO,KAAKA,gBAAZ;AACH,KATwD;AAUzDF,IAAAA,UAAU,EAAE,IAV6C;AAWzDC,IAAAA,YAAY,EAAE;AAX2C,GAA7D;AAaA;AACJ;AACA;;AACIhB,EAAAA,eAAe,CAACS,SAAhB,CAA0BU,UAA1B,GAAuC,UAAUC,KAAV,EAAiB;AACpD,QAAIC,KAAK,GAAG,CAAE,CAACD,KAAK,GAAG,UAAT,KAAwB,CAA1B,EAA8BA,KAAK,GAAG,UAAtC,CAAZ;AACA,SAAKE,KAAL,CAAWD,KAAX;AACH,GAHD;AAIA;AACJ;AACA;;;AACIrB,EAAAA,eAAe,CAACS,SAAhB,CAA0Bc,QAA1B,GAAqC,UAAUH,KAAV,EAAiB;AAClD,QAAII,EAAE,GAAG,CAACJ,KAAK,GAAG,UAAT,KAAwB,EAAjC;AACAI,IAAAA,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,MAAMA,EAAf,GAAoBA,EAAzB;AACA,QAAIC,EAAE,GAAG,CAACL,KAAK,GAAG,UAAT,KAAwB,EAAjC;AACAK,IAAAA,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,MAAMA,EAAf,GAAoBA,EAAzB;AACA,QAAIC,EAAE,GAAG,CAACN,KAAK,GAAG,UAAT,KAAwB,CAAjC;AACAM,IAAAA,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,MAAMA,EAAf,GAAoBA,EAAzB;AACA,QAAIC,EAAE,GAAGP,KAAK,GAAG,UAAjB;AACAO,IAAAA,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,MAAMA,EAAf,GAAoBA,EAAzB;AACA,QAAIN,KAAK,GAAG,CAAC,CAACD,KAAK,GAAG,UAAT,KAAwB,EAAzB,EAA6B,CAACA,KAAK,GAAG,UAAT,KAAwB,EAArD,EAAyD,CAACA,KAAK,GAAG,UAAT,KAAwB,CAAjF,EAAoFA,KAAK,GAAG,UAA5F,CAAZ;AACA,SAAKE,KAAL,CAAWD,KAAX;AACH,GAXD;AAYA;AACJ;AACA;;;AACIrB,EAAAA,eAAe,CAACS,SAAhB,CAA0BmB,SAA1B,GAAsC,UAAUR,KAAV,EAAiB;AACnD,QAAIS,IAAI,GAAG,CAAC,CAACT,KAAK,GAAG,UAAT,KAAwB,EAAzB,EAA6B,CAACA,KAAK,GAAG,UAAT,KAAwB,EAArD,EAAyD,CAACA,KAAK,GAAG,UAAT,KAAwB,CAAjF,EAAoFA,KAAK,GAAG,UAA5F,CAAX;AACA,SAAKE,KAAL,CAAWO,IAAX;AACH,GAHD;AAIA;AACJ;AACA;;;AACI7B,EAAAA,eAAe,CAACS,SAAhB,CAA0BqB,WAA1B,GAAwC,UAAUV,KAAV,EAAiB;AACrD,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,YAAM,IAAIW,KAAJ,CAAU,iCAAV,CAAN;AACH;;AACD,QAAIV,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,KAAK,CAACT,MAA1B,EAAkCE,CAAC,EAAnC,EAAuC;AACnCQ,MAAAA,KAAK,CAACP,IAAN,CAAWM,KAAK,CAACY,UAAN,CAAiBnB,CAAjB,CAAX;AACH;;AACD,SAAKS,KAAL,CAAWD,KAAX;AACH,GATD;AAUA;AACJ;AACA;;;AACIrB,EAAAA,eAAe,CAACS,SAAhB,CAA0BwB,UAA1B,GAAuC,UAAUb,KAAV,EAAiB;AACpD,SAAKE,KAAL,CAAWF,KAAX;AACH,GAFD,CAjG6C,CAoG7C;;;AACApB,EAAAA,eAAe,CAACS,SAAhB,CAA0Ba,KAA1B,GAAkC,UAAUO,IAAV,EAAgB;AAC9C,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACf,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACH;;AACD,QAAIG,QAAQ,GAAG,KAAKA,QAApB;;AACA,SAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,IAAI,CAAClB,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;AAClC,WAAKP,MAAL,CAAY4B,QAAZ,IAAwBL,IAAI,CAAChB,CAAD,CAA5B;AACAqB,MAAAA,QAAQ;AACX;;AACD,SAAKjB,gBAAL,IAAyBY,IAAI,CAAClB,MAA9B;AACH,GAVD;;AAWA,SAAOX,eAAP;AACH,CAjHoC,EAArC;;AAkHA,SAASA,eAAT","sourcesContent":["/**\r\n * Writes data in BigEndian order.\r\n */\r\nvar BigEndianWriter = /** @class */ (function () {\r\n    //Constructors\r\n    /**\r\n     * Creates a new writer.\r\n     */\r\n    function BigEndianWriter(capacity) {\r\n        //Constants\r\n        /**\r\n         * Size of Int32 type.\r\n         */\r\n        this.int32Size = 4;\r\n        /**\r\n         * Size of Int16 type.\r\n         */\r\n        this.int16Size = 2;\r\n        /**\r\n         * Size of long type.\r\n         */\r\n        this.int64Size = 8;\r\n        this.bufferLength = capacity;\r\n        this.buffer = [];\r\n    }\r\n    Object.defineProperty(BigEndianWriter.prototype, \"data\", {\r\n        //Properties\r\n        /**\r\n         * Gets data written to the writer.\r\n         */\r\n        get: function () {\r\n            if (this.buffer.length < this.bufferLength) {\r\n                var length_1 = this.bufferLength - this.buffer.length;\r\n                for (var i = 0; i < length_1; i++) {\r\n                    this.buffer.push(0);\r\n                }\r\n            }\r\n            return this.buffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BigEndianWriter.prototype, \"position\", {\r\n        /// <summary>\r\n        /// Gets position of the internal buffer.\r\n        /// </summary>\r\n        get: function () {\r\n            if (this.internalPosition === undefined || this.internalPosition === null) {\r\n                this.internalPosition = 0;\r\n            }\r\n            return this.internalPosition;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Writes short value.\r\n     */\r\n    BigEndianWriter.prototype.writeShort = function (value) {\r\n        var bytes = [((value & 0x0000ff00) >> 8), value & 0x000000ff];\r\n        this.flush(bytes);\r\n    };\r\n    /**\r\n     * Writes int value.\r\n     */\r\n    BigEndianWriter.prototype.writeInt = function (value) {\r\n        var i1 = (value & 0xff000000) >> 24;\r\n        i1 = i1 < 0 ? 256 + i1 : i1;\r\n        var i2 = (value & 0x00ff0000) >> 16;\r\n        i2 = i2 < 0 ? 256 + i2 : i2;\r\n        var i3 = (value & 0x0000ff00) >> 8;\r\n        i3 = i3 < 0 ? 256 + i3 : i3;\r\n        var i4 = value & 0x000000ff;\r\n        i4 = i4 < 0 ? 256 + i4 : i4;\r\n        var bytes = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\r\n        this.flush(bytes);\r\n    };\r\n    /**\r\n     * Writes u int value.\r\n     */\r\n    BigEndianWriter.prototype.writeUInt = function (value) {\r\n        var buff = [(value & 0xff000000) >> 24, (value & 0x00ff0000) >> 16, (value & 0x0000ff00) >> 8, value & 0x000000ff];\r\n        this.flush(buff);\r\n    };\r\n    /**\r\n     * Writes string value.\r\n     */\r\n    BigEndianWriter.prototype.writeString = function (value) {\r\n        if (value == null) {\r\n            throw new Error('Argument Null Exception : value');\r\n        }\r\n        var bytes = [];\r\n        for (var i = 0; i < value.length; i++) {\r\n            bytes.push(value.charCodeAt(i));\r\n        }\r\n        this.flush(bytes);\r\n    };\r\n    /**\r\n     * Writes byte[] value.\r\n     */\r\n    BigEndianWriter.prototype.writeBytes = function (value) {\r\n        this.flush(value);\r\n    };\r\n    // //Implementation\r\n    BigEndianWriter.prototype.flush = function (buff) {\r\n        if (buff === null) {\r\n            throw new Error('Argument Null Exception : buff');\r\n        }\r\n        var position = this.position;\r\n        for (var i = 0; i < buff.length; i++) {\r\n            this.buffer[position] = buff[i];\r\n            position++;\r\n        }\r\n        this.internalPosition += buff.length;\r\n    };\r\n    return BigEndianWriter;\r\n}());\r\nexport { BigEndianWriter };\r\n"]},"metadata":{},"sourceType":"module"}