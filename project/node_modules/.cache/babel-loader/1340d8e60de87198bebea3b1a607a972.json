{"ast":null,"code":"/**\r\n * PdfNumbersConvertor.ts class for EJ2-PDF\r\n * @private\r\n */\nimport { PdfNumberStyle } from './../../pages/enum';\n/**\r\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\r\n * @private\r\n */\n\nvar PdfNumbersConvertor =\n/** @class */\nfunction () {\n  function PdfNumbersConvertor() {} // Static methods\n\n  /**\r\n   * Convert string value from page number with correct format.\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.convert = function (intArabic, numberStyle) {\n    var result = '';\n\n    switch (numberStyle) {\n      case PdfNumberStyle.None:\n        result = '';\n        break;\n\n      case PdfNumberStyle.Numeric:\n        result = intArabic.toString();\n        break;\n\n      case PdfNumberStyle.LowerLatin:\n        result = this.arabicToLetter(intArabic).toLowerCase();\n        break;\n\n      case PdfNumberStyle.LowerRoman:\n        result = this.arabicToRoman(intArabic).toLowerCase();\n        break;\n\n      case PdfNumberStyle.UpperLatin:\n        result = this.arabicToLetter(intArabic);\n        break;\n\n      case PdfNumberStyle.UpperRoman:\n        result = this.arabicToRoman(intArabic);\n        break;\n    }\n\n    return result;\n  };\n  /**\r\n   * Converts `arabic to roman` letters.\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.arabicToRoman = function (intArabic) {\n    var retval = '';\n    var retvalM = this.generateNumber(intArabic, 1000, 'M');\n    retval += retvalM.returnValue;\n    intArabic = retvalM.intArabic;\n    var retvalCM = this.generateNumber(intArabic, 900, 'CM');\n    retval += retvalCM.returnValue;\n    intArabic = retvalCM.intArabic;\n    var retvalD = this.generateNumber(intArabic, 500, 'D');\n    retval += retvalD.returnValue;\n    intArabic = retvalD.intArabic;\n    var retvalCD = this.generateNumber(intArabic, 400, 'CD');\n    retval += retvalCD.returnValue;\n    intArabic = retvalCD.intArabic;\n    var retvalC = this.generateNumber(intArabic, 100, 'C');\n    retval += retvalC.returnValue;\n    intArabic = retvalC.intArabic;\n    var retvalXC = this.generateNumber(intArabic, 90, 'XC');\n    retval += retvalXC.returnValue;\n    intArabic = retvalXC.intArabic;\n    var retvalL = this.generateNumber(intArabic, 50, 'L');\n    retval += retvalL.returnValue;\n    intArabic = retvalL.intArabic;\n    var retvalXL = this.generateNumber(intArabic, 40, 'XL');\n    retval += retvalXL.returnValue;\n    intArabic = retvalXL.intArabic;\n    var retvalX = this.generateNumber(intArabic, 10, 'X');\n    retval += retvalX.returnValue;\n    intArabic = retvalX.intArabic;\n    var retvalIX = this.generateNumber(intArabic, 9, 'IX');\n    retval += retvalIX.returnValue;\n    intArabic = retvalIX.intArabic;\n    var retvalV = this.generateNumber(intArabic, 5, 'V');\n    retval += retvalV.returnValue;\n    intArabic = retvalV.intArabic;\n    var retvalIV = this.generateNumber(intArabic, 4, 'IV');\n    retval += retvalIV.returnValue;\n    intArabic = retvalIV.intArabic;\n    var retvalI = this.generateNumber(intArabic, 1, 'I');\n    retval += retvalI.returnValue;\n    intArabic = retvalI.intArabic;\n    return retval.toString();\n  };\n  /**\r\n   * Converts `arabic to normal letters`.\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.arabicToLetter = function (arabic) {\n    var stack = this.convertToLetter(arabic);\n    var result = '';\n\n    while (stack.length > 0) {\n      var num = stack.pop();\n      result = this.appendChar(result, num);\n    }\n\n    return result.toString();\n  };\n  /**\r\n   * Generate a string value of an input number.\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {\n    var numberstring = '';\n\n    while (value >= magnitude) {\n      value -= magnitude;\n      numberstring += letter;\n    }\n\n    return {\n      returnValue: numberstring.toString(),\n      intArabic: value\n    };\n  };\n  /**\r\n   * Convert a input number into letters.\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.convertToLetter = function (arabic) {\n    if (arabic <= 0) {\n      throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\n    }\n\n    var stack = [];\n\n    while (arabic > this.letterLimit) {\n      var remainder = arabic % this.letterLimit;\n\n      if (remainder === 0.0) {\n        arabic = arabic / this.letterLimit - 1;\n        remainder = this.letterLimit;\n      } else {\n        arabic /= this.letterLimit;\n      }\n\n      stack.push(remainder);\n    }\n\n    stack.push(arabic);\n    return stack;\n  };\n  /**\r\n   * Convert number to actual string value.\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.appendChar = function (builder, value) {\n    var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\n    builder += letter;\n    return builder;\n  }; // Fields\n\n  /**\r\n   * numbers of letters in english [readonly].\r\n   * @default = 26.0\r\n   * @private\r\n   */\n\n\n  PdfNumbersConvertor.letterLimit = 26.0;\n  /**\r\n   * Resturns `acsii start index` value.\r\n   * @default 64\r\n   * @private\r\n   */\n\n  PdfNumbersConvertor.acsiiStartIndex = 65 - 1;\n  return PdfNumbersConvertor;\n}();\n\nexport { PdfNumbersConvertor };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/automatic-fields/pdf-numbers-convertor.js"],"names":["PdfNumberStyle","PdfNumbersConvertor","convert","intArabic","numberStyle","result","None","Numeric","toString","LowerLatin","arabicToLetter","toLowerCase","LowerRoman","arabicToRoman","UpperLatin","UpperRoman","retval","retvalM","generateNumber","returnValue","retvalCM","retvalD","retvalCD","retvalC","retvalXC","retvalL","retvalXL","retvalX","retvalIX","retvalV","retvalIV","retvalI","arabic","stack","convertToLetter","length","num","pop","appendChar","value","magnitude","letter","numberstring","Error","letterLimit","remainder","push","builder","String","fromCharCode","acsiiStartIndex"],"mappings":"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","sourcesContent":["/**\r\n * PdfNumbersConvertor.ts class for EJ2-PDF\r\n * @private\r\n */\r\nimport { PdfNumberStyle } from './../../pages/enum';\r\n/**\r\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\r\n * @private\r\n */\r\nvar PdfNumbersConvertor = /** @class */ (function () {\r\n    function PdfNumbersConvertor() {\r\n    }\r\n    // Static methods\r\n    /**\r\n     * Convert string value from page number with correct format.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.convert = function (intArabic, numberStyle) {\r\n        var result = '';\r\n        switch (numberStyle) {\r\n            case PdfNumberStyle.None:\r\n                result = '';\r\n                break;\r\n            case PdfNumberStyle.Numeric:\r\n                result = intArabic.toString();\r\n                break;\r\n            case PdfNumberStyle.LowerLatin:\r\n                result = this.arabicToLetter(intArabic).toLowerCase();\r\n                break;\r\n            case PdfNumberStyle.LowerRoman:\r\n                result = this.arabicToRoman(intArabic).toLowerCase();\r\n                break;\r\n            case PdfNumberStyle.UpperLatin:\r\n                result = this.arabicToLetter(intArabic);\r\n                break;\r\n            case PdfNumberStyle.UpperRoman:\r\n                result = this.arabicToRoman(intArabic);\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Converts `arabic to roman` letters.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.arabicToRoman = function (intArabic) {\r\n        var retval = '';\r\n        var retvalM = this.generateNumber(intArabic, 1000, 'M');\r\n        retval += retvalM.returnValue;\r\n        intArabic = retvalM.intArabic;\r\n        var retvalCM = this.generateNumber(intArabic, 900, 'CM');\r\n        retval += retvalCM.returnValue;\r\n        intArabic = retvalCM.intArabic;\r\n        var retvalD = this.generateNumber(intArabic, 500, 'D');\r\n        retval += retvalD.returnValue;\r\n        intArabic = retvalD.intArabic;\r\n        var retvalCD = this.generateNumber(intArabic, 400, 'CD');\r\n        retval += retvalCD.returnValue;\r\n        intArabic = retvalCD.intArabic;\r\n        var retvalC = this.generateNumber(intArabic, 100, 'C');\r\n        retval += retvalC.returnValue;\r\n        intArabic = retvalC.intArabic;\r\n        var retvalXC = this.generateNumber(intArabic, 90, 'XC');\r\n        retval += retvalXC.returnValue;\r\n        intArabic = retvalXC.intArabic;\r\n        var retvalL = this.generateNumber(intArabic, 50, 'L');\r\n        retval += retvalL.returnValue;\r\n        intArabic = retvalL.intArabic;\r\n        var retvalXL = this.generateNumber(intArabic, 40, 'XL');\r\n        retval += retvalXL.returnValue;\r\n        intArabic = retvalXL.intArabic;\r\n        var retvalX = this.generateNumber(intArabic, 10, 'X');\r\n        retval += retvalX.returnValue;\r\n        intArabic = retvalX.intArabic;\r\n        var retvalIX = this.generateNumber(intArabic, 9, 'IX');\r\n        retval += retvalIX.returnValue;\r\n        intArabic = retvalIX.intArabic;\r\n        var retvalV = this.generateNumber(intArabic, 5, 'V');\r\n        retval += retvalV.returnValue;\r\n        intArabic = retvalV.intArabic;\r\n        var retvalIV = this.generateNumber(intArabic, 4, 'IV');\r\n        retval += retvalIV.returnValue;\r\n        intArabic = retvalIV.intArabic;\r\n        var retvalI = this.generateNumber(intArabic, 1, 'I');\r\n        retval += retvalI.returnValue;\r\n        intArabic = retvalI.intArabic;\r\n        return retval.toString();\r\n    };\r\n    /**\r\n     * Converts `arabic to normal letters`.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.arabicToLetter = function (arabic) {\r\n        var stack = this.convertToLetter(arabic);\r\n        var result = '';\r\n        while (stack.length > 0) {\r\n            var num = stack.pop();\r\n            result = this.appendChar(result, num);\r\n        }\r\n        return result.toString();\r\n    };\r\n    /**\r\n     * Generate a string value of an input number.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {\r\n        var numberstring = '';\r\n        while (value >= magnitude) {\r\n            value -= magnitude;\r\n            numberstring += letter;\r\n        }\r\n        return { returnValue: numberstring.toString(), intArabic: value };\r\n    };\r\n    /**\r\n     * Convert a input number into letters.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.convertToLetter = function (arabic) {\r\n        if (arabic <= 0) {\r\n            throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\r\n        }\r\n        var stack = [];\r\n        while (arabic > this.letterLimit) {\r\n            var remainder = arabic % this.letterLimit;\r\n            if (remainder === 0.0) {\r\n                arabic = arabic / this.letterLimit - 1;\r\n                remainder = this.letterLimit;\r\n            }\r\n            else {\r\n                arabic /= this.letterLimit;\r\n            }\r\n            stack.push(remainder);\r\n        }\r\n        stack.push(arabic);\r\n        return stack;\r\n    };\r\n    /**\r\n     * Convert number to actual string value.\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.appendChar = function (builder, value) {\r\n        var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\r\n        builder += letter;\r\n        return builder;\r\n    };\r\n    // Fields\r\n    /**\r\n     * numbers of letters in english [readonly].\r\n     * @default = 26.0\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.letterLimit = 26.0;\r\n    /**\r\n     * Resturns `acsii start index` value.\r\n     * @default 64\r\n     * @private\r\n     */\r\n    PdfNumbersConvertor.acsiiStartIndex = (65 - 1);\r\n    return PdfNumbersConvertor;\r\n}());\r\nexport { PdfNumbersConvertor };\r\n"]},"metadata":{},"sourceType":"module"}