{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { absNumber } from '../../plain/number/index.js';\nvar name = 'abs';\nvar dependencies = ['typed'];\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Calculate the absolute value of a number. For matrices, the function is\r\n   * evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.abs(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(3.5)                // returns number 3.5\r\n   *    math.abs(-4.2)               // returns number 4.2\r\n   *\r\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    sign\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            A number or matrix for which to get the absolute value\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\r\n   *            Absolute value of `x`\r\n   */\n\n  return typed(name, {\n    number: absNumber,\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\n    // deep map collection, skip zeros since abs(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\n  });\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/abs.js"],"names":["factory","deepMap","absNumber","name","dependencies","createAbs","_ref","typed","number","x","abs","referToSelf","self"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACxE,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,SADS;AAEjB,6CAAyCO,CAAC,IAAIA,CAAC,CAACC,GAAF,EAF7B;AAGjB;AACA,sBAAkBH,KAAK,CAACI,WAAN,CAAkBC,IAAI,IAAIH,CAAC,IAAIR,OAAO,CAACQ,CAAD,EAAIG,IAAJ,EAAU,IAAV,CAAtC;AAJD,GAAP,CAAZ;AAMD,CAlC4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { absNumber } from '../../plain/number/index.js';\r\nvar name = 'abs';\r\nvar dependencies = ['typed'];\r\nexport var createAbs = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Calculate the absolute value of a number. For matrices, the function is\r\n   * evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.abs(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.abs(3.5)                // returns number 3.5\r\n   *    math.abs(-4.2)               // returns number 4.2\r\n   *\r\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    sign\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\r\n   *            A number or matrix for which to get the absolute value\r\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\r\n   *            Absolute value of `x`\r\n   */\r\n  return typed(name, {\r\n    number: absNumber,\r\n    'Complex | BigNumber | Fraction | Unit': x => x.abs(),\r\n    // deep map collection, skip zeros since abs(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}