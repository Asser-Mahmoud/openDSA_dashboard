{"ast":null,"code":"/**\n * Module loading operations\n */\nimport { createInstance, setValue, getValue, deleteObject } from './util';\nvar MODULE_SUFFIX = 'Module';\n\nvar ModuleLoader =\n/** @class */\nfunction () {\n  function ModuleLoader(parent) {\n    this.loadedModules = [];\n    this.parent = parent;\n  }\n  /**\n   * Inject required modules in component library\n   *\n   * @returns {void} ?\n   * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\n   * @param {Function[]} moduleList - Array of modules to be injected from sample side\n   */\n\n\n  ModuleLoader.prototype.inject = function (requiredModules, moduleList) {\n    var reqLength = requiredModules.length;\n\n    if (reqLength === 0) {\n      this.clean();\n      return;\n    }\n\n    if (this.loadedModules.length) {\n      this.clearUnusedModule(requiredModules);\n    }\n\n    for (var i = 0; i < reqLength; i++) {\n      var modl = requiredModules[parseInt(i.toString(), 10)];\n\n      for (var _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {\n        var module = moduleList_1[_i];\n        var modName = modl.member;\n\n        if (module && module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\n          var moduleObject = createInstance(module, modl.args);\n          var memberName = this.getMemberName(modName);\n\n          if (modl.isProperty) {\n            setValue(memberName, module, this.parent);\n          } else {\n            setValue(memberName, moduleObject, this.parent);\n          }\n\n          var loadedModule = modl;\n          loadedModule.member = memberName;\n          this.loadedModules.push(loadedModule);\n        }\n      }\n    }\n  };\n  /**\n   * To remove the created object while destroying the control\n   *\n   * @returns {void}\n   */\n\n\n  ModuleLoader.prototype.clean = function () {\n    for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {\n      var modules = _a[_i];\n\n      if (!modules.isProperty) {\n        getValue(modules.member, this.parent).destroy();\n      }\n    }\n\n    this.loadedModules = [];\n  };\n  /**\n   * Removes all unused modules\n   *\n   * @param {ModuleDeclaration[]} moduleList ?\n   * @returns {void} ?\n   */\n\n\n  ModuleLoader.prototype.clearUnusedModule = function (moduleList) {\n    var _this = this;\n\n    var usedModules = moduleList.map(function (arg) {\n      return _this.getMemberName(arg.member);\n    });\n    var removableModule = this.loadedModules.filter(function (module) {\n      return usedModules.indexOf(module.member) === -1;\n    });\n\n    for (var _i = 0, removableModule_1 = removableModule; _i < removableModule_1.length; _i++) {\n      var mod = removableModule_1[_i];\n\n      if (!mod.isProperty) {\n        getValue(mod.member, this.parent).destroy();\n      }\n\n      this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\n      deleteObject(this.parent, mod.member);\n    }\n  };\n  /**\n   * To get the name of the member.\n   *\n   * @param {string} name ?\n   * @returns {string} ?\n   */\n\n\n  ModuleLoader.prototype.getMemberName = function (name) {\n    return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\n  };\n  /**\n   * Returns boolean based on whether the module specified is loaded or not\n   *\n   * @param {string} modName ?\n   * @returns {boolean} ?\n   */\n\n\n  ModuleLoader.prototype.isModuleLoaded = function (modName) {\n    for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {\n      var mod = _a[_i];\n\n      if (mod.member === this.getMemberName(modName)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return ModuleLoader;\n}();\n\nexport { ModuleLoader };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-lists/node_modules/@syncfusion/ej2-base/src/module-loader.js"],"names":["createInstance","setValue","getValue","deleteObject","MODULE_SUFFIX","ModuleLoader","parent","loadedModules","prototype","inject","requiredModules","moduleList","reqLength","length","clean","clearUnusedModule","i","modl","parseInt","toString","_i","moduleList_1","module","modName","member","getModuleName","isModuleLoaded","moduleObject","args","memberName","getMemberName","isProperty","loadedModule","push","_a","modules","destroy","_this","usedModules","map","arg","removableModule","filter","indexOf","removableModule_1","mod","splice","name","toLowerCase","substring"],"mappings":"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","sourcesContent":["/**\n * Module loading operations\n */\nimport { createInstance, setValue, getValue, deleteObject } from './util';\nvar MODULE_SUFFIX = 'Module';\nvar ModuleLoader = /** @class */ (function () {\n    function ModuleLoader(parent) {\n        this.loadedModules = [];\n        this.parent = parent;\n    }\n    /**\n     * Inject required modules in component library\n     *\n     * @returns {void} ?\n     * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\n     * @param {Function[]} moduleList - Array of modules to be injected from sample side\n     */\n    ModuleLoader.prototype.inject = function (requiredModules, moduleList) {\n        var reqLength = requiredModules.length;\n        if (reqLength === 0) {\n            this.clean();\n            return;\n        }\n        if (this.loadedModules.length) {\n            this.clearUnusedModule(requiredModules);\n        }\n        for (var i = 0; i < reqLength; i++) {\n            var modl = requiredModules[parseInt(i.toString(), 10)];\n            for (var _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {\n                var module = moduleList_1[_i];\n                var modName = modl.member;\n                if (module && module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\n                    var moduleObject = createInstance(module, modl.args);\n                    var memberName = this.getMemberName(modName);\n                    if (modl.isProperty) {\n                        setValue(memberName, module, this.parent);\n                    }\n                    else {\n                        setValue(memberName, moduleObject, this.parent);\n                    }\n                    var loadedModule = modl;\n                    loadedModule.member = memberName;\n                    this.loadedModules.push(loadedModule);\n                }\n            }\n        }\n    };\n    /**\n     * To remove the created object while destroying the control\n     *\n     * @returns {void}\n     */\n    ModuleLoader.prototype.clean = function () {\n        for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {\n            var modules = _a[_i];\n            if (!modules.isProperty) {\n                getValue(modules.member, this.parent).destroy();\n            }\n        }\n        this.loadedModules = [];\n    };\n    /**\n     * Removes all unused modules\n     *\n     * @param {ModuleDeclaration[]} moduleList ?\n     * @returns {void} ?\n     */\n    ModuleLoader.prototype.clearUnusedModule = function (moduleList) {\n        var _this = this;\n        var usedModules = moduleList.map(function (arg) { return _this.getMemberName(arg.member); });\n        var removableModule = this.loadedModules.filter(function (module) {\n            return usedModules.indexOf(module.member) === -1;\n        });\n        for (var _i = 0, removableModule_1 = removableModule; _i < removableModule_1.length; _i++) {\n            var mod = removableModule_1[_i];\n            if (!mod.isProperty) {\n                getValue(mod.member, this.parent).destroy();\n            }\n            this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\n            deleteObject(this.parent, mod.member);\n        }\n    };\n    /**\n     * To get the name of the member.\n     *\n     * @param {string} name ?\n     * @returns {string} ?\n     */\n    ModuleLoader.prototype.getMemberName = function (name) {\n        return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\n    };\n    /**\n     * Returns boolean based on whether the module specified is loaded or not\n     *\n     * @param {string} modName ?\n     * @returns {boolean} ?\n     */\n    ModuleLoader.prototype.isModuleLoaded = function (modName) {\n        for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {\n            var mod = _a[_i];\n            if (mod.member === this.getMemberName(modName)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return ModuleLoader;\n}());\nexport { ModuleLoader };\n"]},"metadata":{},"sourceType":"module"}