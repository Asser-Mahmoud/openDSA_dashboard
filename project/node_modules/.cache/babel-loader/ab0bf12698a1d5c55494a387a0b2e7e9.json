{"ast":null,"code":"/**\n * Template Engine Bridge\n */\nimport { compile as render } from './template';\nimport { createElement } from './dom';\nimport { isNullOrUndefined, isBlazor } from './util';\nvar HAS_ROW = /^[\\n\\r.]+<tr|^<tr/;\nvar HAS_SVG = /^[\\n\\r.]+<svg|^<path|^<g/;\nexport var blazorTemplates = {};\n/**\n *\n * @returns {string} ?\n */\n\nexport function getRandomId() {\n  return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n *\n * @param {string} templateString - The template string which is going to convert.\n * @param {Object} helper - Helper functions as an object.\n * @param {boolean} ignorePrefix ?\n * @returns {NodeList} ?\n * @private\n */\n// eslint-disable-next-line\n\nexport function compile(templateString, helper, ignorePrefix) {\n  var compiler = engineObj.compile(templateString, helper, ignorePrefix); // eslint-disable-next-line\n\n  return function (data, component, propName, templateId, isStringTemplate, index, element, root) {\n    var result = compiler(data, component, propName, element, root);\n    var blazorTemplateId = 'BlazorTemplateId';\n\n    if (isBlazor() && !isStringTemplate) {\n      var randomId = getRandomId();\n      var blazorId = templateId + randomId;\n\n      if (!blazorTemplates[\"\" + templateId]) {\n        blazorTemplates[\"\" + templateId] = [];\n      }\n\n      if (!isNullOrUndefined(index)) {\n        var keys = Object.keys(blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)]);\n\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n          var key = keys_1[_i];\n\n          if (key !== blazorTemplateId && data[\"\" + key]) {\n            blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)][\"\" + key] = data[\"\" + key];\n          }\n\n          if (key === blazorTemplateId) {\n            blazorId = blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)][\"\" + key];\n          }\n        }\n      } else {\n        data[\"\" + blazorTemplateId] = blazorId;\n        blazorTemplates[\"\" + templateId].push(data);\n      } // eslint-disable-next-line\n\n\n      return propName === 'rowTemplate' ? [createElement('tr', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })] : // eslint-disable-next-line\n      [createElement('div', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })];\n    }\n\n    if (typeof result === 'string') {\n      if (HAS_SVG.test(result)) {\n        var ele = createElement('svg', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      } else {\n        var ele = createElement(HAS_ROW.test(result) ? 'table' : 'div', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      }\n    } else {\n      return result;\n    }\n  };\n}\n/**\n *\n * @param {string} templateId ?\n * @param {string} templateName ?\n * @param {string} comp ?\n * @param {boolean} isEmpty ?\n * @param {Function} callBack ?\n * @returns {void} ?\n */\n\nexport function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n  if (isBlazor()) {\n    var ejsIntrop = 'sfBlazor';\n    window[\"\" + ejsIntrop].updateTemplate(templateName, blazorTemplates[\"\" + templateId], templateId, comp, callBack);\n\n    if (isEmpty !== false) {\n      blazorTemplates[\"\" + templateId] = [];\n    }\n  }\n}\n/**\n *\n * @param {string} templateId ?\n * @param {string} templateName ?\n * @param {number} index ?\n * @returns {void} ?\n */\n\nexport function resetBlazorTemplate(templateId, templateName, index) {\n  var templateDiv = document.getElementById(templateId);\n\n  if (templateDiv) {\n    // eslint-disable-next-line\n    var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n\n    for (var i = 0; i < innerTemplates.length; i++) {\n      var tempId = ' ';\n\n      if (!isNullOrUndefined(index)) {\n        tempId = innerTemplates[parseInt(index.toString(), 10)].getAttribute('data-templateId');\n      } else {\n        tempId = innerTemplates[parseInt(i.toString(), 10)].getAttribute('data-templateId');\n      }\n\n      var tempElement = document.getElementById(tempId);\n\n      if (tempElement) {\n        var length_1 = tempElement.childNodes.length;\n\n        for (var j = 0; j < length_1; j++) {\n          if (!isNullOrUndefined(index)) {\n            innerTemplates[parseInt(index.toString(), 10)].appendChild(tempElement.childNodes[0]);\n            i = innerTemplates.length;\n          } else {\n            innerTemplates[parseInt(i.toString(), 10)].appendChild(tempElement.childNodes[0]);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Set your custom template engine for template rendering.\n *\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @returns {void} ?\n * @private\n */\n\nexport function setTemplateEngine(classObj) {\n  engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n *\n * @returns {string} ?\n * @private\n */\n\nexport function getTemplateEngine() {\n  return engineObj.compile;\n} //Default Engine Class\n\nvar Engine =\n/** @class */\nfunction () {\n  function Engine() {} // eslint-disable-next-line\n\n\n  Engine.prototype.compile = function (templateString, helper, ignorePrefix) {\n    if (helper === void 0) {\n      helper = {};\n    }\n\n    return render(templateString, helper);\n  };\n\n  return Engine;\n}();\n\nvar engineObj = {\n  compile: new Engine().compile\n};","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-lists/node_modules/@syncfusion/ej2-base/src/template-engine.js"],"names":["compile","render","createElement","isNullOrUndefined","isBlazor","HAS_ROW","HAS_SVG","blazorTemplates","getRandomId","Math","random","toString","substr","templateString","helper","ignorePrefix","compiler","engineObj","data","component","propName","templateId","isStringTemplate","index","element","root","result","blazorTemplateId","randomId","blazorId","keys","Object","parseInt","_i","keys_1","length","key","push","id","className","test","ele","innerHTML","childNodes","updateBlazorTemplate","templateName","comp","isEmpty","callBack","ejsIntrop","window","updateTemplate","resetBlazorTemplate","templateDiv","document","getElementById","innerTemplates","getElementsByClassName","i","tempId","getAttribute","tempElement","length_1","j","appendChild","setTemplateEngine","classObj","getTemplateEngine","Engine","prototype"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAO,IAAIC,MAApB,QAAkC,YAAlC;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,QAA5C;AACA,IAAIC,OAAO,GAAG,mBAAd;AACA,IAAIC,OAAO,GAAG,0BAAd;AACA,OAAO,IAAIC,eAAe,GAAG,EAAtB;AACP;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,GAAuB;AAC1B,SAAO,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAb;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASZ,OAAT,CAAiBa,cAAjB,EAAiCC,MAAjC,EAAyCC,YAAzC,EAAuD;AAC1D,MAAIC,QAAQ,GAAGC,SAAS,CAACjB,OAAV,CAAkBa,cAAlB,EAAkCC,MAAlC,EAA0CC,YAA1C,CAAf,CAD0D,CAE1D;;AACA,SAAO,UAAUG,IAAV,EAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,gBAAjD,EAAmEC,KAAnE,EAA0EC,OAA1E,EAAmFC,IAAnF,EAAyF;AAC5F,QAAIC,MAAM,GAAGV,QAAQ,CAACE,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BI,OAA5B,EAAqCC,IAArC,CAArB;AACA,QAAIE,gBAAgB,GAAG,kBAAvB;;AACA,QAAIvB,QAAQ,MAAM,CAACkB,gBAAnB,EAAqC;AACjC,UAAIM,QAAQ,GAAGpB,WAAW,EAA1B;AACA,UAAIqB,QAAQ,GAAGR,UAAU,GAAGO,QAA5B;;AACA,UAAI,CAACrB,eAAe,CAAC,KAAKc,UAAN,CAApB,EAAuC;AACnCd,QAAAA,eAAe,CAAC,KAAKc,UAAN,CAAf,GAAmC,EAAnC;AACH;;AACD,UAAI,CAAClB,iBAAiB,CAACoB,KAAD,CAAtB,EAA+B;AAC3B,YAAIO,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYvB,eAAe,CAAC,KAAKc,UAAN,CAAf,CAAiCW,QAAQ,CAACT,KAAK,CAACZ,QAAN,EAAD,EAAmB,EAAnB,CAAzC,CAAZ,CAAX;;AACA,aAAK,IAAIsB,EAAE,GAAG,CAAT,EAAYC,MAAM,GAAGJ,IAA1B,EAAgCG,EAAE,GAAGC,MAAM,CAACC,MAA5C,EAAoDF,EAAE,EAAtD,EAA0D;AACtD,cAAIG,GAAG,GAAGF,MAAM,CAACD,EAAD,CAAhB;;AACA,cAAIG,GAAG,KAAKT,gBAAR,IAA4BT,IAAI,CAAC,KAAKkB,GAAN,CAApC,EAAgD;AAC5C7B,YAAAA,eAAe,CAAC,KAAKc,UAAN,CAAf,CAAiCW,QAAQ,CAACT,KAAK,CAACZ,QAAN,EAAD,EAAmB,EAAnB,CAAzC,EAAiE,KAAKyB,GAAtE,IAA6ElB,IAAI,CAAC,KAAKkB,GAAN,CAAjF;AACH;;AACD,cAAIA,GAAG,KAAKT,gBAAZ,EAA8B;AAC1BE,YAAAA,QAAQ,GAAGtB,eAAe,CAAC,KAAKc,UAAN,CAAf,CAAiCW,QAAQ,CAACT,KAAK,CAACZ,QAAN,EAAD,EAAmB,EAAnB,CAAzC,EAAiE,KAAKyB,GAAtE,CAAX;AACH;AACJ;AACJ,OAXD,MAYK;AACDlB,QAAAA,IAAI,CAAC,KAAKS,gBAAN,CAAJ,GAA8BE,QAA9B;AACAtB,QAAAA,eAAe,CAAC,KAAKc,UAAN,CAAf,CAAiCgB,IAAjC,CAAsCnB,IAAtC;AACH,OArBgC,CAsBjC;;;AACA,aAAOE,QAAQ,KAAK,aAAb,GAA6B,CAAClB,aAAa,CAAC,IAAD,EAAO;AAAEoC,QAAAA,EAAE,EAAET,QAAN;AAAgBU,QAAAA,SAAS,EAAE;AAA3B,OAAP,CAAd,CAA7B,GACH;AACA,OAACrC,aAAa,CAAC,KAAD,EAAQ;AAAEoC,QAAAA,EAAE,EAAET,QAAN;AAAgBU,QAAAA,SAAS,EAAE;AAA3B,OAAR,CAAd,CAFJ;AAGH;;AACD,QAAI,OAAOb,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,UAAIpB,OAAO,CAACkC,IAAR,CAAad,MAAb,CAAJ,EAA0B;AACtB,YAAIe,GAAG,GAAGvC,aAAa,CAAC,KAAD,EAAQ;AAAEwC,UAAAA,SAAS,EAAEhB;AAAb,SAAR,CAAvB;AACA,eAAOe,GAAG,CAACE,UAAX;AACH,OAHD,MAIK;AACD,YAAIF,GAAG,GAAGvC,aAAa,CAAEG,OAAO,CAACmC,IAAR,CAAad,MAAb,IAAuB,OAAvB,GAAiC,KAAnC,EAA2C;AAAEgB,UAAAA,SAAS,EAAEhB;AAAb,SAA3C,CAAvB;AACA,eAAOe,GAAG,CAACE,UAAX;AACH;AACJ,KATD,MAUK;AACD,aAAOjB,MAAP;AACH;AACJ,GA3CD;AA4CH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkB,oBAAT,CAA8BvB,UAA9B,EAA0CwB,YAA1C,EAAwDC,IAAxD,EAA8DC,OAA9D,EAAuEC,QAAvE,EAAiF;AACpF,MAAI5C,QAAQ,EAAZ,EAAgB;AACZ,QAAI6C,SAAS,GAAG,UAAhB;AACAC,IAAAA,MAAM,CAAC,KAAKD,SAAN,CAAN,CAAuBE,cAAvB,CAAsCN,YAAtC,EAAoDtC,eAAe,CAAC,KAAKc,UAAN,CAAnE,EAAsFA,UAAtF,EAAkGyB,IAAlG,EAAwGE,QAAxG;;AACA,QAAID,OAAO,KAAK,KAAhB,EAAuB;AACnBxC,MAAAA,eAAe,CAAC,KAAKc,UAAN,CAAf,GAAmC,EAAnC;AACH;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+B,mBAAT,CAA6B/B,UAA7B,EAAyCwB,YAAzC,EAAuDtB,KAAvD,EAA8D;AACjE,MAAI8B,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwBlC,UAAxB,CAAlB;;AACA,MAAIgC,WAAJ,EAAiB;AACb;AACA,QAAIG,cAAc,GAAGH,WAAW,CAACI,sBAAZ,CAAmC,uBAAnC,CAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAAc,CAACrB,MAAnC,EAA2CuB,CAAC,EAA5C,EAAgD;AAC5C,UAAIC,MAAM,GAAG,GAAb;;AACA,UAAI,CAACxD,iBAAiB,CAACoB,KAAD,CAAtB,EAA+B;AAC3BoC,QAAAA,MAAM,GAAGH,cAAc,CAACxB,QAAQ,CAACT,KAAK,CAACZ,QAAN,EAAD,EAAmB,EAAnB,CAAT,CAAd,CAA+CiD,YAA/C,CAA4D,iBAA5D,CAAT;AACH,OAFD,MAGK;AACDD,QAAAA,MAAM,GAAGH,cAAc,CAACxB,QAAQ,CAAC0B,CAAC,CAAC/C,QAAF,EAAD,EAAe,EAAf,CAAT,CAAd,CAA2CiD,YAA3C,CAAwD,iBAAxD,CAAT;AACH;;AACD,UAAIC,WAAW,GAAGP,QAAQ,CAACC,cAAT,CAAwBI,MAAxB,CAAlB;;AACA,UAAIE,WAAJ,EAAiB;AACb,YAAIC,QAAQ,GAAGD,WAAW,CAAClB,UAAZ,CAAuBR,MAAtC;;AACA,aAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8BC,CAAC,EAA/B,EAAmC;AAC/B,cAAI,CAAC5D,iBAAiB,CAACoB,KAAD,CAAtB,EAA+B;AAC3BiC,YAAAA,cAAc,CAACxB,QAAQ,CAACT,KAAK,CAACZ,QAAN,EAAD,EAAmB,EAAnB,CAAT,CAAd,CAA+CqD,WAA/C,CAA2DH,WAAW,CAAClB,UAAZ,CAAuB,CAAvB,CAA3D;AACAe,YAAAA,CAAC,GAAGF,cAAc,CAACrB,MAAnB;AACH,WAHD,MAIK;AACDqB,YAAAA,cAAc,CAACxB,QAAQ,CAAC0B,CAAC,CAAC/C,QAAF,EAAD,EAAe,EAAf,CAAT,CAAd,CAA2CqD,WAA3C,CAAuDH,WAAW,CAAClB,UAAZ,CAAuB,CAAvB,CAAvD;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsB,iBAAT,CAA2BC,QAA3B,EAAqC;AACxCjD,EAAAA,SAAS,CAACjB,OAAV,GAAoBkE,QAAQ,CAAClE,OAA7B;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmE,iBAAT,GAA6B;AAChC,SAAOlD,SAAS,CAACjB,OAAjB;AACH,C,CACD;;AACA,IAAIoE,MAAM;AAAG;AAAe,YAAY;AACpC,WAASA,MAAT,GAAkB,CACjB,CAFmC,CAGpC;;;AACAA,EAAAA,MAAM,CAACC,SAAP,CAAiBrE,OAAjB,GAA2B,UAAUa,cAAV,EAA0BC,MAA1B,EAAkCC,YAAlC,EAAgD;AACvE,QAAID,MAAM,KAAK,KAAK,CAApB,EAAuB;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACvC,WAAOb,MAAM,CAACY,cAAD,EAAiBC,MAAjB,CAAb;AACH,GAHD;;AAIA,SAAOsD,MAAP;AACH,CAT2B,EAA5B;;AAUA,IAAInD,SAAS,GAAG;AAAEjB,EAAAA,OAAO,EAAE,IAAIoE,MAAJ,GAAapE;AAAxB,CAAhB","sourcesContent":["/**\n * Template Engine Bridge\n */\nimport { compile as render } from './template';\nimport { createElement } from './dom';\nimport { isNullOrUndefined, isBlazor } from './util';\nvar HAS_ROW = /^[\\n\\r.]+<tr|^<tr/;\nvar HAS_SVG = /^[\\n\\r.]+<svg|^<path|^<g/;\nexport var blazorTemplates = {};\n/**\n *\n * @returns {string} ?\n */\nexport function getRandomId() {\n    return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n *\n * @param {string} templateString - The template string which is going to convert.\n * @param {Object} helper - Helper functions as an object.\n * @param {boolean} ignorePrefix ?\n * @returns {NodeList} ?\n * @private\n */\n// eslint-disable-next-line\nexport function compile(templateString, helper, ignorePrefix) {\n    var compiler = engineObj.compile(templateString, helper, ignorePrefix);\n    // eslint-disable-next-line\n    return function (data, component, propName, templateId, isStringTemplate, index, element, root) {\n        var result = compiler(data, component, propName, element, root);\n        var blazorTemplateId = 'BlazorTemplateId';\n        if (isBlazor() && !isStringTemplate) {\n            var randomId = getRandomId();\n            var blazorId = templateId + randomId;\n            if (!blazorTemplates[\"\" + templateId]) {\n                blazorTemplates[\"\" + templateId] = [];\n            }\n            if (!isNullOrUndefined(index)) {\n                var keys = Object.keys(blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)]);\n                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                    var key = keys_1[_i];\n                    if (key !== blazorTemplateId && data[\"\" + key]) {\n                        blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)][\"\" + key] = data[\"\" + key];\n                    }\n                    if (key === blazorTemplateId) {\n                        blazorId = blazorTemplates[\"\" + templateId][parseInt(index.toString(), 10)][\"\" + key];\n                    }\n                }\n            }\n            else {\n                data[\"\" + blazorTemplateId] = blazorId;\n                blazorTemplates[\"\" + templateId].push(data);\n            }\n            // eslint-disable-next-line\n            return propName === 'rowTemplate' ? [createElement('tr', { id: blazorId, className: 'e-blazor-template' })] :\n                // eslint-disable-next-line\n                [createElement('div', { id: blazorId, className: 'e-blazor-template' })];\n        }\n        if (typeof result === 'string') {\n            if (HAS_SVG.test(result)) {\n                var ele = createElement('svg', { innerHTML: result });\n                return ele.childNodes;\n            }\n            else {\n                var ele = createElement((HAS_ROW.test(result) ? 'table' : 'div'), { innerHTML: result });\n                return ele.childNodes;\n            }\n        }\n        else {\n            return result;\n        }\n    };\n}\n/**\n *\n * @param {string} templateId ?\n * @param {string} templateName ?\n * @param {string} comp ?\n * @param {boolean} isEmpty ?\n * @param {Function} callBack ?\n * @returns {void} ?\n */\nexport function updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n    if (isBlazor()) {\n        var ejsIntrop = 'sfBlazor';\n        window[\"\" + ejsIntrop].updateTemplate(templateName, blazorTemplates[\"\" + templateId], templateId, comp, callBack);\n        if (isEmpty !== false) {\n            blazorTemplates[\"\" + templateId] = [];\n        }\n    }\n}\n/**\n *\n * @param {string} templateId ?\n * @param {string} templateName ?\n * @param {number} index ?\n * @returns {void} ?\n */\nexport function resetBlazorTemplate(templateId, templateName, index) {\n    var templateDiv = document.getElementById(templateId);\n    if (templateDiv) {\n        // eslint-disable-next-line\n        var innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n        for (var i = 0; i < innerTemplates.length; i++) {\n            var tempId = ' ';\n            if (!isNullOrUndefined(index)) {\n                tempId = innerTemplates[parseInt(index.toString(), 10)].getAttribute('data-templateId');\n            }\n            else {\n                tempId = innerTemplates[parseInt(i.toString(), 10)].getAttribute('data-templateId');\n            }\n            var tempElement = document.getElementById(tempId);\n            if (tempElement) {\n                var length_1 = tempElement.childNodes.length;\n                for (var j = 0; j < length_1; j++) {\n                    if (!isNullOrUndefined(index)) {\n                        innerTemplates[parseInt(index.toString(), 10)].appendChild(tempElement.childNodes[0]);\n                        i = innerTemplates.length;\n                    }\n                    else {\n                        innerTemplates[parseInt(i.toString(), 10)].appendChild(tempElement.childNodes[0]);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * Set your custom template engine for template rendering.\n *\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @returns {void} ?\n * @private\n */\nexport function setTemplateEngine(classObj) {\n    engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n *\n * @returns {string} ?\n * @private\n */\nexport function getTemplateEngine() {\n    return engineObj.compile;\n}\n//Default Engine Class\nvar Engine = /** @class */ (function () {\n    function Engine() {\n    }\n    // eslint-disable-next-line\n    Engine.prototype.compile = function (templateString, helper, ignorePrefix) {\n        if (helper === void 0) { helper = {}; }\n        return render(templateString, helper);\n    };\n    return Engine;\n}());\nvar engineObj = { compile: new Engine().compile };\n"]},"metadata":{},"sourceType":"module"}