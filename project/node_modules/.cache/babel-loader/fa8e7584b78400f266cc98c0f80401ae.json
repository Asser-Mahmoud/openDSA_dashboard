{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { modNumber } from '../../plain/number/index.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'mod';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\r\n   * Calculates the modulus, the remainder of an integer division.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * The modulus is defined as:\r\n   *\r\n   *     x - y * floor(x / y)\r\n   *\r\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.mod(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.mod(8, 3)                // returns 2\r\n   *    math.mod(11, 2)               // returns 1\r\n   *\r\n   *    function isOdd(x) {\r\n   *      return math.mod(x, 2) != 0\r\n   *    }\r\n   *\r\n   *    isOdd(2)                      // returns false\r\n   *    isOdd(3)                      // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    divide\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\r\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\r\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\r\n   */\n\n  return typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isNeg()) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      }\n\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.compare(0) < 0) {\n        throw new Error('Cannot calculate mod for a negative divisor');\n      } // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\n\n\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\n    }\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/mod.js"],"names":["factory","createMatAlgo02xDS0","createMatAlgo03xDSf","createMatAlgo05xSfSf","createMatAlgo11xS0s","createMatAlgo12xSfs","modNumber","createMatrixAlgorithmSuite","name","dependencies","createMod","_ref","typed","matrix","equalScalar","DenseMatrix","concat","matAlgo02xDS0","matAlgo03xDSf","matAlgo05xSfSf","matAlgo11xS0s","matAlgo12xSfs","matrixAlgorithmSuite","BigNumberBigNumber","x","y","isNeg","Error","isZero","mod","FractionFraction","compare","add","SS","DS","SD","Ss","sS"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\r\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\r\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\r\nimport { modNumber } from '../../plain/number/index.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'mod';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\r\nexport var createMod = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo03xDSf = createMatAlgo03xDSf({\r\n    typed\r\n  });\r\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo12xSfs = createMatAlgo12xSfs({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Calculates the modulus, the remainder of an integer division.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * The modulus is defined as:\r\n   *\r\n   *     x - y * floor(x / y)\r\n   *\r\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.mod(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.mod(8, 3)                // returns 2\r\n   *    math.mod(11, 2)               // returns 1\r\n   *\r\n   *    function isOdd(x) {\r\n   *      return math.mod(x, 2) != 0\r\n   *    }\r\n   *\r\n   *    isOdd(2)                      // returns false\r\n   *    isOdd(3)                      // returns true\r\n   *\r\n   * See also:\r\n   *\r\n   *    divide\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\r\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\r\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\r\n   */\r\n  return typed(name, {\r\n    'number, number': modNumber,\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      if (y.isNeg()) {\r\n        throw new Error('Cannot calculate mod for a negative divisor');\r\n      }\r\n      return y.isZero() ? x : x.mod(y);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      if (y.compare(0) < 0) {\r\n        throw new Error('Cannot calculate mod for a negative divisor');\r\n      }\r\n      // Workaround suggested in Fraction.js library to calculate correct modulo for negative dividend\r\n      return x.compare(0) >= 0 ? x.mod(y) : x.mod(y).add(y).mod(y);\r\n    }\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo05xSfSf,\r\n    DS: matAlgo03xDSf,\r\n    SD: matAlgo02xDS0,\r\n    Ss: matAlgo11xS0s,\r\n    sS: matAlgo12xSfs\r\n  }));\r\n});"]},"metadata":{},"sourceType":"module"}