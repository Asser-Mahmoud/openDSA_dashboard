{"ast":null,"code":"/**\r\n * PdfFont.ts class for EJ2-PDF\r\n */\nimport { PdfFontStyle } from './enum';\nimport { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfStringFormat } from './pdf-string-format';\nimport { PdfStringLayouter } from './string-layouter';\nimport { StringTokenizer } from './string-tokenizer';\n/**\r\n * Defines a particular format for text, including font face, size, and style attributes.\r\n * @private\r\n */\n\nvar PdfFont =\n/** @class */\nfunction () {\n  function PdfFont(size, style) {\n    /**\r\n     * `Style` of the font.\r\n     * @private\r\n     */\n    this.fontStyle = PdfFontStyle.Regular;\n\n    if (typeof size === 'number' && typeof style === 'undefined') {\n      this.fontSize = size;\n    } else {\n      this.fontSize = size;\n      this.setStyle(style);\n    }\n  }\n\n  Object.defineProperty(PdfFont.prototype, \"name\", {\n    //Properties\n\n    /**\r\n     * Gets the face name of this Font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.metrics.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"size\", {\n    /**\r\n     * Gets the size of this font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.fontSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"height\", {\n    /**\r\n     * Gets the height of the font in points.\r\n     * @private\r\n     */\n    get: function () {\n      return this.metrics.getHeight(null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"style\", {\n    /**\r\n     * Gets the style information for this font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.fontStyle;\n    },\n    set: function (value) {\n      this.fontStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"bold\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` is `bold`.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Bold) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"italic\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Italic) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"strikeout\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` is `strikeout`.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Strikeout) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"underline\", {\n    /**\r\n     * Gets a value indicating whether this `PdfFont` is `underline`.\r\n     * @private\r\n     */\n    get: function () {\n      return (this.style & PdfFontStyle.Underline) > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"metrics\", {\n    /**\r\n     * Gets or sets the `metrics` for this font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.fontMetrics;\n    },\n    set: function (value) {\n      this.fontMetrics = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfFont.prototype, \"element\", {\n    // /**\n    //  * Gets and Sets the font `internals`.\n    //  * @private\n    //  */\n    // public get fontInternal() : IPdfPrimitive {\n    //     return this.pdfFontInternals;\n    // }\n    // public set fontInternal(value : IPdfPrimitive) {\n    //     this.pdfFontInternals = value;\n    // }\n    //IPdfWrapper Members\n\n    /**\r\n     * Gets the `element` representing the font.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfFontInternals;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\n    if (typeof text === 'string' && typeof arg2 === 'undefined') {\n      return this.measureString(text, null);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\n      var temparg2 = arg2;\n      var charactersFitted = 0;\n      var linesFilled = 0;\n      return this.measureString(text, temparg2, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\n      var temparg2 = arg2;\n      return this.measureString(text, 0, temparg2, arg3, arg4); // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\n      var layoutArea = new SizeF(arg2, 0);\n      var temparg3 = arg3;\n      return this.measureString(text, layoutArea, temparg3, arg4, arg5); // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\n      //     return this.measureString(text, arg2, null);\n      // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\n      //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\n      //     let charactersFitted : number = 0;\n      //     let linesFilled : number = 0;\n      //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\n    } else {\n      if (text == null) {\n        throw Error(\"ArgumentNullException(\\\"text\\\")\");\n      }\n\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0)); // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\n\n      arg4 = text.length;\n      arg5 = result.empty ? 0 : result.lines.length;\n      return result.actualSize;\n    }\n  };\n  /* tslint:enable */\n  //IPdfCache Members\n\n  /**\r\n   * `Checks` whether the object is similar to another object.\r\n   * @private\r\n   */\n\n\n  PdfFont.prototype.equalsTo = function (obj) {\n    var result = this.equalsToFont(obj);\n    return result;\n  };\n  /**\r\n   * Returns `internals` of the object.\r\n   * @private\r\n   */\n\n\n  PdfFont.prototype.getInternals = function () {\n    return this.pdfFontInternals;\n  };\n  /**\r\n   * Sets `internals` to the object.\r\n   * @private\r\n   */\n\n\n  PdfFont.prototype.setInternals = function (internals) {\n    if (internals == null) {\n      throw new Error('ArgumentNullException:internals');\n    }\n\n    this.pdfFontInternals = internals;\n  };\n  /**\r\n   * Sets the `style` of the font.\r\n   * @private\r\n   */\n\n\n  PdfFont.prototype.setStyle = function (style) {\n    this.fontStyle = style;\n  };\n  /**\r\n   * Applies `settings` to the default line width.\r\n   * @private\r\n   */\n\n\n  PdfFont.prototype.applyFormatSettings = function (line, format, width) {\n    // if (line == null) {\n    //     throw new Error(`ArgumentNullException:line`);\n    // }\n    var realWidth = width;\n\n    if (format != null && width > 0) {\n      // Space among characters is not default.\n      if (format.characterSpacing !== 0) {\n        realWidth += (line.length - 1) * format.characterSpacing;\n      } // Space among words is not default.\n\n\n      if (format.wordSpacing !== 0) {\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        realWidth += whitespacesCount * format.wordSpacing;\n      }\n    }\n\n    return realWidth;\n  }; //Constants\n\n  /**\r\n   * `Multiplier` of the symbol width.\r\n   * @default 0.001\r\n   * @private\r\n   */\n\n\n  PdfFont.charSizeMultiplier = 0.001;\n  /**\r\n   * `Synchronization` object.\r\n   * @private\r\n   */\n\n  PdfFont.syncObject = new Object();\n  return PdfFont;\n}();\n\nexport { PdfFont };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font.js"],"names":["PdfFontStyle","SizeF","PdfStringFormat","PdfStringLayouter","StringTokenizer","PdfFont","size","style","fontStyle","Regular","fontSize","setStyle","Object","defineProperty","prototype","get","metrics","name","enumerable","configurable","getHeight","set","value","Bold","Italic","Strikeout","Underline","fontMetrics","pdfFontInternals","measureString","text","arg2","arg3","arg4","arg5","temparg2","charactersFitted","linesFilled","layoutArea","temparg3","Error","layouter","result","layout","length","empty","lines","actualSize","equalsTo","obj","equalsToFont","getInternals","setInternals","internals","applyFormatSettings","line","format","width","realWidth","characterSpacing","wordSpacing","symbols","spaces","whitespacesCount","getCharsCount","charSizeMultiplier","syncObject"],"mappings":"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","sourcesContent":["/**\r\n * PdfFont.ts class for EJ2-PDF\r\n */\r\nimport { PdfFontStyle } from './enum';\r\nimport { SizeF } from './../../drawing/pdf-drawing';\r\nimport { PdfStringFormat } from './pdf-string-format';\r\nimport { PdfStringLayouter } from './string-layouter';\r\nimport { StringTokenizer } from './string-tokenizer';\r\n/**\r\n * Defines a particular format for text, including font face, size, and style attributes.\r\n * @private\r\n */\r\nvar PdfFont = /** @class */ (function () {\r\n    function PdfFont(size, style) {\r\n        /**\r\n         * `Style` of the font.\r\n         * @private\r\n         */\r\n        this.fontStyle = PdfFontStyle.Regular;\r\n        if (typeof size === 'number' && typeof style === 'undefined') {\r\n            this.fontSize = size;\r\n        }\r\n        else {\r\n            this.fontSize = size;\r\n            this.setStyle(style);\r\n        }\r\n    }\r\n    Object.defineProperty(PdfFont.prototype, \"name\", {\r\n        //Properties\r\n        /**\r\n         * Gets the face name of this Font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.metrics.name;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"size\", {\r\n        /**\r\n         * Gets the size of this font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.fontSize;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"height\", {\r\n        /**\r\n         * Gets the height of the font in points.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.metrics.getHeight(null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"style\", {\r\n        /**\r\n         * Gets the style information for this font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.fontStyle;\r\n        },\r\n        set: function (value) {\r\n            this.fontStyle = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"bold\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` is `bold`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Bold) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"italic\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` has the `italic` style applied.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Italic) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"strikeout\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` is `strikeout`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Strikeout) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"underline\", {\r\n        /**\r\n         * Gets a value indicating whether this `PdfFont` is `underline`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return ((this.style & PdfFontStyle.Underline) > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"metrics\", {\r\n        /**\r\n         * Gets or sets the `metrics` for this font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.fontMetrics;\r\n        },\r\n        set: function (value) {\r\n            this.fontMetrics = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfFont.prototype, \"element\", {\r\n        // /**\r\n        //  * Gets and Sets the font `internals`.\r\n        //  * @private\r\n        //  */\r\n        // public get fontInternal() : IPdfPrimitive {\r\n        //     return this.pdfFontInternals;\r\n        // }\r\n        // public set fontInternal(value : IPdfPrimitive) {\r\n        //     this.pdfFontInternals = value;\r\n        // }\r\n        //IPdfWrapper Members\r\n        /**\r\n         * Gets the `element` representing the font.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfFontInternals;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PdfFont.prototype.measureString = function (text, arg2, arg3, arg4, arg5) {\r\n        if (typeof text === 'string' && typeof arg2 === 'undefined') {\r\n            return this.measureString(text, null);\r\n        }\r\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'undefined' && typeof arg4 === 'undefined') {\r\n            var temparg2 = arg2;\r\n            var charactersFitted = 0;\r\n            var linesFilled = 0;\r\n            return this.measureString(text, temparg2, charactersFitted, linesFilled);\r\n        }\r\n        else if (typeof text === 'string' && (arg2 instanceof PdfStringFormat || arg2 == null) && typeof arg3 === 'number' && typeof arg4 === 'number') {\r\n            var temparg2 = arg2;\r\n            return this.measureString(text, 0, temparg2, arg3, arg4);\r\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && typeof arg3 === 'undefined') {\r\n            //     return this.measureString(text, arg2, null);\r\n            // } else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\r\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\r\n            //     let charactersFitted : number = 0;\r\n            //     let linesFilled : number = 0;\r\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\r\n        }\r\n        else if (typeof text === 'string' && typeof arg2 === 'number' && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'number' && typeof arg5 === 'number') {\r\n            var layoutArea = new SizeF(arg2, 0);\r\n            var temparg3 = arg3;\r\n            return this.measureString(text, layoutArea, temparg3, arg4, arg5);\r\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && typeof arg3 === 'undefined') {\r\n            //     return this.measureString(text, arg2, null);\r\n            // } else if (typeof text === 'string' && arg2 instanceof SizeF && (arg3 instanceof PdfStringFormat || arg3 == null) && typeof arg4 === 'undefined' && typeof arg5 === 'undefined') {\r\n            //     let temparg3 : PdfStringFormat = arg3 as PdfStringFormat;\r\n            //     let charactersFitted : number = 0;\r\n            //     let linesFilled : number = 0;\r\n            //     return this.measureString(text, arg2, temparg3, charactersFitted, linesFilled);\r\n        }\r\n        else {\r\n            if (text == null) {\r\n                throw Error(\"ArgumentNullException(\\\"text\\\")\");\r\n            }\r\n            var temparg2 = arg2;\r\n            var temparg3 = arg3;\r\n            var layouter = new PdfStringLayouter();\r\n            var result = layouter.layout(text, this, temparg3, temparg2, false, new SizeF(0, 0));\r\n            // arg4 = (result.Remainder == null) ? text.length : text.length - result.Remainder.length;\r\n            arg4 = text.length;\r\n            arg5 = (result.empty) ? 0 : result.lines.length;\r\n            return result.actualSize;\r\n        }\r\n    };\r\n    /* tslint:enable */\r\n    //IPdfCache Members\r\n    /**\r\n     * `Checks` whether the object is similar to another object.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.equalsTo = function (obj) {\r\n        var result = this.equalsToFont(obj);\r\n        return result;\r\n    };\r\n    /**\r\n     * Returns `internals` of the object.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.getInternals = function () {\r\n        return this.pdfFontInternals;\r\n    };\r\n    /**\r\n     * Sets `internals` to the object.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.setInternals = function (internals) {\r\n        if (internals == null) {\r\n            throw new Error('ArgumentNullException:internals');\r\n        }\r\n        this.pdfFontInternals = internals;\r\n    };\r\n    /**\r\n     * Sets the `style` of the font.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.setStyle = function (style) {\r\n        this.fontStyle = style;\r\n    };\r\n    /**\r\n     * Applies `settings` to the default line width.\r\n     * @private\r\n     */\r\n    PdfFont.prototype.applyFormatSettings = function (line, format, width) {\r\n        // if (line == null) {\r\n        //     throw new Error(`ArgumentNullException:line`);\r\n        // }\r\n        var realWidth = width;\r\n        if (format != null && width > 0) {\r\n            // Space among characters is not default.\r\n            if (format.characterSpacing !== 0) {\r\n                realWidth += (line.length - 1) * format.characterSpacing;\r\n            }\r\n            // Space among words is not default.\r\n            if (format.wordSpacing !== 0) {\r\n                var symbols = StringTokenizer.spaces;\r\n                var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\r\n                realWidth += whitespacesCount * format.wordSpacing;\r\n            }\r\n        }\r\n        return realWidth;\r\n    };\r\n    //Constants\r\n    /**\r\n     * `Multiplier` of the symbol width.\r\n     * @default 0.001\r\n     * @private\r\n     */\r\n    PdfFont.charSizeMultiplier = 0.001;\r\n    /**\r\n     * `Synchronization` object.\r\n     * @private\r\n     */\r\n    PdfFont.syncObject = new Object();\r\n    return PdfFont;\r\n}());\r\nexport { PdfFont };\r\n"]},"metadata":{},"sourceType":"module"}