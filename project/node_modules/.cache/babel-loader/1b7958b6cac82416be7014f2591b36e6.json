{"ast":null,"code":"/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\n// The maximum exponent magnitude.\n// The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\nvar EXP_LIMIT = 9e15,\n    // 0 to 9e15\n// The limit on the value of `precision`, and on the value of the first argument to\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\nMAX_DIGITS = 1e9,\n    // 0 to 1e9\n// Base conversion alphabet.\nNUMERALS = '0123456789abcdef',\n    // The natural logarithm of 10 (1025 digits).\nLN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\n    // Pi (1025 digits).\nPI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\n    // The initial configuration properties of the Decimal constructor.\nDEFAULTS = {\n  // These values must be integers within the stated ranges (inclusive).\n  // Most of these values can be changed at run-time using the `Decimal.config` method.\n  // The maximum number of significant digits of the result of a calculation or base conversion.\n  // E.g. `Decimal.config({ precision: 20 });`\n  precision: 20,\n  // 1 to MAX_DIGITS\n  // The rounding mode used when rounding to `precision`.\n  //\n  // ROUND_UP         0 Away from zero.\n  // ROUND_DOWN       1 Towards zero.\n  // ROUND_CEIL       2 Towards +Infinity.\n  // ROUND_FLOOR      3 Towards -Infinity.\n  // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n  // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n  // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n  // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n  // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n  //\n  // E.g.\n  // `Decimal.rounding = 4;`\n  // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\n  rounding: 4,\n  // 0 to 8\n  // The modulo mode used when calculating the modulus: a mod n.\n  // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n  // The remainder (r) is calculated as: r = a - n * q.\n  //\n  // UP         0 The remainder is positive if the dividend is negative, else is negative.\n  // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\n  // FLOOR      3 The remainder has the same sign as the divisor (Python %).\n  // HALF_EVEN  6 The IEEE 754 remainder function.\n  // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\n  //\n  // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\n  // division (9) are commonly used for the modulus operation. The other rounding modes can also\n  // be used, but they may not give useful results.\n  modulo: 1,\n  // 0 to 9\n  // The exponent value at and beneath which `toString` returns exponential notation.\n  // JavaScript numbers: -7\n  toExpNeg: -7,\n  // 0 to -EXP_LIMIT\n  // The exponent value at and above which `toString` returns exponential notation.\n  // JavaScript numbers: 21\n  toExpPos: 21,\n  // 0 to EXP_LIMIT\n  // The minimum exponent value, beneath which underflow to zero occurs.\n  // JavaScript numbers: -324  (5e-324)\n  minE: -EXP_LIMIT,\n  // -1 to -EXP_LIMIT\n  // The maximum exponent value, above which overflow to Infinity occurs.\n  // JavaScript numbers: 308  (1.7976931348623157e+308)\n  maxE: EXP_LIMIT,\n  // 1 to EXP_LIMIT\n  // Whether to use cryptographically-secure random number generation, if available.\n  crypto: false // true/false\n\n},\n    // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\ninexact,\n    quadrant,\n    external = true,\n    decimalError = '[DecimalError] ',\n    invalidArgument = decimalError + 'Invalid argument: ',\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\n    cryptoUnavailable = decimalError + 'crypto unavailable',\n    tag = '[object Decimal]',\n    mathfloor = Math.floor,\n    mathpow = Math.pow,\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_SAFE_INTEGER = 9007199254740991,\n    LN10_PRECISION = LN10.length - 1,\n    PI_PRECISION = PI.length - 1,\n    // Decimal.prototype object\nP = {\n  toStringTag: tag\n}; // Decimal prototype methods\n\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\n\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\n\nP.absoluteValue = P.abs = function () {\n  var x = new this.constructor(this);\n  if (x.s < 0) x.s = 1;\n  return finalise(x);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\n\n\nP.ceil = function () {\n  return finalise(new this.constructor(this), this.e + 1, 2);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\n\n\nP.clampedTo = P.clamp = function (min, max) {\n  var k,\n      x = this,\n      Ctor = x.constructor;\n  min = new Ctor(min);\n  max = new Ctor(max);\n  if (!min.s || !max.s) return new Ctor(NaN);\n  if (min.gt(max)) throw Error(invalidArgument + max);\n  k = x.cmp(min);\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\n};\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\n\n\nP.comparedTo = P.cmp = function (y) {\n  var i,\n      j,\n      xdL,\n      ydL,\n      x = this,\n      xd = x.d,\n      yd = (y = new x.constructor(y)).d,\n      xs = x.s,\n      ys = y.s; // Either NaN or ±Infinity?\n\n  if (!xd || !yd) {\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n  } // Either zero?\n\n\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0; // Signs differ?\n\n  if (xs !== ys) return xs; // Compare exponents.\n\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\n  xdL = xd.length;\n  ydL = yd.length; // Compare digit by digit.\n\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n  } // Compare lengths.\n\n\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n};\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\n\n\nP.cosine = P.cos = function () {\n  var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.d) return new Ctor(NaN); // cos(0) = cos(-0) = 1\n\n  if (!x.d[0]) return new Ctor(1);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n  Ctor.rounding = 1;\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\n\n\nP.cubeRoot = P.cbrt = function () {\n  var e,\n      m,\n      n,\n      r,\n      rep,\n      s,\n      sd,\n      t,\n      t3,\n      t3plusx,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\n  external = false; // Initial estimate.\n\n  s = x.s * mathpow(x.s * x, 1 / 3); // Math.cbrt underflow/overflow?\n  // Pass x to Math.pow as integer, then adjust the exponent of the result.\n\n  if (!s || Math.abs(s) == 1 / 0) {\n    n = digitsToString(x.d);\n    e = x.e; // Adjust n exponent so it is a multiple of 3 away from x exponent.\n\n    if (s = (e - n.length + 1) % 3) n += s == 1 || s == -2 ? '0' : '00';\n    s = mathpow(n, 1 / 3); // Rarely, e may be one less than the result exponent value.\n\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n\n    if (s == 1 / 0) {\n      n = '5e' + e;\n    } else {\n      n = s.toExponential();\n      n = n.slice(0, n.indexOf('e') + 1) + e;\n    }\n\n    r = new Ctor(n);\n    r.s = x.s;\n  } else {\n    r = new Ctor(s.toString());\n  }\n\n  sd = (e = Ctor.precision) + 3; // Halley's method.\n  // TODO? Compare Newton's method.\n\n  for (;;) {\n    t = r;\n    t3 = t.times(t).times(t);\n    t3plusx = t3.plus(x);\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1); // TODO? Replace with for-loop and checkRoundingDigits.\n\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n      n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\n      // , i.e. approaching a rounding boundary, continue the iteration.\n\n      if (n == '9999' || !rep && n == '4999') {\n        // On the first iteration only, check to see if rounding up gives the exact result as the\n        // nines may infinitely repeat.\n        if (!rep) {\n          finalise(t, e + 1, 0);\n\n          if (t.times(t).times(t).eq(x)) {\n            r = t;\n            break;\n          }\n        }\n\n        sd += 4;\n        rep = 1;\n      } else {\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n        // If not, then there are further digits and m will be truthy.\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n          // Truncate to the first rounding digit.\n          finalise(r, e + 1, 1);\n          m = !r.times(r).times(r).eq(x);\n        }\n\n        break;\n      }\n    }\n  }\n\n  external = true;\n  return finalise(r, e, Ctor.rounding, m);\n};\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\n\n\nP.decimalPlaces = P.dp = function () {\n  var w,\n      d = this.d,\n      n = NaN;\n\n  if (d) {\n    w = d.length - 1;\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE; // Subtract the number of trailing zeros of the last word.\n\n    w = d[w];\n    if (w) for (; w % 10 == 0; w /= 10) n--;\n    if (n < 0) n = 0;\n  }\n\n  return n;\n};\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.dividedBy = P.div = function (y) {\n  return divide(this, new this.constructor(y));\n};\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.dividedToIntegerBy = P.divToInt = function (y) {\n  var x = this,\n      Ctor = x.constructor;\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n};\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\n\n\nP.equals = P.eq = function (y) {\n  return this.cmp(y) === 0;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\n\n\nP.floor = function () {\n  return finalise(new this.constructor(this), this.e + 1, 3);\n};\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\n\n\nP.greaterThan = P.gt = function (y) {\n  return this.cmp(y) > 0;\n};\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\n\n\nP.greaterThanOrEqualTo = P.gte = function (y) {\n  var k = this.cmp(y);\n  return k == 1 || k === 0;\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\n\n\nP.hyperbolicCosine = P.cosh = function () {\n  var k,\n      n,\n      pr,\n      rm,\n      len,\n      x = this,\n      Ctor = x.constructor,\n      one = new Ctor(1);\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\n  if (x.isZero()) return one;\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n  Ctor.rounding = 1;\n  len = x.d.length; // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\n  // Estimate the optimum number of times to use the argument reduction.\n  // TODO? Estimation reused from cosine() and may not be optimal here.\n\n  if (len < 32) {\n    k = Math.ceil(len / 3);\n    n = (1 / tinyPow(4, k)).toString();\n  } else {\n    k = 16;\n    n = '2.3283064365386962890625e-10';\n  }\n\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true); // Reverse argument reduction\n\n  var cosh2_x,\n      i = k,\n      d8 = new Ctor(8);\n\n  for (; i--;) {\n    cosh2_x = x.times(x);\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n  }\n\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\n\n\nP.hyperbolicSine = P.sinh = function () {\n  var k,\n      pr,\n      rm,\n      len,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n  Ctor.rounding = 1;\n  len = x.d.length;\n\n  if (len < 3) {\n    x = taylorSeries(Ctor, 2, x, x, true);\n  } else {\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\n    // 3 multiplications and 1 addition\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\n    // 4 multiplications and 2 additions\n    // Estimate the optimum number of times to use the argument reduction.\n    k = 1.4 * Math.sqrt(len);\n    k = k > 16 ? 16 : k | 0;\n    x = x.times(1 / tinyPow(5, k));\n    x = taylorSeries(Ctor, 2, x, x, true); // Reverse argument reduction\n\n    var sinh2_x,\n        d5 = new Ctor(5),\n        d16 = new Ctor(16),\n        d20 = new Ctor(20);\n\n    for (; k--;) {\n      sinh2_x = x.times(x);\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n    }\n  }\n\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return finalise(x, pr, rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\n\n\nP.hyperbolicTangent = P.tanh = function () {\n  var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite()) return new Ctor(x.s);\n  if (x.isZero()) return new Ctor(x);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + 7;\n  Ctor.rounding = 1;\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n};\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\n\n\nP.inverseCosine = P.acos = function () {\n  var halfPi,\n      x = this,\n      Ctor = x.constructor,\n      k = x.abs().cmp(1),\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n\n  if (k !== -1) {\n    return k === 0 // |x| is 1\n    ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) // |x| > 1 or x is NaN\n    : new Ctor(NaN);\n  }\n\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5); // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\n\n  Ctor.precision = pr + 6;\n  Ctor.rounding = 1;\n  x = x.asin();\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return halfPi.minus(x);\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\n\n\nP.inverseHyperbolicCosine = P.acosh = function () {\n  var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\n  if (!x.isFinite()) return new Ctor(x);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n  Ctor.rounding = 1;\n  external = false;\n  x = x.times(x).minus(1).sqrt().plus(x);\n  external = true;\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return x.ln();\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\n\n\nP.inverseHyperbolicSine = P.asinh = function () {\n  var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n  Ctor.rounding = 1;\n  external = false;\n  x = x.times(x).plus(1).sqrt().plus(x);\n  external = true;\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return x.ln();\n};\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\n\n\nP.inverseHyperbolicTangent = P.atanh = function () {\n  var pr,\n      rm,\n      wpr,\n      xsd,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite()) return new Ctor(NaN);\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  xsd = x.sd();\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\n  Ctor.precision = wpr = xsd - x.e;\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n  Ctor.precision = pr + 4;\n  Ctor.rounding = 1;\n  x = x.ln();\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return x.times(0.5);\n};\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\n\n\nP.inverseSine = P.asin = function () {\n  var halfPi,\n      k,\n      pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (x.isZero()) return new Ctor(x);\n  k = x.abs().cmp(1);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n\n  if (k !== -1) {\n    // |x| is 1\n    if (k === 0) {\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n      halfPi.s = x.s;\n      return halfPi;\n    } // |x| > 1 or x is NaN\n\n\n    return new Ctor(NaN);\n  } // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\n\n\n  Ctor.precision = pr + 6;\n  Ctor.rounding = 1;\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return x.times(2);\n};\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\n\n\nP.inverseTangent = P.atan = function () {\n  var i,\n      j,\n      k,\n      n,\n      px,\n      t,\n      r,\n      wpr,\n      x2,\n      x = this,\n      Ctor = x.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding;\n\n  if (!x.isFinite()) {\n    if (!x.s) return new Ctor(NaN);\n\n    if (pr + 4 <= PI_PRECISION) {\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\n      r.s = x.s;\n      return r;\n    }\n  } else if (x.isZero()) {\n    return new Ctor(x);\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\n    r.s = x.s;\n    return r;\n  }\n\n  Ctor.precision = wpr = pr + 10;\n  Ctor.rounding = 1; // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\n  // Argument reduction\n  // Ensure |x| < 0.42\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\n\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\n\n  external = false;\n  j = Math.ceil(wpr / LOG_BASE);\n  n = 1;\n  x2 = x.times(x);\n  r = new Ctor(x);\n  px = x; // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\n\n  for (; i !== -1;) {\n    px = px.times(x2);\n    t = r.minus(px.div(n += 2));\n    px = px.times(x2);\n    r = t.plus(px.div(n += 2));\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\n  }\n\n  if (k) r = r.times(2 << k - 1);\n  external = true;\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n};\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\n\n\nP.isFinite = function () {\n  return !!this.d;\n};\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\n\n\nP.isInteger = P.isInt = function () {\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n};\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\n\n\nP.isNaN = function () {\n  return !this.s;\n};\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\n\n\nP.isNegative = P.isNeg = function () {\n  return this.s < 0;\n};\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\n\n\nP.isPositive = P.isPos = function () {\n  return this.s > 0;\n};\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\n\n\nP.isZero = function () {\n  return !!this.d && this.d[0] === 0;\n};\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\n\n\nP.lessThan = P.lt = function (y) {\n  return this.cmp(y) < 0;\n};\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\n\n\nP.lessThanOrEqualTo = P.lte = function (y) {\n  return this.cmp(y) < 1;\n};\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\n\n\nP.logarithm = P.log = function (base) {\n  var isBase10,\n      d,\n      denominator,\n      k,\n      inf,\n      num,\n      sd,\n      r,\n      arg = this,\n      Ctor = arg.constructor,\n      pr = Ctor.precision,\n      rm = Ctor.rounding,\n      guard = 5; // Default base is 10.\n\n  if (base == null) {\n    base = new Ctor(10);\n    isBase10 = true;\n  } else {\n    base = new Ctor(base);\n    d = base.d; // Return NaN if base is negative, or non-finite, or is 0 or 1.\n\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\n    isBase10 = base.eq(10);\n  }\n\n  d = arg.d; // Is arg negative, non-finite, 0 or 1?\n\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n  } // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\n  // integer power of 10.\n\n\n  if (isBase10) {\n    if (d.length > 1) {\n      inf = true;\n    } else {\n      for (k = d[0]; k % 10 === 0;) k /= 10;\n\n      inf = k !== 1;\n    }\n  }\n\n  external = false;\n  sd = pr + guard;\n  num = naturalLogarithm(arg, sd);\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd); // The result will have 5 rounding digits.\n\n  r = divide(num, denominator, sd, 1); // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\n  // calculate 10 further digits.\n  //\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\n  // further digits, the last 14 are nines, round up and assume the result is exact.\n  // Also assume the result is exact if the last 14 are zero.\n  //\n  // Example of a result that will be incorrectly rounded:\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\n  // place is still 2.6.\n\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\n    do {\n      sd += 10;\n      num = naturalLogarithm(arg, sd);\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n      r = divide(num, denominator, sd, 1);\n\n      if (!inf) {\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n          r = finalise(r, pr + 1, 0);\n        }\n\n        break;\n      }\n    } while (checkRoundingDigits(r.d, k += 10, rm));\n  }\n\n  external = true;\n  return finalise(r, pr, rm);\n};\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\n\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\n\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.minus = P.sub = function (y) {\n  var d,\n      e,\n      i,\n      j,\n      k,\n      len,\n      pr,\n      rm,\n      xd,\n      xe,\n      xLTy,\n      yd,\n      x = this,\n      Ctor = x.constructor;\n  y = new Ctor(y); // If either is not finite...\n\n  if (!x.d || !y.d) {\n    // Return NaN if either is NaN.\n    if (!x.s || !y.s) y = new Ctor(NaN); // Return y negated if x is finite and y is ±Infinity.\n    else if (x.d) y.s = -y.s; // Return x if y is finite and x is ±Infinity.\n    // Return x if both are ±Infinity with different signs.\n    // Return NaN if both are ±Infinity with the same sign.\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n    return y;\n  } // If signs differ...\n\n\n  if (x.s != y.s) {\n    y.s = -y.s;\n    return x.plus(y);\n  }\n\n  xd = x.d;\n  yd = y.d;\n  pr = Ctor.precision;\n  rm = Ctor.rounding; // If either is zero...\n\n  if (!xd[0] || !yd[0]) {\n    // Return y negated if x is zero and y is non-zero.\n    if (yd[0]) y.s = -y.s; // Return x if y is zero and x is non-zero.\n    else if (xd[0]) y = new Ctor(x); // Return zero if both are zero.\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\n    else return new Ctor(rm === 3 ? -0 : 0);\n    return external ? finalise(y, pr, rm) : y;\n  } // x and y are finite, non-zero numbers with the same sign.\n  // Calculate base 1e7 exponents.\n\n\n  e = mathfloor(y.e / LOG_BASE);\n  xe = mathfloor(x.e / LOG_BASE);\n  xd = xd.slice();\n  k = xe - e; // If base 1e7 exponents differ...\n\n  if (k) {\n    xLTy = k < 0;\n\n    if (xLTy) {\n      d = xd;\n      k = -k;\n      len = yd.length;\n    } else {\n      d = yd;\n      e = xe;\n      len = xd.length;\n    } // Numbers with massively different exponents would result in a very high number of\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\n\n\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n\n    if (k > i) {\n      k = i;\n      d.length = 1;\n    } // Prepend zeros to equalise exponents.\n\n\n    d.reverse();\n\n    for (i = k; i--;) d.push(0);\n\n    d.reverse(); // Base 1e7 exponents equal.\n  } else {\n    // Check digits to determine which is the bigger number.\n    i = xd.length;\n    len = yd.length;\n    xLTy = i < len;\n    if (xLTy) len = i;\n\n    for (i = 0; i < len; i++) {\n      if (xd[i] != yd[i]) {\n        xLTy = xd[i] < yd[i];\n        break;\n      }\n    }\n\n    k = 0;\n  }\n\n  if (xLTy) {\n    d = xd;\n    xd = yd;\n    yd = d;\n    y.s = -y.s;\n  }\n\n  len = xd.length; // Append zeros to `xd` if shorter.\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\n\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0; // Subtract yd from xd.\n\n\n  for (i = yd.length; i > k;) {\n    if (xd[--i] < yd[i]) {\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\n\n      --xd[j];\n      xd[i] += BASE;\n    }\n\n    xd[i] -= yd[i];\n  } // Remove trailing zeros.\n\n\n  for (; xd[--len] === 0;) xd.pop(); // Remove leading zeros and adjust exponent accordingly.\n\n\n  for (; xd[0] === 0; xd.shift()) --e; // Zero?\n\n\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\n  y.d = xd;\n  y.e = getBase10Exponent(xd, e);\n  return external ? finalise(y, pr, rm) : y;\n};\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\n\n\nP.modulo = P.mod = function (y) {\n  var q,\n      x = this,\n      Ctor = x.constructor;\n  y = new Ctor(y); // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\n\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN); // Return x if y is ±Infinity or x is ±0.\n\n  if (!y.d || x.d && !x.d[0]) {\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n  } // Prevent rounding of intermediate calculations.\n\n\n  external = false;\n\n  if (Ctor.modulo == 9) {\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\n    // result = x - q * y    where  0 <= result < abs(y)\n    q = divide(x, y.abs(), 0, 3, 1);\n    q.s *= y.s;\n  } else {\n    q = divide(x, y, 0, Ctor.modulo, 1);\n  }\n\n  q = q.times(y);\n  external = true;\n  return x.minus(q);\n};\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.naturalExponential = P.exp = function () {\n  return naturalExponential(this);\n};\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.naturalLogarithm = P.ln = function () {\n  return naturalLogarithm(this);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\n\n\nP.negated = P.neg = function () {\n  var x = new this.constructor(this);\n  x.s = -x.s;\n  return finalise(x);\n};\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.plus = P.add = function (y) {\n  var carry,\n      d,\n      e,\n      i,\n      k,\n      len,\n      pr,\n      rm,\n      xd,\n      yd,\n      x = this,\n      Ctor = x.constructor;\n  y = new Ctor(y); // If either is not finite...\n\n  if (!x.d || !y.d) {\n    // Return NaN if either is NaN.\n    if (!x.s || !y.s) y = new Ctor(NaN); // Return x if y is finite and x is ±Infinity.\n    // Return x if both are ±Infinity with the same sign.\n    // Return NaN if both are ±Infinity with different signs.\n    // Return y if x is finite and y is ±Infinity.\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\n    return y;\n  } // If signs differ...\n\n\n  if (x.s != y.s) {\n    y.s = -y.s;\n    return x.minus(y);\n  }\n\n  xd = x.d;\n  yd = y.d;\n  pr = Ctor.precision;\n  rm = Ctor.rounding; // If either is zero...\n\n  if (!xd[0] || !yd[0]) {\n    // Return x if y is zero.\n    // Return y if y is non-zero.\n    if (!yd[0]) y = new Ctor(x);\n    return external ? finalise(y, pr, rm) : y;\n  } // x and y are finite, non-zero numbers with the same sign.\n  // Calculate base 1e7 exponents.\n\n\n  k = mathfloor(x.e / LOG_BASE);\n  e = mathfloor(y.e / LOG_BASE);\n  xd = xd.slice();\n  i = k - e; // If base 1e7 exponents differ...\n\n  if (i) {\n    if (i < 0) {\n      d = xd;\n      i = -i;\n      len = yd.length;\n    } else {\n      d = yd;\n      e = k;\n      len = xd.length;\n    } // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\n\n\n    k = Math.ceil(pr / LOG_BASE);\n    len = k > len ? k + 1 : len + 1;\n\n    if (i > len) {\n      i = len;\n      d.length = 1;\n    } // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\n\n\n    d.reverse();\n\n    for (; i--;) d.push(0);\n\n    d.reverse();\n  }\n\n  len = xd.length;\n  i = yd.length; // If yd is longer than xd, swap xd and yd so xd points to the longer array.\n\n  if (len - i < 0) {\n    i = len;\n    d = yd;\n    yd = xd;\n    xd = d;\n  } // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\n\n\n  for (carry = 0; i;) {\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n    xd[i] %= BASE;\n  }\n\n  if (carry) {\n    xd.unshift(carry);\n    ++e;\n  } // Remove trailing zeros.\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\n\n  y.d = xd;\n  y.e = getBase10Exponent(xd, e);\n  return external ? finalise(y, pr, rm) : y;\n};\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\n\n\nP.precision = P.sd = function (z) {\n  var k,\n      x = this;\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\n\n  if (x.d) {\n    k = getPrecision(x.d);\n    if (z && x.e + 1 > k) k = x.e + 1;\n  } else {\n    k = NaN;\n  }\n\n  return k;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\n\n\nP.round = function () {\n  var x = this,\n      Ctor = x.constructor;\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n};\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\n\n\nP.sine = P.sin = function () {\n  var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite()) return new Ctor(NaN);\n  if (x.isZero()) return new Ctor(x);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n  Ctor.rounding = 1;\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\n\n\nP.squareRoot = P.sqrt = function () {\n  var m,\n      n,\n      sd,\n      r,\n      rep,\n      t,\n      x = this,\n      d = x.d,\n      e = x.e,\n      s = x.s,\n      Ctor = x.constructor; // Negative/NaN/Infinity/zero?\n\n  if (s !== 1 || !d || !d[0]) {\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n  }\n\n  external = false; // Initial estimate.\n\n  s = Math.sqrt(+x); // Math.sqrt underflow/overflow?\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n\n  if (s == 0 || s == 1 / 0) {\n    n = digitsToString(d);\n    if ((n.length + e) % 2 == 0) n += '0';\n    s = Math.sqrt(n);\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n\n    if (s == 1 / 0) {\n      n = '5e' + e;\n    } else {\n      n = s.toExponential();\n      n = n.slice(0, n.indexOf('e') + 1) + e;\n    }\n\n    r = new Ctor(n);\n  } else {\n    r = new Ctor(s.toString());\n  }\n\n  sd = (e = Ctor.precision) + 3; // Newton-Raphson iteration.\n\n  for (;;) {\n    t = r;\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5); // TODO? Replace with for-loop and checkRoundingDigits.\n\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n      n = n.slice(sd - 3, sd + 1); // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\n\n      if (n == '9999' || !rep && n == '4999') {\n        // On the first iteration only, check to see if rounding up gives the exact result as the\n        // nines may infinitely repeat.\n        if (!rep) {\n          finalise(t, e + 1, 0);\n\n          if (t.times(t).eq(x)) {\n            r = t;\n            break;\n          }\n        }\n\n        sd += 4;\n        rep = 1;\n      } else {\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\n        // If not, then there are further digits and m will be truthy.\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n          // Truncate to the first rounding digit.\n          finalise(r, e + 1, 1);\n          m = !r.times(r).eq(x);\n        }\n\n        break;\n      }\n    }\n  }\n\n  external = true;\n  return finalise(r, e, Ctor.rounding, m);\n};\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\n\n\nP.tangent = P.tan = function () {\n  var pr,\n      rm,\n      x = this,\n      Ctor = x.constructor;\n  if (!x.isFinite()) return new Ctor(NaN);\n  if (x.isZero()) return new Ctor(x);\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  Ctor.precision = pr + 10;\n  Ctor.rounding = 1;\n  x = x.sin();\n  x.s = 1;\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n  Ctor.precision = pr;\n  Ctor.rounding = rm;\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n};\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\n\n\nP.times = P.mul = function (y) {\n  var carry,\n      e,\n      i,\n      k,\n      r,\n      rL,\n      t,\n      xdL,\n      ydL,\n      x = this,\n      Ctor = x.constructor,\n      xd = x.d,\n      yd = (y = new Ctor(y)).d;\n  y.s *= x.s; // If either is NaN, ±Infinity or ±0...\n\n  if (!xd || !xd[0] || !yd || !yd[0]) {\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd // Return NaN if either is NaN.\n    // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\n    ? NaN // Return ±Infinity if either is ±Infinity.\n    // Return ±0 if either is ±0.\n    : !xd || !yd ? y.s / 0 : y.s * 0);\n  }\n\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n  xdL = xd.length;\n  ydL = yd.length; // Ensure xd points to the longer array.\n\n  if (xdL < ydL) {\n    r = xd;\n    xd = yd;\n    yd = r;\n    rL = xdL;\n    xdL = ydL;\n    ydL = rL;\n  } // Initialise the result array with zeros.\n\n\n  r = [];\n  rL = xdL + ydL;\n\n  for (i = rL; i--;) r.push(0); // Multiply!\n\n\n  for (i = ydL; --i >= 0;) {\n    carry = 0;\n\n    for (k = xdL + i; k > i;) {\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\n      r[k--] = t % BASE | 0;\n      carry = t / BASE | 0;\n    }\n\n    r[k] = (r[k] + carry) % BASE | 0;\n  } // Remove trailing zeros.\n\n\n  for (; !r[--rL];) r.pop();\n\n  if (carry) ++e;else r.shift();\n  y.d = r;\n  y.e = getBase10Exponent(r, e);\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\n\n\nP.toBinary = function (sd, rm) {\n  return toStringBinary(this, 2, sd, rm);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\n\n\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\n  var x = this,\n      Ctor = x.constructor;\n  x = new Ctor(x);\n  if (dp === void 0) return x;\n  checkInt32(dp, 0, MAX_DIGITS);\n  if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n  return finalise(x, dp + x.e + 1, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\n\n\nP.toExponential = function (dp, rm) {\n  var str,\n      x = this,\n      Ctor = x.constructor;\n\n  if (dp === void 0) {\n    str = finiteToString(x, true);\n  } else {\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    x = finalise(new Ctor(x), dp + 1, rm);\n    str = finiteToString(x, true, dp + 1);\n  }\n\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\n\n\nP.toFixed = function (dp, rm) {\n  var str,\n      y,\n      x = this,\n      Ctor = x.constructor;\n\n  if (dp === void 0) {\n    str = finiteToString(x);\n  } else {\n    checkInt32(dp, 0, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\n    str = finiteToString(y, false, dp + y.e + 1);\n  } // To determine whether to add the minus sign look at the value before it was rounded,\n  // i.e. look at `x` rather than `y`.\n\n\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\n\n\nP.toFraction = function (maxD) {\n  var d,\n      d0,\n      d1,\n      d2,\n      e,\n      k,\n      n,\n      n0,\n      n1,\n      pr,\n      q,\n      r,\n      x = this,\n      xd = x.d,\n      Ctor = x.constructor;\n  if (!xd) return new Ctor(x);\n  n1 = d0 = new Ctor(1);\n  d1 = n0 = new Ctor(0);\n  d = new Ctor(d1);\n  e = d.e = getPrecision(xd) - x.e - 1;\n  k = e % LOG_BASE;\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n\n  if (maxD == null) {\n    // d is 10**e, the minimum max-denominator needed.\n    maxD = e > 0 ? d : n1;\n  } else {\n    n = new Ctor(maxD);\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\n    maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n  }\n\n  external = false;\n  n = new Ctor(digitsToString(xd));\n  pr = Ctor.precision;\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\n\n  for (;;) {\n    q = divide(n, d, 0, 1, 1);\n    d2 = d0.plus(q.times(d1));\n    if (d2.cmp(maxD) == 1) break;\n    d0 = d1;\n    d1 = d2;\n    d2 = n1;\n    n1 = n0.plus(q.times(d2));\n    n0 = d2;\n    d2 = d;\n    d = n.minus(q.times(d2));\n    n = d2;\n  }\n\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n  n0 = n0.plus(d2.times(n1));\n  d0 = d0.plus(d2.times(d1));\n  n0.s = n1.s = x.s; // Determine which fraction is closer to x, n0/d0 or n1/d1?\n\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n  Ctor.precision = pr;\n  external = true;\n  return r;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\n\n\nP.toHexadecimal = P.toHex = function (sd, rm) {\n  return toStringBinary(this, 16, sd, rm);\n};\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\n\n\nP.toNearest = function (y, rm) {\n  var x = this,\n      Ctor = x.constructor;\n  x = new Ctor(x);\n\n  if (y == null) {\n    // If x is not finite, return x.\n    if (!x.d) return x;\n    y = new Ctor(1);\n    rm = Ctor.rounding;\n  } else {\n    y = new Ctor(y);\n\n    if (rm === void 0) {\n      rm = Ctor.rounding;\n    } else {\n      checkInt32(rm, 0, 8);\n    } // If x is not finite, return x if y is not NaN, else NaN.\n\n\n    if (!x.d) return y.s ? x : y; // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\n\n    if (!y.d) {\n      if (y.s) y.s = x.s;\n      return y;\n    }\n  } // If y is not zero, calculate the nearest multiple of y to x.\n\n\n  if (y.d[0]) {\n    external = false;\n    x = divide(x, y, 0, rm, 1).times(y);\n    external = true;\n    finalise(x); // If y is zero, return zero with the sign of x.\n  } else {\n    y.s = x.s;\n    x = y;\n  }\n\n  return x;\n};\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\n\n\nP.toNumber = function () {\n  return +this;\n};\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\n\n\nP.toOctal = function (sd, rm) {\n  return toStringBinary(this, 8, sd, rm);\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\n\n\nP.toPower = P.pow = function (y) {\n  var e,\n      k,\n      pr,\n      r,\n      rm,\n      s,\n      x = this,\n      Ctor = x.constructor,\n      yn = +(y = new Ctor(y)); // Either ±Infinity, NaN or ±0?\n\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\n  x = new Ctor(x);\n  if (x.eq(1)) return x;\n  pr = Ctor.precision;\n  rm = Ctor.rounding;\n  if (y.eq(1)) return finalise(x, pr, rm); // y exponent\n\n  e = mathfloor(y.e / LOG_BASE); // If y is a small integer use the 'exponentiation by squaring' algorithm.\n\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n    r = intPow(Ctor, x, k, pr);\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n  }\n\n  s = x.s; // if x is negative\n\n  if (s < 0) {\n    // if y is not an integer\n    if (e < y.d.length - 1) return new Ctor(NaN); // Result is positive if x is negative and the last digit of integer y is even.\n\n    if ((y.d[e] & 1) == 0) s = 1; // if x.eq(-1)\n\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n      x.s = s;\n      return x;\n    }\n  } // Estimate result exponent.\n  // x^y = 10^e,  where e = y * log10(x)\n  // log10(x) = log10(x_significand) + x_exponent\n  // log10(x_significand) = ln(x_significand) / ln(10)\n\n\n  k = mathpow(+x, yn);\n  e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + '').e; // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\n  // Overflow/underflow?\n\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\n  external = false;\n  Ctor.rounding = x.s = 1; // Estimate the extra guard digits needed to ensure five correct rounding digits from\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\n  // new Decimal(2.32456).pow('2087987436534566.46411')\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\n\n  k = Math.min(12, (e + '').length); // r = x^y = exp(y*ln(x))\n\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr); // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\n\n  if (r.d) {\n    // Truncate to the required precision plus five rounding digits.\n    r = finalise(r, pr + 5, 1); // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\n    // the result.\n\n    if (checkRoundingDigits(r.d, pr, rm)) {\n      e = pr + 10; // Truncate to the increased precision plus five rounding digits.\n\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1); // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\n\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n        r = finalise(r, pr + 1, 0);\n      }\n    }\n  }\n\n  r.s = s;\n  external = true;\n  Ctor.rounding = rm;\n  return finalise(r, pr, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\n\n\nP.toPrecision = function (sd, rm) {\n  var str,\n      x = this,\n      Ctor = x.constructor;\n\n  if (sd === void 0) {\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n  } else {\n    checkInt32(sd, 1, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n    x = finalise(new Ctor(x), sd, rm);\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n  }\n\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\n\n\nP.toSignificantDigits = P.toSD = function (sd, rm) {\n  var x = this,\n      Ctor = x.constructor;\n\n  if (sd === void 0) {\n    sd = Ctor.precision;\n    rm = Ctor.rounding;\n  } else {\n    checkInt32(sd, 1, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n  }\n\n  return finalise(new Ctor(x), sd, rm);\n};\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\n\n\nP.toString = function () {\n  var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\n};\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\n\n\nP.truncated = P.trunc = function () {\n  return finalise(new this.constructor(this), this.e + 1, 1);\n};\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\n\n\nP.valueOf = P.toJSON = function () {\n  var x = this,\n      Ctor = x.constructor,\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n  return x.isNeg() ? '-' + str : str;\n}; // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\n\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\n\n\nfunction digitsToString(d) {\n  var i,\n      k,\n      ws,\n      indexOfLastWord = d.length - 1,\n      str = '',\n      w = d[0];\n\n  if (indexOfLastWord > 0) {\n    str += w;\n\n    for (i = 1; i < indexOfLastWord; i++) {\n      ws = d[i] + '';\n      k = LOG_BASE - ws.length;\n      if (k) str += getZeroString(k);\n      str += ws;\n    }\n\n    w = d[i];\n    ws = w + '';\n    k = LOG_BASE - ws.length;\n    if (k) str += getZeroString(k);\n  } else if (w === 0) {\n    return '0';\n  } // Remove trailing zeros of last w.\n\n\n  for (; w % 10 === 0;) w /= 10;\n\n  return str + w;\n}\n\nfunction checkInt32(i, min, max) {\n  if (i !== ~~i || i < min || i > max) {\n    throw Error(invalidArgument + i);\n  }\n}\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\n\n\nfunction checkRoundingDigits(d, i, rm, repeating) {\n  var di, k, r, rd; // Get the length of the first word of the array d.\n\n  for (k = d[0]; k >= 10; k /= 10) --i; // Is the rounding digit in the first word of d?\n\n\n  if (--i < 0) {\n    i += LOG_BASE;\n    di = 0;\n  } else {\n    di = Math.ceil((i + 1) / LOG_BASE);\n    i %= LOG_BASE;\n  } // i is the index (0 - 6) of the rounding digit.\n  // E.g. if within the word 3487563 the first rounding digit is 5,\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\n\n\n  k = mathpow(10, LOG_BASE - i);\n  rd = d[di] % k | 0;\n\n  if (repeating == null) {\n    if (i < 3) {\n      if (i == 0) rd = rd / 100 | 0;else if (i == 1) rd = rd / 10 | 0;\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\n    } else {\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n    }\n  } else {\n    if (i < 4) {\n      if (i == 0) rd = rd / 1000 | 0;else if (i == 1) rd = rd / 100 | 0;else if (i == 2) rd = rd / 10 | 0;\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n    } else {\n      r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\n    }\n  }\n\n  return r;\n} // Convert string of `baseIn` to an array of numbers of `baseOut`.\n// Eg. convertBase('255', 10, 16) returns [15, 15].\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\n\n\nfunction convertBase(str, baseIn, baseOut) {\n  var j,\n      arr = [0],\n      arrL,\n      i = 0,\n      strL = str.length;\n\n  for (; i < strL;) {\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\n\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\n\n    for (j = 0; j < arr.length; j++) {\n      if (arr[j] > baseOut - 1) {\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\n        arr[j + 1] += arr[j] / baseOut | 0;\n        arr[j] %= baseOut;\n      }\n    }\n  }\n\n  return arr.reverse();\n}\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\n\n\nfunction cosine(Ctor, x) {\n  var k, len, y;\n  if (x.isZero()) return x; // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\n  // Estimate the optimum number of times to use the argument reduction.\n\n  len = x.d.length;\n\n  if (len < 32) {\n    k = Math.ceil(len / 3);\n    y = (1 / tinyPow(4, k)).toString();\n  } else {\n    k = 16;\n    y = '2.3283064365386962890625e-10';\n  }\n\n  Ctor.precision += k;\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1)); // Reverse argument reduction\n\n  for (var i = k; i--;) {\n    var cos2x = x.times(x);\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n  }\n\n  Ctor.precision -= k;\n  return x;\n}\n/*\r\n * Perform division in the specified base.\r\n */\n\n\nvar divide = function () {\n  // Assumes non-zero x and k, and hence non-zero result.\n  function multiplyInteger(x, k, base) {\n    var temp,\n        carry = 0,\n        i = x.length;\n\n    for (x = x.slice(); i--;) {\n      temp = x[i] * k + carry;\n      x[i] = temp % base | 0;\n      carry = temp / base | 0;\n    }\n\n    if (carry) x.unshift(carry);\n    return x;\n  }\n\n  function compare(a, b, aL, bL) {\n    var i, r;\n\n    if (aL != bL) {\n      r = aL > bL ? 1 : -1;\n    } else {\n      for (i = r = 0; i < aL; i++) {\n        if (a[i] != b[i]) {\n          r = a[i] > b[i] ? 1 : -1;\n          break;\n        }\n      }\n    }\n\n    return r;\n  }\n\n  function subtract(a, b, aL, base) {\n    var i = 0; // Subtract b from a.\n\n    for (; aL--;) {\n      a[aL] -= i;\n      i = a[aL] < b[aL] ? 1 : 0;\n      a[aL] = i * base + a[aL] - b[aL];\n    } // Remove leading zeros.\n\n\n    for (; !a[0] && a.length > 1;) a.shift();\n  }\n\n  return function (x, y, pr, rm, dp, base) {\n    var cmp,\n        e,\n        i,\n        k,\n        logBase,\n        more,\n        prod,\n        prodL,\n        q,\n        qd,\n        rem,\n        remL,\n        rem0,\n        sd,\n        t,\n        xi,\n        xL,\n        yd0,\n        yL,\n        yz,\n        Ctor = x.constructor,\n        sign = x.s == y.s ? 1 : -1,\n        xd = x.d,\n        yd = y.d; // Either NaN, Infinity or 0?\n\n    if (!xd || !xd[0] || !yd || !yd[0]) {\n      return new Ctor( // Return NaN if either NaN, or both Infinity or 0.\n      !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\n      xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\n    }\n\n    if (base) {\n      logBase = 1;\n      e = x.e - y.e;\n    } else {\n      base = BASE;\n      logBase = LOG_BASE;\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n    }\n\n    yL = yd.length;\n    xL = xd.length;\n    q = new Ctor(sign);\n    qd = q.d = []; // Result exponent may be one less than e.\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\n\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\n\n    if (yd[i] > (xd[i] || 0)) e--;\n\n    if (pr == null) {\n      sd = pr = Ctor.precision;\n      rm = Ctor.rounding;\n    } else if (dp) {\n      sd = pr + (x.e - y.e) + 1;\n    } else {\n      sd = pr;\n    }\n\n    if (sd < 0) {\n      qd.push(1);\n      more = true;\n    } else {\n      // Convert precision in number of base 10 digits to base 1e7 digits.\n      sd = sd / logBase + 2 | 0;\n      i = 0; // divisor < 1e7\n\n      if (yL == 1) {\n        k = 0;\n        yd = yd[0];\n        sd++; // k is the carry.\n\n        for (; (i < xL || k) && sd--; i++) {\n          t = k * base + (xd[i] || 0);\n          qd[i] = t / yd | 0;\n          k = t % yd | 0;\n        }\n\n        more = k || i < xL; // divisor >= 1e7\n      } else {\n        // Normalise xd and yd so highest order digit of yd is >= base/2\n        k = base / (yd[0] + 1) | 0;\n\n        if (k > 1) {\n          yd = multiplyInteger(yd, k, base);\n          xd = multiplyInteger(xd, k, base);\n          yL = yd.length;\n          xL = xd.length;\n        }\n\n        xi = yL;\n        rem = xd.slice(0, yL);\n        remL = rem.length; // Add zeros to make remainder as long as divisor.\n\n        for (; remL < yL;) rem[remL++] = 0;\n\n        yz = yd.slice();\n        yz.unshift(0);\n        yd0 = yd[0];\n        if (yd[1] >= base / 2) ++yd0;\n\n        do {\n          k = 0; // Compare divisor and remainder.\n\n          cmp = compare(yd, rem, yL, remL); // If divisor < remainder.\n\n          if (cmp < 0) {\n            // Calculate trial digit, k.\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0); // k will be how many times the divisor goes into the current remainder.\n\n            k = rem0 / yd0 | 0; //  Algorithm:\n            //  1. product = divisor * trial digit (k)\n            //  2. if product > remainder: product -= divisor, k--\n            //  3. remainder -= product\n            //  4. if product was < remainder at 2:\n            //    5. compare new remainder and divisor\n            //    6. If remainder > divisor: remainder -= divisor, k++\n\n            if (k > 1) {\n              if (k >= base) k = base - 1; // product = divisor * trial digit.\n\n              prod = multiplyInteger(yd, k, base);\n              prodL = prod.length;\n              remL = rem.length; // Compare product and remainder.\n\n              cmp = compare(prod, rem, prodL, remL); // product > remainder.\n\n              if (cmp == 1) {\n                k--; // Subtract divisor from product.\n\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\n              }\n            } else {\n              // cmp is -1.\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\n              if (k == 0) cmp = k = 1;\n              prod = yd.slice();\n            }\n\n            prodL = prod.length;\n            if (prodL < remL) prod.unshift(0); // Subtract product from remainder.\n\n            subtract(rem, prod, remL, base); // If product was < previous remainder.\n\n            if (cmp == -1) {\n              remL = rem.length; // Compare divisor and new remainder.\n\n              cmp = compare(yd, rem, yL, remL); // If divisor < new remainder, subtract divisor from remainder.\n\n              if (cmp < 1) {\n                k++; // Subtract divisor from remainder.\n\n                subtract(rem, yL < remL ? yz : yd, remL, base);\n              }\n            }\n\n            remL = rem.length;\n          } else if (cmp === 0) {\n            k++;\n            rem = [0];\n          } // if cmp === 1, k will be 0\n          // Add the next digit, k, to the result array.\n\n\n          qd[i++] = k; // Update the remainder.\n\n          if (cmp && rem[0]) {\n            rem[remL++] = xd[xi] || 0;\n          } else {\n            rem = [xd[xi]];\n            remL = 1;\n          }\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n\n        more = rem[0] !== void 0;\n      } // Leading zero?\n\n\n      if (!qd[0]) qd.shift();\n    } // logBase is 1 when divide is being used for base conversion.\n\n\n    if (logBase == 1) {\n      q.e = e;\n      inexact = more;\n    } else {\n      // To calculate q.e, first get the number of digits of qd[0].\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\n\n      q.e = i + e * logBase - 1;\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n    }\n\n    return q;\n  };\n}();\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\n\n\nfunction finalise(x, sd, rm, isTruncated) {\n  var digits,\n      i,\n      j,\n      k,\n      rd,\n      roundUp,\n      w,\n      xd,\n      xdi,\n      Ctor = x.constructor; // Don't round if sd is null or undefined.\n\n  out: if (sd != null) {\n    xd = x.d; // Infinity/NaN.\n\n    if (!xd) return x; // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\n    // w: the word of xd containing rd, a base 1e7 number.\n    // xdi: the index of w within xd.\n    // digits: the number of digits of w.\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\n    // they had leading zeros)\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\n    // Get the length of the first word of the digits array xd.\n\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\n\n    i = sd - digits; // Is the rounding digit in the first word of xd?\n\n    if (i < 0) {\n      i += LOG_BASE;\n      j = sd;\n      w = xd[xdi = 0]; // Get the rounding digit at index j of w.\n\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n    } else {\n      xdi = Math.ceil((i + 1) / LOG_BASE);\n      k = xd.length;\n\n      if (xdi >= k) {\n        if (isTruncated) {\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\n          for (; k++ <= xdi;) xd.push(0);\n\n          w = rd = 0;\n          digits = 1;\n          i %= LOG_BASE;\n          j = i - LOG_BASE + 1;\n        } else {\n          break out;\n        }\n      } else {\n        w = k = xd[xdi]; // Get the number of digits of w.\n\n        for (digits = 1; k >= 10; k /= 10) digits++; // Get the index of rd within w.\n\n\n        i %= LOG_BASE; // Get the index of rd within w, adjusted for leading zeros.\n        // The number of leading zeros of w is given by LOG_BASE - digits.\n\n        j = i - LOG_BASE + digits; // Get the rounding digit at index j of w.\n\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n      }\n    } // Are there any non-zero digits after the rounding digit?\n\n\n    isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1)); // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\n    // will give 714.\n\n    roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.\n    (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n\n    if (sd < 1 || !xd[0]) {\n      xd.length = 0;\n\n      if (roundUp) {\n        // Convert sd to decimal places.\n        sd -= x.e + 1; // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n        x.e = -sd || 0;\n      } else {\n        // Zero.\n        xd[0] = x.e = 0;\n      }\n\n      return x;\n    } // Remove excess digits.\n\n\n    if (i == 0) {\n      xd.length = xdi;\n      k = 1;\n      xdi--;\n    } else {\n      xd.length = xdi + 1;\n      k = mathpow(10, LOG_BASE - i); // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n      // j > 0 means i > number of leading zeros of w.\n\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n    }\n\n    if (roundUp) {\n      for (;;) {\n        // Is the digit to be rounded up in the first word of xd?\n        if (xdi == 0) {\n          // i will be the length of xd[0] before k is added.\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\n\n          j = xd[0] += k;\n\n          for (k = 1; j >= 10; j /= 10) k++; // if i != k the length has increased.\n\n\n          if (i != k) {\n            x.e++;\n            if (xd[0] == BASE) xd[0] = 1;\n          }\n\n          break;\n        } else {\n          xd[xdi] += k;\n          if (xd[xdi] != BASE) break;\n          xd[xdi--] = 0;\n          k = 1;\n        }\n      }\n    } // Remove trailing zeros.\n\n\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\n  }\n\n  if (external) {\n    // Overflow?\n    if (x.e > Ctor.maxE) {\n      // Infinity.\n      x.d = null;\n      x.e = NaN; // Underflow?\n    } else if (x.e < Ctor.minE) {\n      // Zero.\n      x.e = 0;\n      x.d = [0]; // Ctor.underflow = true;\n    } // else Ctor.underflow = false;\n\n  }\n\n  return x;\n}\n\nfunction finiteToString(x, isExp, sd) {\n  if (!x.isFinite()) return nonFiniteToString(x);\n  var k,\n      e = x.e,\n      str = digitsToString(x.d),\n      len = str.length;\n\n  if (isExp) {\n    if (sd && (k = sd - len) > 0) {\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\n    } else if (len > 1) {\n      str = str.charAt(0) + '.' + str.slice(1);\n    }\n\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\n  } else if (e < 0) {\n    str = '0.' + getZeroString(-e - 1) + str;\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\n  } else if (e >= len) {\n    str += getZeroString(e + 1 - len);\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\n  } else {\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\n\n    if (sd && (k = sd - len) > 0) {\n      if (e + 1 === len) str += '.';\n      str += getZeroString(k);\n    }\n  }\n\n  return str;\n} // Calculate the base 10 exponent from the base 1e7 exponent.\n\n\nfunction getBase10Exponent(digits, e) {\n  var w = digits[0]; // Add the number of digits of the first word of the digits array.\n\n  for (e *= LOG_BASE; w >= 10; w /= 10) e++;\n\n  return e;\n}\n\nfunction getLn10(Ctor, sd, pr) {\n  if (sd > LN10_PRECISION) {\n    // Reset global state in case the exception is caught.\n    external = true;\n    if (pr) Ctor.precision = pr;\n    throw Error(precisionLimitExceeded);\n  }\n\n  return finalise(new Ctor(LN10), sd, 1, true);\n}\n\nfunction getPi(Ctor, sd, rm) {\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\n  return finalise(new Ctor(PI), sd, rm, true);\n}\n\nfunction getPrecision(digits) {\n  var w = digits.length - 1,\n      len = w * LOG_BASE + 1;\n  w = digits[w]; // If non-zero...\n\n  if (w) {\n    // Subtract the number of trailing zeros of the last word.\n    for (; w % 10 == 0; w /= 10) len--; // Add the number of digits of the first word.\n\n\n    for (w = digits[0]; w >= 10; w /= 10) len++;\n  }\n\n  return len;\n}\n\nfunction getZeroString(k) {\n  var zs = '';\n\n  for (; k--;) zs += '0';\n\n  return zs;\n}\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\n\n\nfunction intPow(Ctor, x, n, pr) {\n  var isTruncated,\n      r = new Ctor(1),\n      // Max n of 9007199254740991 takes 53 loop iterations.\n  // Maximum digits array length; leaves [28, 34] guard digits.\n  k = Math.ceil(pr / LOG_BASE + 4);\n  external = false;\n\n  for (;;) {\n    if (n % 2) {\n      r = r.times(x);\n      if (truncate(r.d, k)) isTruncated = true;\n    }\n\n    n = mathfloor(n / 2);\n\n    if (n === 0) {\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\n      n = r.d.length - 1;\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\n      break;\n    }\n\n    x = x.times(x);\n    truncate(x.d, k);\n  }\n\n  external = true;\n  return r;\n}\n\nfunction isOdd(n) {\n  return n.d[n.d.length - 1] & 1;\n}\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\n\n\nfunction maxOrMin(Ctor, args, ltgt) {\n  var y,\n      x = new Ctor(args[0]),\n      i = 0;\n\n  for (; ++i < args.length;) {\n    y = new Ctor(args[i]);\n\n    if (!y.s) {\n      x = y;\n      break;\n    } else if (x[ltgt](y)) {\n      x = y;\n    }\n  }\n\n  return x;\n}\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\n\n\nfunction naturalExponential(x, sd) {\n  var denominator,\n      guard,\n      j,\n      pow,\n      sum,\n      t,\n      wpr,\n      rep = 0,\n      i = 0,\n      k = 0,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision; // 0/NaN/Infinity?\n\n  if (!x.d || !x.d[0] || x.e > 17) {\n    return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n  }\n\n  if (sd == null) {\n    external = false;\n    wpr = pr;\n  } else {\n    wpr = sd;\n  }\n\n  t = new Ctor(0.03125); // while abs(x) >= 0.1\n\n  while (x.e > -2) {\n    // x = x / 2^5\n    x = x.times(t);\n    k += 5;\n  } // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\n  // necessary to ensure the first 4 rounding digits are correct.\n\n\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n  wpr += guard;\n  denominator = pow = sum = new Ctor(1);\n  Ctor.precision = wpr;\n\n  for (;;) {\n    pow = finalise(pow.times(x), wpr, 1);\n    denominator = denominator.times(++i);\n    t = sum.plus(divide(pow, denominator, wpr, 1));\n\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n      j = k;\n\n      while (j--) sum = finalise(sum.times(sum), wpr, 1); // Check to see if the first 4 rounding digits are [49]999.\n      // If so, repeat the summation with a higher precision, otherwise\n      // e.g. with precision: 18, rounding: 1\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\n      // `wpr - guard` is the index of first rounding digit.\n\n\n      if (sd == null) {\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n          Ctor.precision = wpr += 10;\n          denominator = pow = t = new Ctor(1);\n          i = 0;\n          rep++;\n        } else {\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\n        }\n      } else {\n        Ctor.precision = pr;\n        return sum;\n      }\n    }\n\n    sum = t;\n  }\n}\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\n\n\nfunction naturalLogarithm(y, sd) {\n  var c,\n      c0,\n      denominator,\n      e,\n      numerator,\n      rep,\n      sum,\n      t,\n      wpr,\n      x1,\n      x2,\n      n = 1,\n      guard = 10,\n      x = y,\n      xd = x.d,\n      Ctor = x.constructor,\n      rm = Ctor.rounding,\n      pr = Ctor.precision; // Is x negative or Infinity, NaN, 0 or 1?\n\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n  }\n\n  if (sd == null) {\n    external = false;\n    wpr = pr;\n  } else {\n    wpr = sd;\n  }\n\n  Ctor.precision = wpr += guard;\n  c = digitsToString(xd);\n  c0 = c.charAt(0);\n\n  if (Math.abs(e = x.e) < 1.5e15) {\n    // Argument reduction.\n    // The series converges faster the closer the argument is to 1, so using\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\n    // later be divided by this number, then separate out the power of 10 using\n    // ln(a*10^b) = ln(a) + b*ln(10).\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\n    // max n is 6 (gives 0.7 - 1.3)\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n      x = x.times(y);\n      c = digitsToString(x.d);\n      c0 = c.charAt(0);\n      n++;\n    }\n\n    e = x.e;\n\n    if (c0 > 1) {\n      x = new Ctor('0.' + c);\n      e++;\n    } else {\n      x = new Ctor(c0 + '.' + c.slice(1));\n    }\n  } else {\n    // The argument reduction method above may result in overflow if the argument y is a massive\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\n    Ctor.precision = pr;\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\n  } // x1 is x reduced to a value near 1.\n\n\n  x1 = x; // Taylor series.\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\n\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n  x2 = finalise(x.times(x), wpr, 1);\n  denominator = 3;\n\n  for (;;) {\n    numerator = finalise(numerator.times(x2), wpr, 1);\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n      sum = sum.times(2); // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\n\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\n      sum = divide(sum, new Ctor(n), wpr, 1); // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\n      // been repeated previously) and the first 4 rounding digits 9999?\n      // If so, restart the summation with a higher precision, otherwise\n      // e.g. with precision: 12, rounding: 1\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\n      // `wpr - guard` is the index of first rounding digit.\n\n      if (sd == null) {\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n          Ctor.precision = wpr += guard;\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n          x2 = finalise(x.times(x), wpr, 1);\n          denominator = rep = 1;\n        } else {\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\n        }\n      } else {\n        Ctor.precision = pr;\n        return sum;\n      }\n    }\n\n    sum = t;\n    denominator += 2;\n  }\n} // ±Infinity, NaN.\n\n\nfunction nonFiniteToString(x) {\n  // Unsigned.\n  return String(x.s * x.s / 0);\n}\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\n\n\nfunction parseDecimal(x, str) {\n  var e, i, len; // Decimal point?\n\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', ''); // Exponential form?\n\n  if ((i = str.search(/e/i)) > 0) {\n    // Determine exponent.\n    if (e < 0) e = i;\n    e += +str.slice(i + 1);\n    str = str.substring(0, i);\n  } else if (e < 0) {\n    // Integer.\n    e = str.length;\n  } // Determine leading zeros.\n\n\n  for (i = 0; str.charCodeAt(i) === 48; i++); // Determine trailing zeros.\n\n\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\n\n  str = str.slice(i, len);\n\n  if (str) {\n    len -= i;\n    x.e = e = e - i - 1;\n    x.d = []; // Transform base\n    // e is the base 10 exponent.\n    // i is where to slice str to get the first word of the digits array.\n\n    i = (e + 1) % LOG_BASE;\n    if (e < 0) i += LOG_BASE;\n\n    if (i < len) {\n      if (i) x.d.push(+str.slice(0, i));\n\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\n\n      str = str.slice(i);\n      i = LOG_BASE - str.length;\n    } else {\n      i -= len;\n    }\n\n    for (; i--;) str += '0';\n\n    x.d.push(+str);\n\n    if (external) {\n      // Overflow?\n      if (x.e > x.constructor.maxE) {\n        // Infinity.\n        x.d = null;\n        x.e = NaN; // Underflow?\n      } else if (x.e < x.constructor.minE) {\n        // Zero.\n        x.e = 0;\n        x.d = [0]; // x.constructor.underflow = true;\n      } // else x.constructor.underflow = false;\n\n    }\n  } else {\n    // Zero.\n    x.e = 0;\n    x.d = [0];\n  }\n\n  return x;\n}\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\n\n\nfunction parseOther(x, str) {\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n\n  if (str.indexOf('_') > -1) {\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n    if (isDecimal.test(str)) return parseDecimal(x, str);\n  } else if (str === 'Infinity' || str === 'NaN') {\n    if (!+str) x.s = NaN;\n    x.e = NaN;\n    x.d = null;\n    return x;\n  }\n\n  if (isHex.test(str)) {\n    base = 16;\n    str = str.toLowerCase();\n  } else if (isBinary.test(str)) {\n    base = 2;\n  } else if (isOctal.test(str)) {\n    base = 8;\n  } else {\n    throw Error(invalidArgument + str);\n  } // Is there a binary exponent part?\n\n\n  i = str.search(/p/i);\n\n  if (i > 0) {\n    p = +str.slice(i + 1);\n    str = str.substring(2, i);\n  } else {\n    str = str.slice(2);\n  } // Convert `str` as an integer then divide the result by `base` raised to a power such that the\n  // fraction part will be restored.\n\n\n  i = str.indexOf('.');\n  isFloat = i >= 0;\n  Ctor = x.constructor;\n\n  if (isFloat) {\n    str = str.replace('.', '');\n    len = str.length;\n    i = len - i; // log[10](16) = 1.2041... , log[10](88) = 1.9444....\n\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n  }\n\n  xd = convertBase(str, base, BASE);\n  xe = xd.length - 1; // Remove trailing zeros.\n\n  for (i = xe; xd[i] === 0; --i) xd.pop();\n\n  if (i < 0) return new Ctor(x.s * 0);\n  x.e = getBase10Exponent(xd, xe);\n  x.d = xd;\n  external = false; // At what precision to perform the division to ensure exact conversion?\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\n  // Therefore using 4 * the number of digits of str will always be enough.\n\n  if (isFloat) x = divide(x, divisor, len * 4); // Multiply by the binary exponent part if present.\n\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n  external = true;\n  return x;\n}\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\n\n\nfunction sine(Ctor, x) {\n  var k,\n      len = x.d.length;\n\n  if (len < 3) {\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\n  } // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\n  // Estimate the optimum number of times to use the argument reduction.\n\n\n  k = 1.4 * Math.sqrt(len);\n  k = k > 16 ? 16 : k | 0;\n  x = x.times(1 / tinyPow(5, k));\n  x = taylorSeries(Ctor, 2, x, x); // Reverse argument reduction\n\n  var sin2_x,\n      d5 = new Ctor(5),\n      d16 = new Ctor(16),\n      d20 = new Ctor(20);\n\n  for (; k--;) {\n    sin2_x = x.times(x);\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n  }\n\n  return x;\n} // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\n\n\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\n  var j,\n      t,\n      u,\n      x2,\n      i = 1,\n      pr = Ctor.precision,\n      k = Math.ceil(pr / LOG_BASE);\n  external = false;\n  x2 = x.times(x);\n  u = new Ctor(y);\n\n  for (;;) {\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n    t = u.plus(y);\n\n    if (t.d[k] !== void 0) {\n      for (j = k; t.d[j] === u.d[j] && j--;);\n\n      if (j == -1) break;\n    }\n\n    j = u;\n    u = y;\n    y = t;\n    t = j;\n    i++;\n  }\n\n  external = true;\n  t.d.length = k + 1;\n  return t;\n} // Exponent e must be positive and non-zero.\n\n\nfunction tinyPow(b, e) {\n  var n = b;\n\n  while (--e) n *= b;\n\n  return n;\n} // Return the absolute value of `x` reduced to less than or equal to half pi.\n\n\nfunction toLessThanHalfPi(Ctor, x) {\n  var t,\n      isNeg = x.s < 0,\n      pi = getPi(Ctor, Ctor.precision, 1),\n      halfPi = pi.times(0.5);\n  x = x.abs();\n\n  if (x.lte(halfPi)) {\n    quadrant = isNeg ? 4 : 1;\n    return x;\n  }\n\n  t = x.divToInt(pi);\n\n  if (t.isZero()) {\n    quadrant = isNeg ? 3 : 2;\n  } else {\n    x = x.minus(t.times(pi)); // 0 <= x < pi\n\n    if (x.lte(halfPi)) {\n      quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n      return x;\n    }\n\n    quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n  }\n\n  return x.minus(pi).abs();\n}\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\n\n\nfunction toStringBinary(x, baseOut, sd, rm) {\n  var base,\n      e,\n      i,\n      k,\n      len,\n      roundUp,\n      str,\n      xd,\n      y,\n      Ctor = x.constructor,\n      isExp = sd !== void 0;\n\n  if (isExp) {\n    checkInt32(sd, 1, MAX_DIGITS);\n    if (rm === void 0) rm = Ctor.rounding;else checkInt32(rm, 0, 8);\n  } else {\n    sd = Ctor.precision;\n    rm = Ctor.rounding;\n  }\n\n  if (!x.isFinite()) {\n    str = nonFiniteToString(x);\n  } else {\n    str = finiteToString(x);\n    i = str.indexOf('.'); // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\n    // log[2](10) = 3.321928094887362347870319429489390175864\n\n    if (isExp) {\n      base = 2;\n\n      if (baseOut == 16) {\n        sd = sd * 4 - 3;\n      } else if (baseOut == 8) {\n        sd = sd * 3 - 2;\n      }\n    } else {\n      base = baseOut;\n    } // Convert the number as an integer then divide the result by its base raised to a power such\n    // that the fraction part will be restored.\n    // Non-integer.\n\n\n    if (i >= 0) {\n      str = str.replace('.', '');\n      y = new Ctor(1);\n      y.e = str.length - i;\n      y.d = convertBase(finiteToString(y), 10, base);\n      y.e = y.d.length;\n    }\n\n    xd = convertBase(str, 10, base);\n    e = len = xd.length; // Remove trailing zeros.\n\n    for (; xd[--len] == 0;) xd.pop();\n\n    if (!xd[0]) {\n      str = isExp ? '0p+0' : '0';\n    } else {\n      if (i < 0) {\n        e--;\n      } else {\n        x = new Ctor(x);\n        x.d = xd;\n        x.e = e;\n        x = divide(x, y, sd, rm, 0, base);\n        xd = x.d;\n        e = x.e;\n        roundUp = inexact;\n      } // The rounding digit, i.e. the digit after the digit that may be rounded up.\n\n\n      i = xd[sd];\n      k = base / 2;\n      roundUp = roundUp || xd[sd + 1] !== void 0;\n      roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n      xd.length = sd;\n\n      if (roundUp) {\n        // Rounding up may mean the previous digit has to be rounded up and so on.\n        for (; ++xd[--sd] > base - 1;) {\n          xd[sd] = 0;\n\n          if (!sd) {\n            ++e;\n            xd.unshift(1);\n          }\n        }\n      } // Determine trailing zeros.\n\n\n      for (len = xd.length; !xd[len - 1]; --len); // E.g. [4, 11, 15] becomes 4bf.\n\n\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]); // Add binary exponent suffix?\n\n\n      if (isExp) {\n        if (len > 1) {\n          if (baseOut == 16 || baseOut == 8) {\n            i = baseOut == 16 ? 4 : 3;\n\n            for (--len; len % i; len++) str += '0';\n\n            xd = convertBase(str, base, baseOut);\n\n            for (len = xd.length; !xd[len - 1]; --len); // xd[0] will always be be 1\n\n\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\n          } else {\n            str = str.charAt(0) + '.' + str.slice(1);\n          }\n        }\n\n        str = str + (e < 0 ? 'p' : 'p+') + e;\n      } else if (e < 0) {\n        for (; ++e;) str = '0' + str;\n\n        str = '0.' + str;\n      } else {\n        if (++e > len) for (e -= len; e--;) str += '0';else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\n      }\n    }\n\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\n  }\n\n  return x.s < 0 ? '-' + str : str;\n} // Does not strip trailing zeros.\n\n\nfunction truncate(arr, len) {\n  if (arr.length > len) {\n    arr.length = len;\n    return true;\n  }\n} // Decimal methods\n\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\n\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction abs(x) {\n  return new this(x).abs();\n}\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction acos(x) {\n  return new this(x).acos();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction acosh(x) {\n  return new this(x).acosh();\n}\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\n\n\nfunction add(x, y) {\n  return new this(x).plus(y);\n}\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction asin(x) {\n  return new this(x).asin();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction asinh(x) {\n  return new this(x).asinh();\n}\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction atan(x) {\n  return new this(x).atan();\n}\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction atanh(x) {\n  return new this(x).atanh();\n}\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\n\n\nfunction atan2(y, x) {\n  y = new this(y);\n  x = new this(x);\n  var r,\n      pr = this.precision,\n      rm = this.rounding,\n      wpr = pr + 4; // Either NaN\n\n  if (!y.s || !x.s) {\n    r = new this(NaN); // Both ±Infinity\n  } else if (!y.d && !x.d) {\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n    r.s = y.s; // x is ±Infinity or y is ±0\n  } else if (!x.d || y.isZero()) {\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n    r.s = y.s; // y is ±Infinity or x is ±0\n  } else if (!y.d || x.isZero()) {\n    r = getPi(this, wpr, 1).times(0.5);\n    r.s = y.s; // Both non-zero and finite\n  } else if (x.s < 0) {\n    this.precision = wpr;\n    this.rounding = 1;\n    r = this.atan(divide(y, x, wpr, 1));\n    x = getPi(this, wpr, 1);\n    this.precision = pr;\n    this.rounding = rm;\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\n  } else {\n    r = this.atan(divide(y, x, wpr, 1));\n  }\n\n  return r;\n}\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction cbrt(x) {\n  return new this(x).cbrt();\n}\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction ceil(x) {\n  return finalise(x = new this(x), x.e + 1, 2);\n}\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\n\n\nfunction clamp(x, min, max) {\n  return new this(x).clamp(min, max);\n}\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\n\n\nfunction config(obj) {\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\n  var i,\n      p,\n      v,\n      useDefaults = obj.defaults === true,\n      ps = ['precision', 1, MAX_DIGITS, 'rounding', 0, 8, 'toExpNeg', -EXP_LIMIT, 0, 'toExpPos', 0, EXP_LIMIT, 'maxE', 0, EXP_LIMIT, 'minE', -EXP_LIMIT, 0, 'modulo', 0, 9];\n\n  for (i = 0; i < ps.length; i += 3) {\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\n\n    if ((v = obj[p]) !== void 0) {\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;else throw Error(invalidArgument + p + ': ' + v);\n    }\n  }\n\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\n\n  if ((v = obj[p]) !== void 0) {\n    if (v === true || v === false || v === 0 || v === 1) {\n      if (v) {\n        if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n          this[p] = true;\n        } else {\n          throw Error(cryptoUnavailable);\n        }\n      } else {\n        this[p] = false;\n      }\n    } else {\n      throw Error(invalidArgument + p + ': ' + v);\n    }\n  }\n\n  return this;\n}\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction cos(x) {\n  return new this(x).cos();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction cosh(x) {\n  return new this(x).cosh();\n}\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\n\n\nfunction clone(obj) {\n  var i, p, ps;\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\n\n  function Decimal(v) {\n    var e,\n        i,\n        t,\n        x = this; // Decimal called without new.\n\n    if (!(x instanceof Decimal)) return new Decimal(v); // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\n    // which points to Object.\n\n    x.constructor = Decimal; // Duplicate.\n\n    if (isDecimalInstance(v)) {\n      x.s = v.s;\n\n      if (external) {\n        if (!v.d || v.e > Decimal.maxE) {\n          // Infinity.\n          x.e = NaN;\n          x.d = null;\n        } else if (v.e < Decimal.minE) {\n          // Zero.\n          x.e = 0;\n          x.d = [0];\n        } else {\n          x.e = v.e;\n          x.d = v.d.slice();\n        }\n      } else {\n        x.e = v.e;\n        x.d = v.d ? v.d.slice() : v.d;\n      }\n\n      return;\n    }\n\n    t = typeof v;\n\n    if (t === 'number') {\n      if (v === 0) {\n        x.s = 1 / v < 0 ? -1 : 1;\n        x.e = 0;\n        x.d = [0];\n        return;\n      }\n\n      if (v < 0) {\n        v = -v;\n        x.s = -1;\n      } else {\n        x.s = 1;\n      } // Fast path for small integers.\n\n\n      if (v === ~~v && v < 1e7) {\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\n\n        if (external) {\n          if (e > Decimal.maxE) {\n            x.e = NaN;\n            x.d = null;\n          } else if (e < Decimal.minE) {\n            x.e = 0;\n            x.d = [0];\n          } else {\n            x.e = e;\n            x.d = [v];\n          }\n        } else {\n          x.e = e;\n          x.d = [v];\n        }\n\n        return; // Infinity, NaN.\n      } else if (v * 0 !== 0) {\n        if (!v) x.s = NaN;\n        x.e = NaN;\n        x.d = null;\n        return;\n      }\n\n      return parseDecimal(x, v.toString());\n    } else if (t !== 'string') {\n      throw Error(invalidArgument + v);\n    } // Minus sign?\n\n\n    if ((i = v.charCodeAt(0)) === 45) {\n      v = v.slice(1);\n      x.s = -1;\n    } else {\n      // Plus sign?\n      if (i === 43) v = v.slice(1);\n      x.s = 1;\n    }\n\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n  }\n\n  Decimal.prototype = P;\n  Decimal.ROUND_UP = 0;\n  Decimal.ROUND_DOWN = 1;\n  Decimal.ROUND_CEIL = 2;\n  Decimal.ROUND_FLOOR = 3;\n  Decimal.ROUND_HALF_UP = 4;\n  Decimal.ROUND_HALF_DOWN = 5;\n  Decimal.ROUND_HALF_EVEN = 6;\n  Decimal.ROUND_HALF_CEIL = 7;\n  Decimal.ROUND_HALF_FLOOR = 8;\n  Decimal.EUCLID = 9;\n  Decimal.config = Decimal.set = config;\n  Decimal.clone = clone;\n  Decimal.isDecimal = isDecimalInstance;\n  Decimal.abs = abs;\n  Decimal.acos = acos;\n  Decimal.acosh = acosh; // ES6\n\n  Decimal.add = add;\n  Decimal.asin = asin;\n  Decimal.asinh = asinh; // ES6\n\n  Decimal.atan = atan;\n  Decimal.atanh = atanh; // ES6\n\n  Decimal.atan2 = atan2;\n  Decimal.cbrt = cbrt; // ES6\n\n  Decimal.ceil = ceil;\n  Decimal.clamp = clamp;\n  Decimal.cos = cos;\n  Decimal.cosh = cosh; // ES6\n\n  Decimal.div = div;\n  Decimal.exp = exp;\n  Decimal.floor = floor;\n  Decimal.hypot = hypot; // ES6\n\n  Decimal.ln = ln;\n  Decimal.log = log;\n  Decimal.log10 = log10; // ES6\n\n  Decimal.log2 = log2; // ES6\n\n  Decimal.max = max;\n  Decimal.min = min;\n  Decimal.mod = mod;\n  Decimal.mul = mul;\n  Decimal.pow = pow;\n  Decimal.random = random;\n  Decimal.round = round;\n  Decimal.sign = sign; // ES6\n\n  Decimal.sin = sin;\n  Decimal.sinh = sinh; // ES6\n\n  Decimal.sqrt = sqrt;\n  Decimal.sub = sub;\n  Decimal.sum = sum;\n  Decimal.tan = tan;\n  Decimal.tanh = tanh; // ES6\n\n  Decimal.trunc = trunc; // ES6\n\n  if (obj === void 0) obj = {};\n\n  if (obj) {\n    if (obj.defaults !== true) {\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\n\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\n    }\n  }\n\n  Decimal.config(obj);\n  return Decimal;\n}\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\n\n\nfunction div(x, y) {\n  return new this(x).div(y);\n}\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\n\n\nfunction exp(x) {\n  return new this(x).exp();\n}\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction floor(x) {\n  return finalise(x = new this(x), x.e + 1, 3);\n}\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\n\n\nfunction hypot() {\n  var i,\n      n,\n      t = new this(0);\n  external = false;\n\n  for (i = 0; i < arguments.length;) {\n    n = new this(arguments[i++]);\n\n    if (!n.d) {\n      if (n.s) {\n        external = true;\n        return new this(1 / 0);\n      }\n\n      t = n;\n    } else if (t.d) {\n      t = t.plus(n.times(n));\n    }\n  }\n\n  external = true;\n  return t.sqrt();\n}\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\n\n\nfunction isDecimalInstance(obj) {\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\n}\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction ln(x) {\n  return new this(x).ln();\n}\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\n\n\nfunction log(x, y) {\n  return new this(x).log(y);\n}\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction log2(x) {\n  return new this(x).log(2);\n}\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction log10(x) {\n  return new this(x).log(10);\n}\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\n\n\nfunction max() {\n  return maxOrMin(this, arguments, 'lt');\n}\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\n\n\nfunction min() {\n  return maxOrMin(this, arguments, 'gt');\n}\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\n\n\nfunction mod(x, y) {\n  return new this(x).mod(y);\n}\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\n\n\nfunction mul(x, y) {\n  return new this(x).mul(y);\n}\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\n\n\nfunction pow(x, y) {\n  return new this(x).pow(y);\n}\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\n\n\nfunction random(sd) {\n  var d,\n      e,\n      k,\n      n,\n      i = 0,\n      r = new this(1),\n      rd = [];\n  if (sd === void 0) sd = this.precision;else checkInt32(sd, 1, MAX_DIGITS);\n  k = Math.ceil(sd / LOG_BASE);\n\n  if (!this.crypto) {\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0; // Browsers supporting crypto.getRandomValues.\n\n  } else if (crypto.getRandomValues) {\n    d = crypto.getRandomValues(new Uint32Array(k));\n\n    for (; i < k;) {\n      n = d[i]; // 0 <= n < 4294967296\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\n\n      if (n >= 4.29e9) {\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n      } else {\n        // 0 <= n <= 4289999999\n        // 0 <= (n % 1e7) <= 9999999\n        rd[i++] = n % 1e7;\n      }\n    } // Node.js supporting crypto.randomBytes.\n\n  } else if (crypto.randomBytes) {\n    // buffer\n    d = crypto.randomBytes(k *= 4);\n\n    for (; i < k;) {\n      // 0 <= n < 2147483648\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24); // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\n\n      if (n >= 2.14e9) {\n        crypto.randomBytes(4).copy(d, i);\n      } else {\n        // 0 <= n <= 2139999999\n        // 0 <= (n % 1e7) <= 9999999\n        rd.push(n % 1e7);\n        i += 4;\n      }\n    }\n\n    i = k / 4;\n  } else {\n    throw Error(cryptoUnavailable);\n  }\n\n  k = rd[--i];\n  sd %= LOG_BASE; // Convert trailing digits to zeros according to sd.\n\n  if (k && sd) {\n    n = mathpow(10, LOG_BASE - sd);\n    rd[i] = (k / n | 0) * n;\n  } // Remove trailing words which are zero.\n\n\n  for (; rd[i] === 0; i--) rd.pop(); // Zero?\n\n\n  if (i < 0) {\n    e = 0;\n    rd = [0];\n  } else {\n    e = -1; // Remove leading words which are zero and adjust exponent accordingly.\n\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift(); // Count the digits of the first word of rd to determine leading zeros.\n\n\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++; // Adjust the exponent for leading zeros of the first word of rd.\n\n\n    if (k < LOG_BASE) e -= LOG_BASE - k;\n  }\n\n  r.e = e;\n  r.d = rd;\n  return r;\n}\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction round(x) {\n  return finalise(x = new this(x), x.e + 1, this.rounding);\n}\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction sign(x) {\n  x = new this(x);\n  return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n}\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction sin(x) {\n  return new this(x).sin();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction sinh(x) {\n  return new this(x).sinh();\n}\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction sqrt(x) {\n  return new this(x).sqrt();\n}\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\n\n\nfunction sub(x, y) {\n  return new this(x).sub(y);\n}\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\n\n\nfunction sum() {\n  var i = 0,\n      args = arguments,\n      x = new this(args[i]);\n  external = false;\n\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\n\n  external = true;\n  return finalise(x, this.precision, this.rounding);\n}\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction tan(x) {\n  return new this(x).tan();\n}\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\n\n\nfunction tanh(x) {\n  return new this(x).tanh();\n}\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\n\n\nfunction trunc(x) {\n  return finalise(x = new this(x), x.e + 1, 1);\n}\n\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\nP[Symbol.toStringTag] = 'Decimal'; // Create and configure initial Decimal constructor.\n\nexport var Decimal = P.constructor = clone(DEFAULTS); // Create the internal constants from their string values.\n\nLN10 = new Decimal(LN10);\nPI = new Decimal(PI);\nexport default Decimal;","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/decimal.js/decimal.mjs"],"names":["EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","inexact","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","Math","floor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","length","PI_PRECISION","P","toStringTag","absoluteValue","abs","x","constructor","s","finalise","ceil","e","clampedTo","clamp","min","max","k","Ctor","NaN","gt","Error","cmp","comparedTo","y","i","j","xdL","ydL","xd","d","yd","xs","ys","cosine","cos","pr","rm","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","n","r","rep","t","t3","t3plusx","isFinite","isZero","digitsToString","toExponential","slice","indexOf","toString","times","plus","divide","eq","charAt","decimalPlaces","dp","w","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","len","one","tinyPow","taylorSeries","cosh2_x","d8","minus","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","log","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","sub","xe","xLTy","reverse","push","pop","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","add","carry","unshift","z","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","checkInt32","str","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","ltgt","sum","c","c0","numerator","x1","String","parseDecimal","replace","search","substring","charCodeAt","parseOther","divisor","isFloat","p","test","toLowerCase","Decimal","sin2_x","isHyperbolic","u","pi","atan2","config","obj","v","useDefaults","defaults","ps","getRandomValues","randomBytes","clone","isDecimalInstance","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","set","hypot","log10","log2","random","hasOwnProperty","arguments","Uint32Array","copy","Symbol","for"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGE;AACA;AACF,IAAIA,SAAS,GAAG,IAAhB;AAAA,IAA2C;AAEzC;AACA;AACAC,UAAU,GAAG,GAJf;AAAA,IAI2C;AAEzC;AACAC,QAAQ,GAAG,kBAPb;AAAA,IASE;AACAC,IAAI,GAAG,ogCAVT;AAAA,IAYE;AACAC,EAAE,GAAG,ogCAbP;AAAA,IAgBE;AACAC,QAAQ,GAAG;AAET;AACA;AAEA;AACA;AACAC,EAAAA,SAAS,EAAE,EAPF;AAO8B;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAE,CAxBD;AAwB8B;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,EAAE,CAvCC;AAuC8B;AAEvC;AACA;AACAC,EAAAA,QAAQ,EAAE,CAAC,CA3CF;AA2C8B;AAEvC;AACA;AACAC,EAAAA,QAAQ,EAAG,EA/CF;AA+C8B;AAEvC;AACA;AACAC,EAAAA,IAAI,EAAE,CAACX,SAnDE;AAmD8B;AAEvC;AACA;AACAY,EAAAA,IAAI,EAAEZ,SAvDG;AAuD8B;AAEvC;AACAa,EAAAA,MAAM,EAAE,KA1DC,CA0D8B;;AA1D9B,CAjBb;AAAA,IA+EA;AAGEC,OAlFF;AAAA,IAkFWC,QAlFX;AAAA,IAmFEC,QAAQ,GAAG,IAnFb;AAAA,IAqFEC,YAAY,GAAG,iBArFjB;AAAA,IAsFEC,eAAe,GAAGD,YAAY,GAAG,oBAtFnC;AAAA,IAuFEE,sBAAsB,GAAGF,YAAY,GAAG,0BAvF1C;AAAA,IAwFEG,iBAAiB,GAAGH,YAAY,GAAG,oBAxFrC;AAAA,IAyFEI,GAAG,GAAG,kBAzFR;AAAA,IA2FEC,SAAS,GAAGC,IAAI,CAACC,KA3FnB;AAAA,IA4FEC,OAAO,GAAGF,IAAI,CAACG,GA5FjB;AAAA,IA8FEC,QAAQ,GAAG,4CA9Fb;AAAA,IA+FEC,KAAK,GAAG,wDA/FV;AAAA,IAgGEC,OAAO,GAAG,+CAhGZ;AAAA,IAiGEC,SAAS,GAAG,oCAjGd;AAAA,IAmGEC,IAAI,GAAG,GAnGT;AAAA,IAoGEC,QAAQ,GAAG,CApGb;AAAA,IAqGEC,gBAAgB,GAAG,gBArGrB;AAAA,IAuGEC,cAAc,GAAG/B,IAAI,CAACgC,MAAL,GAAc,CAvGjC;AAAA,IAwGEC,YAAY,GAAGhC,EAAE,CAAC+B,MAAH,GAAY,CAxG7B;AAAA,IA0GE;AACAE,CAAC,GAAG;AAAEC,EAAAA,WAAW,EAAEjB;AAAf,CA3GN,C,CA8GA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AACAgB,CAAC,CAACE,aAAF,GAAkBF,CAAC,CAACG,GAAF,GAAQ,YAAY;AACpC,MAAIC,CAAC,GAAG,IAAI,KAAKC,WAAT,CAAqB,IAArB,CAAR;AACA,MAAID,CAAC,CAACE,CAAF,GAAM,CAAV,EAAaF,CAAC,CAACE,CAAF,GAAM,CAAN;AACb,SAAOC,QAAQ,CAACH,CAAD,CAAf;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;;;AACAJ,CAAC,CAACQ,IAAF,GAAS,YAAY;AACnB,SAAOD,QAAQ,CAAC,IAAI,KAAKF,WAAT,CAAqB,IAArB,CAAD,EAA6B,KAAKI,CAAL,GAAS,CAAtC,EAAyC,CAAzC,CAAf;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,CAAC,CAACU,SAAF,GAAcV,CAAC,CAACW,KAAF,GAAU,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC1C,MAAIC,CAAJ;AAAA,MACEV,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAGAO,EAAAA,GAAG,GAAG,IAAIG,IAAJ,CAASH,GAAT,CAAN;AACAC,EAAAA,GAAG,GAAG,IAAIE,IAAJ,CAASF,GAAT,CAAN;AACA,MAAI,CAACD,GAAG,CAACN,CAAL,IAAU,CAACO,GAAG,CAACP,CAAnB,EAAsB,OAAO,IAAIS,IAAJ,CAASC,GAAT,CAAP;AACtB,MAAIJ,GAAG,CAACK,EAAJ,CAAOJ,GAAP,CAAJ,EAAiB,MAAMK,KAAK,CAACrC,eAAe,GAAGgC,GAAnB,CAAX;AACjBC,EAAAA,CAAC,GAAGV,CAAC,CAACe,GAAF,CAAMP,GAAN,CAAJ;AACA,SAAOE,CAAC,GAAG,CAAJ,GAAQF,GAAR,GAAcR,CAAC,CAACe,GAAF,CAAMN,GAAN,IAAa,CAAb,GAAiBA,GAAjB,GAAuB,IAAIE,IAAJ,CAASX,CAAT,CAA5C;AACD,CAVD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,CAAC,CAACoB,UAAF,GAAepB,CAAC,CAACmB,GAAF,GAAQ,UAAUE,CAAV,EAAa;AAClC,MAAIC,CAAJ;AAAA,MAAOC,CAAP;AAAA,MAAUC,GAAV;AAAA,MAAeC,GAAf;AAAA,MACErB,CAAC,GAAG,IADN;AAAA,MAEEsB,EAAE,GAAGtB,CAAC,CAACuB,CAFT;AAAA,MAGEC,EAAE,GAAG,CAACP,CAAC,GAAG,IAAIjB,CAAC,CAACC,WAAN,CAAkBgB,CAAlB,CAAL,EAA2BM,CAHlC;AAAA,MAIEE,EAAE,GAAGzB,CAAC,CAACE,CAJT;AAAA,MAKEwB,EAAE,GAAGT,CAAC,CAACf,CALT,CADkC,CAQlC;;AACA,MAAI,CAACoB,EAAD,IAAO,CAACE,EAAZ,EAAgB;AACd,WAAO,CAACC,EAAD,IAAO,CAACC,EAAR,GAAad,GAAb,GAAmBa,EAAE,KAAKC,EAAP,GAAYD,EAAZ,GAAiBH,EAAE,KAAKE,EAAP,GAAY,CAAZ,GAAgB,CAACF,EAAD,GAAMG,EAAE,GAAG,CAAX,GAAe,CAAf,GAAmB,CAAC,CAA/E;AACD,GAXiC,CAalC;;;AACA,MAAI,CAACH,EAAE,CAAC,CAAD,CAAH,IAAU,CAACE,EAAE,CAAC,CAAD,CAAjB,EAAsB,OAAOF,EAAE,CAAC,CAAD,CAAF,GAAQG,EAAR,GAAaD,EAAE,CAAC,CAAD,CAAF,GAAQ,CAACE,EAAT,GAAc,CAAlC,CAdY,CAgBlC;;AACA,MAAID,EAAE,KAAKC,EAAX,EAAe,OAAOD,EAAP,CAjBmB,CAmBlC;;AACA,MAAIzB,CAAC,CAACK,CAAF,KAAQY,CAAC,CAACZ,CAAd,EAAiB,OAAOL,CAAC,CAACK,CAAF,GAAMY,CAAC,CAACZ,CAAR,GAAYoB,EAAE,GAAG,CAAjB,GAAqB,CAArB,GAAyB,CAAC,CAAjC;AAEjBL,EAAAA,GAAG,GAAGE,EAAE,CAAC5B,MAAT;AACA2B,EAAAA,GAAG,GAAGG,EAAE,CAAC9B,MAAT,CAvBkC,CAyBlC;;AACA,OAAKwB,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGC,GAAG,GAAGC,GAAN,GAAYD,GAAZ,GAAkBC,GAAlC,EAAuCH,CAAC,GAAGC,CAA3C,EAA8C,EAAED,CAAhD,EAAmD;AACjD,QAAII,EAAE,CAACJ,CAAD,CAAF,KAAUM,EAAE,CAACN,CAAD,CAAhB,EAAqB,OAAOI,EAAE,CAACJ,CAAD,CAAF,GAAQM,EAAE,CAACN,CAAD,CAAV,GAAgBO,EAAE,GAAG,CAArB,GAAyB,CAAzB,GAA6B,CAAC,CAArC;AACtB,GA5BiC,CA8BlC;;;AACA,SAAOL,GAAG,KAAKC,GAAR,GAAc,CAAd,GAAkBD,GAAG,GAAGC,GAAN,GAAYI,EAAE,GAAG,CAAjB,GAAqB,CAArB,GAAyB,CAAC,CAAnD;AACD,CAhCD;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7B,CAAC,CAAC+B,MAAF,GAAW/B,CAAC,CAACgC,GAAF,GAAQ,YAAY;AAC7B,MAAIC,EAAJ;AAAA,MAAQC,EAAR;AAAA,MACE9B,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAACuB,CAAP,EAAU,OAAO,IAAIZ,IAAJ,CAASC,GAAT,CAAP,CALmB,CAO7B;;AACA,MAAI,CAACZ,CAAC,CAACuB,CAAF,CAAI,CAAJ,CAAL,EAAa,OAAO,IAAIZ,IAAJ,CAAS,CAAT,CAAP;AAEbkB,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG/C,IAAI,CAAC2B,GAAL,CAAST,CAAC,CAACK,CAAX,EAAcL,CAAC,CAAC+B,EAAF,EAAd,CAAL,GAA6BxC,QAA9C;AACAoB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEAkC,EAAAA,CAAC,GAAG2B,MAAM,CAAChB,IAAD,EAAOqB,gBAAgB,CAACrB,IAAD,EAAOX,CAAP,CAAvB,CAAV;AAEAW,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO3B,QAAQ,CAAC7B,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAA7B,GAAiC0B,CAAC,CAACiC,GAAF,EAAjC,GAA2CjC,CAA5C,EAA+C6B,EAA/C,EAAmDC,EAAnD,EAAuD,IAAvD,CAAf;AACD,CArBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACsC,QAAF,GAAatC,CAAC,CAACuC,IAAF,GAAS,YAAY;AAChC,MAAI9B,CAAJ;AAAA,MAAO+B,CAAP;AAAA,MAAUC,CAAV;AAAA,MAAaC,CAAb;AAAA,MAAgBC,GAAhB;AAAA,MAAqBrC,CAArB;AAAA,MAAwB6B,EAAxB;AAAA,MAA4BS,CAA5B;AAAA,MAA+BC,EAA/B;AAAA,MAAmCC,OAAnC;AAAA,MACE1C,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAD,IAAiB3C,CAAC,CAAC4C,MAAF,EAArB,EAAiC,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AACjCzB,EAAAA,QAAQ,GAAG,KAAX,CANgC,CAQhC;;AACA2B,EAAAA,CAAC,GAAGF,CAAC,CAACE,CAAF,GAAMlB,OAAO,CAACgB,CAAC,CAACE,CAAF,GAAMF,CAAP,EAAU,IAAI,CAAd,CAAjB,CATgC,CAW/B;AACA;;AACD,MAAI,CAACE,CAAD,IAAMpB,IAAI,CAACiB,GAAL,CAASG,CAAT,KAAe,IAAI,CAA7B,EAAgC;AAC9BmC,IAAAA,CAAC,GAAGQ,cAAc,CAAC7C,CAAC,CAACuB,CAAH,CAAlB;AACAlB,IAAAA,CAAC,GAAGL,CAAC,CAACK,CAAN,CAF8B,CAI9B;;AACA,QAAIH,CAAC,GAAG,CAACG,CAAC,GAAGgC,CAAC,CAAC3C,MAAN,GAAe,CAAhB,IAAqB,CAA7B,EAAgC2C,CAAC,IAAKnC,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,CAAC,CAAhB,GAAoB,GAApB,GAA0B,IAAhC;AAChCA,IAAAA,CAAC,GAAGlB,OAAO,CAACqD,CAAD,EAAI,IAAI,CAAR,CAAX,CAN8B,CAQ9B;;AACAhC,IAAAA,CAAC,GAAGxB,SAAS,CAAC,CAACwB,CAAC,GAAG,CAAL,IAAU,CAAX,CAAT,IAA0BA,CAAC,GAAG,CAAJ,KAAUA,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAvB,CAA1B,CAAJ;;AAEA,QAAIH,CAAC,IAAI,IAAI,CAAb,EAAgB;AACdmC,MAAAA,CAAC,GAAG,OAAOhC,CAAX;AACD,KAFD,MAEO;AACLgC,MAAAA,CAAC,GAAGnC,CAAC,CAAC4C,aAAF,EAAJ;AACAT,MAAAA,CAAC,GAAGA,CAAC,CAACU,KAAF,CAAQ,CAAR,EAAWV,CAAC,CAACW,OAAF,CAAU,GAAV,IAAiB,CAA5B,IAAiC3C,CAArC;AACD;;AAEDiC,IAAAA,CAAC,GAAG,IAAI3B,IAAJ,CAAS0B,CAAT,CAAJ;AACAC,IAAAA,CAAC,CAACpC,CAAF,GAAMF,CAAC,CAACE,CAAR;AACD,GApBD,MAoBO;AACLoC,IAAAA,CAAC,GAAG,IAAI3B,IAAJ,CAAST,CAAC,CAAC+C,QAAF,EAAT,CAAJ;AACD;;AAEDlB,EAAAA,EAAE,GAAG,CAAC1B,CAAC,GAAGM,IAAI,CAAC9C,SAAV,IAAuB,CAA5B,CArCgC,CAuChC;AACA;;AACA,WAAS;AACP2E,IAAAA,CAAC,GAAGF,CAAJ;AACAG,IAAAA,EAAE,GAAGD,CAAC,CAACU,KAAF,CAAQV,CAAR,EAAWU,KAAX,CAAiBV,CAAjB,CAAL;AACAE,IAAAA,OAAO,GAAGD,EAAE,CAACU,IAAH,CAAQnD,CAAR,CAAV;AACAsC,IAAAA,CAAC,GAAGc,MAAM,CAACV,OAAO,CAACS,IAAR,CAAanD,CAAb,EAAgBkD,KAAhB,CAAsBV,CAAtB,CAAD,EAA2BE,OAAO,CAACS,IAAR,CAAaV,EAAb,CAA3B,EAA6CV,EAAE,GAAG,CAAlD,EAAqD,CAArD,CAAV,CAJO,CAMP;;AACA,QAAIc,cAAc,CAACL,CAAC,CAACjB,CAAH,CAAd,CAAoBwB,KAApB,CAA0B,CAA1B,EAA6BhB,EAA7B,MAAqC,CAACM,CAAC,GAAGQ,cAAc,CAACP,CAAC,CAACf,CAAH,CAAnB,EAA0BwB,KAA1B,CAAgC,CAAhC,EAAmChB,EAAnC,CAAzC,EAAiF;AAC/EM,MAAAA,CAAC,GAAGA,CAAC,CAACU,KAAF,CAAQhB,EAAE,GAAG,CAAb,EAAgBA,EAAE,GAAG,CAArB,CAAJ,CAD+E,CAG/E;AACA;;AACA,UAAIM,CAAC,IAAI,MAAL,IAAe,CAACE,GAAD,IAAQF,CAAC,IAAI,MAAhC,EAAwC;AAEtC;AACA;AACA,YAAI,CAACE,GAAL,EAAU;AACRpC,UAAAA,QAAQ,CAACqC,CAAD,EAAInC,CAAC,GAAG,CAAR,EAAW,CAAX,CAAR;;AAEA,cAAImC,CAAC,CAACU,KAAF,CAAQV,CAAR,EAAWU,KAAX,CAAiBV,CAAjB,EAAoBa,EAApB,CAAuBrD,CAAvB,CAAJ,EAA+B;AAC7BsC,YAAAA,CAAC,GAAGE,CAAJ;AACA;AACD;AACF;;AAEDT,QAAAA,EAAE,IAAI,CAAN;AACAQ,QAAAA,GAAG,GAAG,CAAN;AACD,OAfD,MAeO;AAEL;AACA;AACA,YAAI,CAAC,CAACF,CAAF,IAAO,CAAC,CAACA,CAAC,CAACU,KAAF,CAAQ,CAAR,CAAF,IAAgBV,CAAC,CAACiB,MAAF,CAAS,CAAT,KAAe,GAA1C,EAA+C;AAE7C;AACAnD,UAAAA,QAAQ,CAACmC,CAAD,EAAIjC,CAAC,GAAG,CAAR,EAAW,CAAX,CAAR;AACA+B,UAAAA,CAAC,GAAG,CAACE,CAAC,CAACY,KAAF,CAAQZ,CAAR,EAAWY,KAAX,CAAiBZ,CAAjB,EAAoBe,EAApB,CAAuBrD,CAAvB,CAAL;AACD;;AAED;AACD;AACF;AACF;;AAEDzB,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO4B,QAAQ,CAACmC,CAAD,EAAIjC,CAAJ,EAAOM,IAAI,CAAC7C,QAAZ,EAAsBsE,CAAtB,CAAf;AACD,CAvFD;AA0FA;AACA;AACA;AACA;;;AACAxC,CAAC,CAAC2D,aAAF,GAAkB3D,CAAC,CAAC4D,EAAF,GAAO,YAAY;AACnC,MAAIC,CAAJ;AAAA,MACElC,CAAC,GAAG,KAAKA,CADX;AAAA,MAEEc,CAAC,GAAGzB,GAFN;;AAIA,MAAIW,CAAJ,EAAO;AACLkC,IAAAA,CAAC,GAAGlC,CAAC,CAAC7B,MAAF,GAAW,CAAf;AACA2C,IAAAA,CAAC,GAAG,CAACoB,CAAC,GAAG5E,SAAS,CAAC,KAAKwB,CAAL,GAASd,QAAV,CAAd,IAAqCA,QAAzC,CAFK,CAIL;;AACAkE,IAAAA,CAAC,GAAGlC,CAAC,CAACkC,CAAD,CAAL;AACA,QAAIA,CAAJ,EAAO,OAAOA,CAAC,GAAG,EAAJ,IAAU,CAAjB,EAAoBA,CAAC,IAAI,EAAzB,EAA6BpB,CAAC;AACrC,QAAIA,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAG,CAAJ;AACZ;;AAED,SAAOA,CAAP;AACD,CAhBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAzC,CAAC,CAAC8D,SAAF,GAAc9D,CAAC,CAAC+D,GAAF,GAAQ,UAAU1C,CAAV,EAAa;AACjC,SAAOmC,MAAM,CAAC,IAAD,EAAO,IAAI,KAAKnD,WAAT,CAAqBgB,CAArB,CAAP,CAAb;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAACgE,kBAAF,GAAuBhE,CAAC,CAACiE,QAAF,GAAa,UAAU5C,CAAV,EAAa;AAC/C,MAAIjB,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;AAEA,SAAOE,QAAQ,CAACiD,MAAM,CAACpD,CAAD,EAAI,IAAIW,IAAJ,CAASM,CAAT,CAAJ,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAP,EAAkCN,IAAI,CAAC9C,SAAvC,EAAkD8C,IAAI,CAAC7C,QAAvD,CAAf;AACD,CAJD;AAOA;AACA;AACA;AACA;;;AACA8B,CAAC,CAACkE,MAAF,GAAWlE,CAAC,CAACyD,EAAF,GAAO,UAAUpC,CAAV,EAAa;AAC7B,SAAO,KAAKF,GAAL,CAASE,CAAT,MAAgB,CAAvB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAACb,KAAF,GAAU,YAAY;AACpB,SAAOoB,QAAQ,CAAC,IAAI,KAAKF,WAAT,CAAqB,IAArB,CAAD,EAA6B,KAAKI,CAAL,GAAS,CAAtC,EAAyC,CAAzC,CAAf;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAT,CAAC,CAACmE,WAAF,GAAgBnE,CAAC,CAACiB,EAAF,GAAO,UAAUI,CAAV,EAAa;AAClC,SAAO,KAAKF,GAAL,CAASE,CAAT,IAAc,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAACoE,oBAAF,GAAyBpE,CAAC,CAACqE,GAAF,GAAQ,UAAUhD,CAAV,EAAa;AAC5C,MAAIP,CAAC,GAAG,KAAKK,GAAL,CAASE,CAAT,CAAR;AACA,SAAOP,CAAC,IAAI,CAAL,IAAUA,CAAC,KAAK,CAAvB;AACD,CAHD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAd,CAAC,CAACsE,gBAAF,GAAqBtE,CAAC,CAACuE,IAAF,GAAS,YAAY;AACxC,MAAIzD,CAAJ;AAAA,MAAO2B,CAAP;AAAA,MAAUR,EAAV;AAAA,MAAcC,EAAd;AAAA,MAAkBsC,GAAlB;AAAA,MACEpE,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAAA,MAGEoE,GAAG,GAAG,IAAI1D,IAAJ,CAAS,CAAT,CAHR;AAKA,MAAI,CAACX,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAO,IAAIhC,IAAJ,CAASX,CAAC,CAACE,CAAF,GAAM,IAAI,CAAV,GAAcU,GAAvB,CAAP;AACnB,MAAIZ,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAOyB,GAAP;AAEhBxC,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG/C,IAAI,CAAC2B,GAAL,CAAST,CAAC,CAACK,CAAX,EAAcL,CAAC,CAAC+B,EAAF,EAAd,CAAL,GAA6B,CAA9C;AACApB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AACAsG,EAAAA,GAAG,GAAGpE,CAAC,CAACuB,CAAF,CAAI7B,MAAV,CAbwC,CAexC;AACA;AAEA;AACA;;AACA,MAAI0E,GAAG,GAAG,EAAV,EAAc;AACZ1D,IAAAA,CAAC,GAAG5B,IAAI,CAACsB,IAAL,CAAUgE,GAAG,GAAG,CAAhB,CAAJ;AACA/B,IAAAA,CAAC,GAAG,CAAC,IAAIiC,OAAO,CAAC,CAAD,EAAI5D,CAAJ,CAAZ,EAAoBuC,QAApB,EAAJ;AACD,GAHD,MAGO;AACLvC,IAAAA,CAAC,GAAG,EAAJ;AACA2B,IAAAA,CAAC,GAAG,8BAAJ;AACD;;AAEDrC,EAAAA,CAAC,GAAGuE,YAAY,CAAC5D,IAAD,EAAO,CAAP,EAAUX,CAAC,CAACkD,KAAF,CAAQb,CAAR,CAAV,EAAsB,IAAI1B,IAAJ,CAAS,CAAT,CAAtB,EAAmC,IAAnC,CAAhB,CA5BwC,CA8BxC;;AACA,MAAI6D,OAAJ;AAAA,MACEtD,CAAC,GAAGR,CADN;AAAA,MAEE+D,EAAE,GAAG,IAAI9D,IAAJ,CAAS,CAAT,CAFP;;AAGA,SAAOO,CAAC,EAAR,GAAa;AACXsD,IAAAA,OAAO,GAAGxE,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAV;AACAA,IAAAA,CAAC,GAAGqE,GAAG,CAACK,KAAJ,CAAUF,OAAO,CAACtB,KAAR,CAAcuB,EAAE,CAACC,KAAH,CAASF,OAAO,CAACtB,KAAR,CAAcuB,EAAd,CAAT,CAAd,CAAV,CAAJ;AACD;;AAED,SAAOtE,QAAQ,CAACH,CAAD,EAAIW,IAAI,CAAC9C,SAAL,GAAiBgE,EAArB,EAAyBlB,IAAI,CAAC7C,QAAL,GAAgBgE,EAAzC,EAA6C,IAA7C,CAAf;AACD,CAxCD;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAAC+E,cAAF,GAAmB/E,CAAC,CAACgF,IAAF,GAAS,YAAY;AACtC,MAAIlE,CAAJ;AAAA,MAAOmB,EAAP;AAAA,MAAWC,EAAX;AAAA,MAAesC,GAAf;AAAA,MACEpE,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAD,IAAiB3C,CAAC,CAAC4C,MAAF,EAArB,EAAiC,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AAEjC6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG/C,IAAI,CAAC2B,GAAL,CAAST,CAAC,CAACK,CAAX,EAAcL,CAAC,CAAC+B,EAAF,EAAd,CAAL,GAA6B,CAA9C;AACApB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AACAsG,EAAAA,GAAG,GAAGpE,CAAC,CAACuB,CAAF,CAAI7B,MAAV;;AAEA,MAAI0E,GAAG,GAAG,CAAV,EAAa;AACXpE,IAAAA,CAAC,GAAGuE,YAAY,CAAC5D,IAAD,EAAO,CAAP,EAAUX,CAAV,EAAaA,CAAb,EAAgB,IAAhB,CAAhB;AACD,GAFD,MAEO;AAEL;AACA;AACA;AAEA;AACA;AACA;AAEA;AACAU,IAAAA,CAAC,GAAG,MAAM5B,IAAI,CAAC+F,IAAL,CAAUT,GAAV,CAAV;AACA1D,IAAAA,CAAC,GAAGA,CAAC,GAAG,EAAJ,GAAS,EAAT,GAAcA,CAAC,GAAG,CAAtB;AAEAV,IAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQ,IAAIoB,OAAO,CAAC,CAAD,EAAI5D,CAAJ,CAAnB,CAAJ;AACAV,IAAAA,CAAC,GAAGuE,YAAY,CAAC5D,IAAD,EAAO,CAAP,EAAUX,CAAV,EAAaA,CAAb,EAAgB,IAAhB,CAAhB,CAfK,CAiBL;;AACA,QAAI8E,OAAJ;AAAA,QACEC,EAAE,GAAG,IAAIpE,IAAJ,CAAS,CAAT,CADP;AAAA,QAEEqE,GAAG,GAAG,IAAIrE,IAAJ,CAAS,EAAT,CAFR;AAAA,QAGEsE,GAAG,GAAG,IAAItE,IAAJ,CAAS,EAAT,CAHR;;AAIA,WAAOD,CAAC,EAAR,GAAa;AACXoE,MAAAA,OAAO,GAAG9E,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAV;AACAA,MAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQ6B,EAAE,CAAC5B,IAAH,CAAQ2B,OAAO,CAAC5B,KAAR,CAAc8B,GAAG,CAAC9B,KAAJ,CAAU4B,OAAV,EAAmB3B,IAAnB,CAAwB8B,GAAxB,CAAd,CAAR,CAAR,CAAJ;AACD;AACF;;AAEDtE,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO3B,QAAQ,CAACH,CAAD,EAAI6B,EAAJ,EAAQC,EAAR,EAAY,IAAZ,CAAf;AACD,CA/CD;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACsF,iBAAF,GAAsBtF,CAAC,CAACuF,IAAF,GAAS,YAAY;AACzC,MAAItD,EAAJ;AAAA,MAAQC,EAAR;AAAA,MACE9B,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAO,IAAIhC,IAAJ,CAASX,CAAC,CAACE,CAAX,CAAP;AACnB,MAAIF,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AAEhB6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG,CAAtB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEA,SAAOsF,MAAM,CAACpD,CAAC,CAAC4E,IAAF,EAAD,EAAW5E,CAAC,CAACmE,IAAF,EAAX,EAAqBxD,IAAI,CAAC9C,SAAL,GAAiBgE,EAAtC,EAA0ClB,IAAI,CAAC7C,QAAL,GAAgBgE,EAA1D,CAAb;AACD,CAdD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACwF,aAAF,GAAkBxF,CAAC,CAACyF,IAAF,GAAS,YAAY;AACrC,MAAIC,MAAJ;AAAA,MACEtF,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAAA,MAGES,CAAC,GAAGV,CAAC,CAACD,GAAF,GAAQgB,GAAR,CAAY,CAAZ,CAHN;AAAA,MAIEc,EAAE,GAAGlB,IAAI,CAAC9C,SAJZ;AAAA,MAKEiE,EAAE,GAAGnB,IAAI,CAAC7C,QALZ;;AAOA,MAAI4C,CAAC,KAAK,CAAC,CAAX,EAAc;AACZ,WAAOA,CAAC,KAAK,CAAN,CACL;AADK,MAEHV,CAAC,CAACuF,KAAF,KAAYC,KAAK,CAAC7E,IAAD,EAAOkB,EAAP,EAAWC,EAAX,CAAjB,GAAkC,IAAInB,IAAJ,CAAS,CAAT,CAF/B,CAGL;AAHK,MAIH,IAAIA,IAAJ,CAASC,GAAT,CAJJ;AAKD;;AAED,MAAIZ,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAO4C,KAAK,CAAC7E,IAAD,EAAOkB,EAAE,GAAG,CAAZ,EAAeC,EAAf,CAAL,CAAwBoB,KAAxB,CAA8B,GAA9B,CAAP,CAhBqB,CAkBrC;;AAEAvC,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG,CAAtB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEAkC,EAAAA,CAAC,GAAGA,CAAC,CAACyF,IAAF,EAAJ;AACAH,EAAAA,MAAM,GAAGE,KAAK,CAAC7E,IAAD,EAAOkB,EAAE,GAAG,CAAZ,EAAeC,EAAf,CAAL,CAAwBoB,KAAxB,CAA8B,GAA9B,CAAT;AAEAvC,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAOwD,MAAM,CAACZ,KAAP,CAAa1E,CAAb,CAAP;AACD,CA9BD;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,CAAC,CAAC8F,uBAAF,GAA4B9F,CAAC,CAAC+F,KAAF,GAAU,YAAY;AAChD,MAAI9D,EAAJ;AAAA,MAAQC,EAAR;AAAA,MACE9B,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAID,CAAC,CAAC4F,GAAF,CAAM,CAAN,CAAJ,EAAc,OAAO,IAAIjF,IAAJ,CAASX,CAAC,CAACqD,EAAF,CAAK,CAAL,IAAU,CAAV,GAAczC,GAAvB,CAAP;AACd,MAAI,CAACZ,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAO,IAAIhC,IAAJ,CAASX,CAAT,CAAP;AAEnB6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG/C,IAAI,CAAC2B,GAAL,CAAS3B,IAAI,CAACiB,GAAL,CAASC,CAAC,CAACK,CAAX,CAAT,EAAwBL,CAAC,CAAC+B,EAAF,EAAxB,CAAL,GAAuC,CAAxD;AACApB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AACAS,EAAAA,QAAQ,GAAG,KAAX;AAEAyB,EAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQlD,CAAR,EAAW0E,KAAX,CAAiB,CAAjB,EAAoBG,IAApB,GAA2B1B,IAA3B,CAAgCnD,CAAhC,CAAJ;AAEAzB,EAAAA,QAAQ,GAAG,IAAX;AACAoC,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO9B,CAAC,CAAC6F,EAAF,EAAP;AACD,CArBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjG,CAAC,CAACkG,qBAAF,GAA0BlG,CAAC,CAACmG,KAAF,GAAU,YAAY;AAC9C,MAAIlE,EAAJ;AAAA,MAAQC,EAAR;AAAA,MACE9B,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAD,IAAiB3C,CAAC,CAAC4C,MAAF,EAArB,EAAiC,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AAEjC6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG,IAAI/C,IAAI,CAAC2B,GAAL,CAAS3B,IAAI,CAACiB,GAAL,CAASC,CAAC,CAACK,CAAX,CAAT,EAAwBL,CAAC,CAAC+B,EAAF,EAAxB,CAAT,GAA2C,CAA5D;AACApB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AACAS,EAAAA,QAAQ,GAAG,KAAX;AAEAyB,EAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQlD,CAAR,EAAWmD,IAAX,CAAgB,CAAhB,EAAmB0B,IAAnB,GAA0B1B,IAA1B,CAA+BnD,CAA/B,CAAJ;AAEAzB,EAAAA,QAAQ,GAAG,IAAX;AACAoC,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO9B,CAAC,CAAC6F,EAAF,EAAP;AACD,CApBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjG,CAAC,CAACoG,wBAAF,GAA6BpG,CAAC,CAACqG,KAAF,GAAU,YAAY;AACjD,MAAIpE,EAAJ;AAAA,MAAQC,EAAR;AAAA,MAAYoE,GAAZ;AAAA,MAAiBC,GAAjB;AAAA,MACEnG,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAO,IAAIhC,IAAJ,CAASC,GAAT,CAAP;AACnB,MAAIZ,CAAC,CAACK,CAAF,IAAO,CAAX,EAAc,OAAO,IAAIM,IAAJ,CAASX,CAAC,CAACD,GAAF,GAAQsD,EAAR,CAAW,CAAX,IAAgBrD,CAAC,CAACE,CAAF,GAAM,CAAtB,GAA0BF,CAAC,CAAC4C,MAAF,KAAa5C,CAAb,GAAiBY,GAApD,CAAP;AAEdiB,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACAqI,EAAAA,GAAG,GAAGnG,CAAC,CAAC+B,EAAF,EAAN;AAEA,MAAIjD,IAAI,CAAC2B,GAAL,CAAS0F,GAAT,EAActE,EAAd,IAAoB,IAAI,CAAC7B,CAAC,CAACK,CAAP,GAAW,CAAnC,EAAsC,OAAOF,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAc6B,EAAd,EAAkBC,EAAlB,EAAsB,IAAtB,CAAf;AAEtCnB,EAAAA,IAAI,CAAC9C,SAAL,GAAiBqI,GAAG,GAAGC,GAAG,GAAGnG,CAAC,CAACK,CAA/B;AAEAL,EAAAA,CAAC,GAAGoD,MAAM,CAACpD,CAAC,CAACmD,IAAF,CAAO,CAAP,CAAD,EAAY,IAAIxC,IAAJ,CAAS,CAAT,EAAY+D,KAAZ,CAAkB1E,CAAlB,CAAZ,EAAkCkG,GAAG,GAAGrE,EAAxC,EAA4C,CAA5C,CAAV;AAEAlB,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG,CAAtB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEAkC,EAAAA,CAAC,GAAGA,CAAC,CAAC6F,EAAF,EAAJ;AAEAlF,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO9B,CAAC,CAACkD,KAAF,CAAQ,GAAR,CAAP;AACD,CA3BD;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtD,CAAC,CAACwG,WAAF,GAAgBxG,CAAC,CAAC6F,IAAF,GAAS,YAAY;AACnC,MAAIH,MAAJ;AAAA,MAAY5E,CAAZ;AAAA,MACEmB,EADF;AAAA,MACMC,EADN;AAAA,MAEE9B,CAAC,GAAG,IAFN;AAAA,MAGEW,IAAI,GAAGX,CAAC,CAACC,WAHX;AAKA,MAAID,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AAEhBU,EAAAA,CAAC,GAAGV,CAAC,CAACD,GAAF,GAAQgB,GAAR,CAAY,CAAZ,CAAJ;AACAc,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;;AAEA,MAAI4C,CAAC,KAAK,CAAC,CAAX,EAAc;AAEZ;AACA,QAAIA,CAAC,KAAK,CAAV,EAAa;AACX4E,MAAAA,MAAM,GAAGE,KAAK,CAAC7E,IAAD,EAAOkB,EAAE,GAAG,CAAZ,EAAeC,EAAf,CAAL,CAAwBoB,KAAxB,CAA8B,GAA9B,CAAT;AACAoC,MAAAA,MAAM,CAACpF,CAAP,GAAWF,CAAC,CAACE,CAAb;AACA,aAAOoF,MAAP;AACD,KAPW,CASZ;;;AACA,WAAO,IAAI3E,IAAJ,CAASC,GAAT,CAAP;AACD,GAvBkC,CAyBnC;;;AAEAD,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG,CAAtB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEAkC,EAAAA,CAAC,GAAGA,CAAC,CAAC2D,GAAF,CAAM,IAAIhD,IAAJ,CAAS,CAAT,EAAY+D,KAAZ,CAAkB1E,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAlB,EAA8B6E,IAA9B,GAAqC1B,IAArC,CAA0C,CAA1C,CAAN,EAAoDkD,IAApD,EAAJ;AAEA1F,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO9B,CAAC,CAACkD,KAAF,CAAQ,CAAR,CAAP;AACD,CApCD;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtD,CAAC,CAAC0G,cAAF,GAAmB1G,CAAC,CAACyG,IAAF,GAAS,YAAY;AACtC,MAAInF,CAAJ;AAAA,MAAOC,CAAP;AAAA,MAAUT,CAAV;AAAA,MAAa2B,CAAb;AAAA,MAAgBkE,EAAhB;AAAA,MAAoB/D,CAApB;AAAA,MAAuBF,CAAvB;AAAA,MAA0B4D,GAA1B;AAAA,MAA+BM,EAA/B;AAAA,MACExG,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAAA,MAGE4B,EAAE,GAAGlB,IAAI,CAAC9C,SAHZ;AAAA,MAIEiE,EAAE,GAAGnB,IAAI,CAAC7C,QAJZ;;AAMA,MAAI,CAACkC,CAAC,CAAC2C,QAAF,EAAL,EAAmB;AACjB,QAAI,CAAC3C,CAAC,CAACE,CAAP,EAAU,OAAO,IAAIS,IAAJ,CAASC,GAAT,CAAP;;AACV,QAAIiB,EAAE,GAAG,CAAL,IAAUlC,YAAd,EAA4B;AAC1B2C,MAAAA,CAAC,GAAGkD,KAAK,CAAC7E,IAAD,EAAOkB,EAAE,GAAG,CAAZ,EAAeC,EAAf,CAAL,CAAwBoB,KAAxB,CAA8B,GAA9B,CAAJ;AACAZ,MAAAA,CAAC,CAACpC,CAAF,GAAMF,CAAC,CAACE,CAAR;AACA,aAAOoC,CAAP;AACD;AACF,GAPD,MAOO,IAAItC,CAAC,CAAC4C,MAAF,EAAJ,EAAgB;AACrB,WAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AACD,GAFM,MAEA,IAAIA,CAAC,CAACD,GAAF,GAAQsD,EAAR,CAAW,CAAX,KAAiBxB,EAAE,GAAG,CAAL,IAAUlC,YAA/B,EAA6C;AAClD2C,IAAAA,CAAC,GAAGkD,KAAK,CAAC7E,IAAD,EAAOkB,EAAE,GAAG,CAAZ,EAAeC,EAAf,CAAL,CAAwBoB,KAAxB,CAA8B,IAA9B,CAAJ;AACAZ,IAAAA,CAAC,CAACpC,CAAF,GAAMF,CAAC,CAACE,CAAR;AACA,WAAOoC,CAAP;AACD;;AAED3B,EAAAA,IAAI,CAAC9C,SAAL,GAAiBqI,GAAG,GAAGrE,EAAE,GAAG,EAA5B;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB,CAvBsC,CAyBtC;AAEA;AACA;AACA;;AAEA4C,EAAAA,CAAC,GAAG5B,IAAI,CAAC0B,GAAL,CAAS,EAAT,EAAa0F,GAAG,GAAG3G,QAAN,GAAiB,CAAjB,GAAqB,CAAlC,CAAJ;;AAEA,OAAK2B,CAAC,GAAGR,CAAT,EAAYQ,CAAZ,EAAe,EAAEA,CAAjB,EAAoBlB,CAAC,GAAGA,CAAC,CAAC2D,GAAF,CAAM3D,CAAC,CAACkD,KAAF,CAAQlD,CAAR,EAAWmD,IAAX,CAAgB,CAAhB,EAAmB0B,IAAnB,GAA0B1B,IAA1B,CAA+B,CAA/B,CAAN,CAAJ;;AAEpB5E,EAAAA,QAAQ,GAAG,KAAX;AAEA4C,EAAAA,CAAC,GAAGrC,IAAI,CAACsB,IAAL,CAAU8F,GAAG,GAAG3G,QAAhB,CAAJ;AACA8C,EAAAA,CAAC,GAAG,CAAJ;AACAmE,EAAAA,EAAE,GAAGxG,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAL;AACAsC,EAAAA,CAAC,GAAG,IAAI3B,IAAJ,CAASX,CAAT,CAAJ;AACAuG,EAAAA,EAAE,GAAGvG,CAAL,CAzCsC,CA2CtC;;AACA,SAAOkB,CAAC,KAAK,CAAC,CAAd,GAAkB;AAChBqF,IAAAA,EAAE,GAAGA,EAAE,CAACrD,KAAH,CAASsD,EAAT,CAAL;AACAhE,IAAAA,CAAC,GAAGF,CAAC,CAACoC,KAAF,CAAQ6B,EAAE,CAAC5C,GAAH,CAAOtB,CAAC,IAAI,CAAZ,CAAR,CAAJ;AAEAkE,IAAAA,EAAE,GAAGA,EAAE,CAACrD,KAAH,CAASsD,EAAT,CAAL;AACAlE,IAAAA,CAAC,GAAGE,CAAC,CAACW,IAAF,CAAOoD,EAAE,CAAC5C,GAAH,CAAOtB,CAAC,IAAI,CAAZ,CAAP,CAAJ;AAEA,QAAIC,CAAC,CAACf,CAAF,CAAIJ,CAAJ,MAAW,KAAK,CAApB,EAAuB,KAAKD,CAAC,GAAGC,CAAT,EAAYmB,CAAC,CAACf,CAAF,CAAIL,CAAJ,MAAWsB,CAAC,CAACjB,CAAF,CAAIL,CAAJ,CAAX,IAAqBA,CAAC,EAAlC,EAAsC;AAC9D;;AAED,MAAIR,CAAJ,EAAO4B,CAAC,GAAGA,CAAC,CAACY,KAAF,CAAQ,KAAMxC,CAAC,GAAG,CAAlB,CAAJ;AAEPnC,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO4B,QAAQ,CAACmC,CAAD,EAAI3B,IAAI,CAAC9C,SAAL,GAAiBgE,EAArB,EAAyBlB,IAAI,CAAC7C,QAAL,GAAgBgE,EAAzC,EAA6C,IAA7C,CAAf;AACD,CA3DD;AA8DA;AACA;AACA;AACA;;;AACAlC,CAAC,CAAC+C,QAAF,GAAa,YAAY;AACvB,SAAO,CAAC,CAAC,KAAKpB,CAAd;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACA3B,CAAC,CAAC6G,SAAF,GAAc7G,CAAC,CAAC8G,KAAF,GAAU,YAAY;AAClC,SAAO,CAAC,CAAC,KAAKnF,CAAP,IAAY1C,SAAS,CAAC,KAAKwB,CAAL,GAASd,QAAV,CAAT,GAA+B,KAAKgC,CAAL,CAAO7B,MAAP,GAAgB,CAAlE;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAE,CAAC,CAAC+G,KAAF,GAAU,YAAY;AACpB,SAAO,CAAC,KAAKzG,CAAb;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAN,CAAC,CAACgH,UAAF,GAAehH,CAAC,CAAC2F,KAAF,GAAU,YAAY;AACnC,SAAO,KAAKrF,CAAL,GAAS,CAAhB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAN,CAAC,CAACiH,UAAF,GAAejH,CAAC,CAACkH,KAAF,GAAU,YAAY;AACnC,SAAO,KAAK5G,CAAL,GAAS,CAAhB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACAN,CAAC,CAACgD,MAAF,GAAW,YAAY;AACrB,SAAO,CAAC,CAAC,KAAKrB,CAAP,IAAY,KAAKA,CAAL,CAAO,CAAP,MAAc,CAAjC;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACA3B,CAAC,CAACmH,QAAF,GAAanH,CAAC,CAACoH,EAAF,GAAO,UAAU/F,CAAV,EAAa;AAC/B,SAAO,KAAKF,GAAL,CAASE,CAAT,IAAc,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;;;AACArB,CAAC,CAACqH,iBAAF,GAAsBrH,CAAC,CAACgG,GAAF,GAAQ,UAAU3E,CAAV,EAAa;AACzC,SAAO,KAAKF,GAAL,CAASE,CAAT,IAAc,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAACsH,SAAF,GAActH,CAAC,CAACuH,GAAF,GAAQ,UAAUC,IAAV,EAAgB;AACpC,MAAIC,QAAJ;AAAA,MAAc9F,CAAd;AAAA,MAAiB+F,WAAjB;AAAA,MAA8B5G,CAA9B;AAAA,MAAiC6G,GAAjC;AAAA,MAAsCC,GAAtC;AAAA,MAA2CzF,EAA3C;AAAA,MAA+CO,CAA/C;AAAA,MACEmF,GAAG,GAAG,IADR;AAAA,MAEE9G,IAAI,GAAG8G,GAAG,CAACxH,WAFb;AAAA,MAGE4B,EAAE,GAAGlB,IAAI,CAAC9C,SAHZ;AAAA,MAIEiE,EAAE,GAAGnB,IAAI,CAAC7C,QAJZ;AAAA,MAKE4J,KAAK,GAAG,CALV,CADoC,CAQpC;;AACA,MAAIN,IAAI,IAAI,IAAZ,EAAkB;AAChBA,IAAAA,IAAI,GAAG,IAAIzG,IAAJ,CAAS,EAAT,CAAP;AACA0G,IAAAA,QAAQ,GAAG,IAAX;AACD,GAHD,MAGO;AACLD,IAAAA,IAAI,GAAG,IAAIzG,IAAJ,CAASyG,IAAT,CAAP;AACA7F,IAAAA,CAAC,GAAG6F,IAAI,CAAC7F,CAAT,CAFK,CAIL;;AACA,QAAI6F,IAAI,CAAClH,CAAL,GAAS,CAAT,IAAc,CAACqB,CAAf,IAAoB,CAACA,CAAC,CAAC,CAAD,CAAtB,IAA6B6F,IAAI,CAAC/D,EAAL,CAAQ,CAAR,CAAjC,EAA6C,OAAO,IAAI1C,IAAJ,CAASC,GAAT,CAAP;AAE7CyG,IAAAA,QAAQ,GAAGD,IAAI,CAAC/D,EAAL,CAAQ,EAAR,CAAX;AACD;;AAED9B,EAAAA,CAAC,GAAGkG,GAAG,CAAClG,CAAR,CAtBoC,CAwBpC;;AACA,MAAIkG,GAAG,CAACvH,CAAJ,GAAQ,CAAR,IAAa,CAACqB,CAAd,IAAmB,CAACA,CAAC,CAAC,CAAD,CAArB,IAA4BkG,GAAG,CAACpE,EAAJ,CAAO,CAAP,CAAhC,EAA2C;AACzC,WAAO,IAAI1C,IAAJ,CAASY,CAAC,IAAI,CAACA,CAAC,CAAC,CAAD,CAAP,GAAa,CAAC,CAAD,GAAK,CAAlB,GAAsBkG,GAAG,CAACvH,CAAJ,IAAS,CAAT,GAAaU,GAAb,GAAmBW,CAAC,GAAG,CAAH,GAAO,IAAI,CAA9D,CAAP;AACD,GA3BmC,CA6BpC;AACA;;;AACA,MAAI8F,QAAJ,EAAc;AACZ,QAAI9F,CAAC,CAAC7B,MAAF,GAAW,CAAf,EAAkB;AAChB6H,MAAAA,GAAG,GAAG,IAAN;AACD,KAFD,MAEO;AACL,WAAK7G,CAAC,GAAGa,CAAC,CAAC,CAAD,CAAV,EAAeb,CAAC,GAAG,EAAJ,KAAW,CAA1B,GAA8BA,CAAC,IAAI,EAAL;;AAC9B6G,MAAAA,GAAG,GAAG7G,CAAC,KAAK,CAAZ;AACD;AACF;;AAEDnC,EAAAA,QAAQ,GAAG,KAAX;AACAwD,EAAAA,EAAE,GAAGF,EAAE,GAAG6F,KAAV;AACAF,EAAAA,GAAG,GAAGG,gBAAgB,CAACF,GAAD,EAAM1F,EAAN,CAAtB;AACAuF,EAAAA,WAAW,GAAGD,QAAQ,GAAGO,OAAO,CAACjH,IAAD,EAAOoB,EAAE,GAAG,EAAZ,CAAV,GAA4B4F,gBAAgB,CAACP,IAAD,EAAOrF,EAAP,CAAlE,CA3CoC,CA6CpC;;AACAO,EAAAA,CAAC,GAAGc,MAAM,CAACoE,GAAD,EAAMF,WAAN,EAAmBvF,EAAnB,EAAuB,CAAvB,CAAV,CA9CoC,CAgDpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI8F,mBAAmB,CAACvF,CAAC,CAACf,CAAH,EAAMb,CAAC,GAAGmB,EAAV,EAAcC,EAAd,CAAvB,EAA0C;AAExC,OAAG;AACDC,MAAAA,EAAE,IAAI,EAAN;AACAyF,MAAAA,GAAG,GAAGG,gBAAgB,CAACF,GAAD,EAAM1F,EAAN,CAAtB;AACAuF,MAAAA,WAAW,GAAGD,QAAQ,GAAGO,OAAO,CAACjH,IAAD,EAAOoB,EAAE,GAAG,EAAZ,CAAV,GAA4B4F,gBAAgB,CAACP,IAAD,EAAOrF,EAAP,CAAlE;AACAO,MAAAA,CAAC,GAAGc,MAAM,CAACoE,GAAD,EAAMF,WAAN,EAAmBvF,EAAnB,EAAuB,CAAvB,CAAV;;AAEA,UAAI,CAACwF,GAAL,EAAU;AAER;AACA,YAAI,CAAC1E,cAAc,CAACP,CAAC,CAACf,CAAH,CAAd,CAAoBwB,KAApB,CAA0BrC,CAAC,GAAG,CAA9B,EAAiCA,CAAC,GAAG,EAArC,CAAD,GAA4C,CAA5C,IAAiD,IAArD,EAA2D;AACzD4B,UAAAA,CAAC,GAAGnC,QAAQ,CAACmC,CAAD,EAAIT,EAAE,GAAG,CAAT,EAAY,CAAZ,CAAZ;AACD;;AAED;AACD;AACF,KAfD,QAeSgG,mBAAmB,CAACvF,CAAC,CAACf,CAAH,EAAMb,CAAC,IAAI,EAAX,EAAeoB,EAAf,CAf5B;AAgBD;;AAEDvD,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO4B,QAAQ,CAACmC,CAAD,EAAIT,EAAJ,EAAQC,EAAR,CAAf;AACD,CArFD;AAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAAC8E,KAAF,GAAU9E,CAAC,CAACkI,GAAF,GAAQ,UAAU7G,CAAV,EAAa;AAC7B,MAAIM,CAAJ;AAAA,MAAOlB,CAAP;AAAA,MAAUa,CAAV;AAAA,MAAaC,CAAb;AAAA,MAAgBT,CAAhB;AAAA,MAAmB0D,GAAnB;AAAA,MAAwBvC,EAAxB;AAAA,MAA4BC,EAA5B;AAAA,MAAgCR,EAAhC;AAAA,MAAoCyG,EAApC;AAAA,MAAwCC,IAAxC;AAAA,MAA8CxG,EAA9C;AAAA,MACExB,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIAgB,EAAAA,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAT,CAAJ,CAL6B,CAO7B;;AACA,MAAI,CAACjB,CAAC,CAACuB,CAAH,IAAQ,CAACN,CAAC,CAACM,CAAf,EAAkB;AAEhB;AACA,QAAI,CAACvB,CAAC,CAACE,CAAH,IAAQ,CAACe,CAAC,CAACf,CAAf,EAAkBe,CAAC,GAAG,IAAIN,IAAJ,CAASC,GAAT,CAAJ,CAAlB,CAEA;AAFA,SAGK,IAAIZ,CAAC,CAACuB,CAAN,EAASN,CAAC,CAACf,CAAF,GAAM,CAACe,CAAC,CAACf,CAAT,CAAT,CAEL;AACA;AACA;AAJK,SAKAe,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAC,CAACM,CAAF,IAAOvB,CAAC,CAACE,CAAF,KAAQe,CAAC,CAACf,CAAjB,GAAqBF,CAArB,GAAyBY,GAAlC,CAAJ;AAEL,WAAOK,CAAP;AACD,GAtB4B,CAwB7B;;;AACA,MAAIjB,CAAC,CAACE,CAAF,IAAOe,CAAC,CAACf,CAAb,EAAgB;AACde,IAAAA,CAAC,CAACf,CAAF,GAAM,CAACe,CAAC,CAACf,CAAT;AACA,WAAOF,CAAC,CAACmD,IAAF,CAAOlC,CAAP,CAAP;AACD;;AAEDK,EAAAA,EAAE,GAAGtB,CAAC,CAACuB,CAAP;AACAC,EAAAA,EAAE,GAAGP,CAAC,CAACM,CAAP;AACAM,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAjC6B,CAmC7B;;AACA,MAAI,CAACwD,EAAE,CAAC,CAAD,CAAH,IAAU,CAACE,EAAE,CAAC,CAAD,CAAjB,EAAsB;AAEpB;AACA,QAAIA,EAAE,CAAC,CAAD,CAAN,EAAWP,CAAC,CAACf,CAAF,GAAM,CAACe,CAAC,CAACf,CAAT,CAAX,CAEA;AAFA,SAGK,IAAIoB,EAAE,CAAC,CAAD,CAAN,EAAWL,CAAC,GAAG,IAAIN,IAAJ,CAASX,CAAT,CAAJ,CAAX,CAEL;AACA;AAHK,SAIA,OAAO,IAAIW,IAAJ,CAASmB,EAAE,KAAK,CAAP,GAAW,CAAC,CAAZ,GAAgB,CAAzB,CAAP;AAEL,WAAOvD,QAAQ,GAAG4B,QAAQ,CAACc,CAAD,EAAIY,EAAJ,EAAQC,EAAR,CAAX,GAAyBb,CAAxC;AACD,GAjD4B,CAmD7B;AAEA;;;AACAZ,EAAAA,CAAC,GAAGxB,SAAS,CAACoC,CAAC,CAACZ,CAAF,GAAMd,QAAP,CAAb;AACAwI,EAAAA,EAAE,GAAGlJ,SAAS,CAACmB,CAAC,CAACK,CAAF,GAAMd,QAAP,CAAd;AAEA+B,EAAAA,EAAE,GAAGA,EAAE,CAACyB,KAAH,EAAL;AACArC,EAAAA,CAAC,GAAGqH,EAAE,GAAG1H,CAAT,CA1D6B,CA4D7B;;AACA,MAAIK,CAAJ,EAAO;AACLsH,IAAAA,IAAI,GAAGtH,CAAC,GAAG,CAAX;;AAEA,QAAIsH,IAAJ,EAAU;AACRzG,MAAAA,CAAC,GAAGD,EAAJ;AACAZ,MAAAA,CAAC,GAAG,CAACA,CAAL;AACA0D,MAAAA,GAAG,GAAG5C,EAAE,CAAC9B,MAAT;AACD,KAJD,MAIO;AACL6B,MAAAA,CAAC,GAAGC,EAAJ;AACAnB,MAAAA,CAAC,GAAG0H,EAAJ;AACA3D,MAAAA,GAAG,GAAG9C,EAAE,CAAC5B,MAAT;AACD,KAXI,CAaL;AACA;AACA;;;AACAwB,IAAAA,CAAC,GAAGpC,IAAI,CAAC2B,GAAL,CAAS3B,IAAI,CAACsB,IAAL,CAAUyB,EAAE,GAAGtC,QAAf,CAAT,EAAmC6E,GAAnC,IAA0C,CAA9C;;AAEA,QAAI1D,CAAC,GAAGQ,CAAR,EAAW;AACTR,MAAAA,CAAC,GAAGQ,CAAJ;AACAK,MAAAA,CAAC,CAAC7B,MAAF,GAAW,CAAX;AACD,KArBI,CAuBL;;;AACA6B,IAAAA,CAAC,CAAC0G,OAAF;;AACA,SAAK/G,CAAC,GAAGR,CAAT,EAAYQ,CAAC,EAAb,GAAkBK,CAAC,CAAC2G,IAAF,CAAO,CAAP;;AAClB3G,IAAAA,CAAC,CAAC0G,OAAF,GA1BK,CA4BP;AACC,GA7BD,MA6BO;AAEL;AAEA/G,IAAAA,CAAC,GAAGI,EAAE,CAAC5B,MAAP;AACA0E,IAAAA,GAAG,GAAG5C,EAAE,CAAC9B,MAAT;AACAsI,IAAAA,IAAI,GAAG9G,CAAC,GAAGkD,GAAX;AACA,QAAI4D,IAAJ,EAAU5D,GAAG,GAAGlD,CAAN;;AAEV,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGkD,GAAhB,EAAqBlD,CAAC,EAAtB,EAA0B;AACxB,UAAII,EAAE,CAACJ,CAAD,CAAF,IAASM,EAAE,CAACN,CAAD,CAAf,EAAoB;AAClB8G,QAAAA,IAAI,GAAG1G,EAAE,CAACJ,CAAD,CAAF,GAAQM,EAAE,CAACN,CAAD,CAAjB;AACA;AACD;AACF;;AAEDR,IAAAA,CAAC,GAAG,CAAJ;AACD;;AAED,MAAIsH,IAAJ,EAAU;AACRzG,IAAAA,CAAC,GAAGD,EAAJ;AACAA,IAAAA,EAAE,GAAGE,EAAL;AACAA,IAAAA,EAAE,GAAGD,CAAL;AACAN,IAAAA,CAAC,CAACf,CAAF,GAAM,CAACe,CAAC,CAACf,CAAT;AACD;;AAEDkE,EAAAA,GAAG,GAAG9C,EAAE,CAAC5B,MAAT,CApH6B,CAsH7B;AACA;;AACA,OAAKwB,CAAC,GAAGM,EAAE,CAAC9B,MAAH,GAAY0E,GAArB,EAA0BlD,CAAC,GAAG,CAA9B,EAAiC,EAAEA,CAAnC,EAAsCI,EAAE,CAAC8C,GAAG,EAAJ,CAAF,GAAY,CAAZ,CAxHT,CA0H7B;;;AACA,OAAKlD,CAAC,GAAGM,EAAE,CAAC9B,MAAZ,EAAoBwB,CAAC,GAAGR,CAAxB,GAA4B;AAE1B,QAAIY,EAAE,CAAC,EAAEJ,CAAH,CAAF,GAAUM,EAAE,CAACN,CAAD,CAAhB,EAAqB;AACnB,WAAKC,CAAC,GAAGD,CAAT,EAAYC,CAAC,IAAIG,EAAE,CAAC,EAAEH,CAAH,CAAF,KAAY,CAA7B,GAAiCG,EAAE,CAACH,CAAD,CAAF,GAAQ7B,IAAI,GAAG,CAAf;;AACjC,QAAEgC,EAAE,CAACH,CAAD,CAAJ;AACAG,MAAAA,EAAE,CAACJ,CAAD,CAAF,IAAS5B,IAAT;AACD;;AAEDgC,IAAAA,EAAE,CAACJ,CAAD,CAAF,IAASM,EAAE,CAACN,CAAD,CAAX;AACD,GApI4B,CAsI7B;;;AACA,SAAOI,EAAE,CAAC,EAAE8C,GAAH,CAAF,KAAc,CAArB,GAAyB9C,EAAE,CAAC6G,GAAH,GAvII,CAyI7B;;;AACA,SAAO7G,EAAE,CAAC,CAAD,CAAF,KAAU,CAAjB,EAAoBA,EAAE,CAAC8G,KAAH,EAApB,EAAgC,EAAE/H,CAAF,CA1IH,CA4I7B;;;AACA,MAAI,CAACiB,EAAE,CAAC,CAAD,CAAP,EAAY,OAAO,IAAIX,IAAJ,CAASmB,EAAE,KAAK,CAAP,GAAW,CAAC,CAAZ,GAAgB,CAAzB,CAAP;AAEZb,EAAAA,CAAC,CAACM,CAAF,GAAMD,EAAN;AACAL,EAAAA,CAAC,CAACZ,CAAF,GAAMgI,iBAAiB,CAAC/G,EAAD,EAAKjB,CAAL,CAAvB;AAEA,SAAO9B,QAAQ,GAAG4B,QAAQ,CAACc,CAAD,EAAIY,EAAJ,EAAQC,EAAR,CAAX,GAAyBb,CAAxC;AACD,CAnJD;AAsJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAAC7B,MAAF,GAAW6B,CAAC,CAAC0I,GAAF,GAAQ,UAAUrH,CAAV,EAAa;AAC9B,MAAIsH,CAAJ;AAAA,MACEvI,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIAgB,EAAAA,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAT,CAAJ,CAL8B,CAO9B;;AACA,MAAI,CAACjB,CAAC,CAACuB,CAAH,IAAQ,CAACN,CAAC,CAACf,CAAX,IAAgBe,CAAC,CAACM,CAAF,IAAO,CAACN,CAAC,CAACM,CAAF,CAAI,CAAJ,CAA5B,EAAoC,OAAO,IAAIZ,IAAJ,CAASC,GAAT,CAAP,CARN,CAU9B;;AACA,MAAI,CAACK,CAAC,CAACM,CAAH,IAAQvB,CAAC,CAACuB,CAAF,IAAO,CAACvB,CAAC,CAACuB,CAAF,CAAI,CAAJ,CAApB,EAA4B;AAC1B,WAAOpB,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAcW,IAAI,CAAC9C,SAAnB,EAA8B8C,IAAI,CAAC7C,QAAnC,CAAf;AACD,GAb6B,CAe9B;;;AACAS,EAAAA,QAAQ,GAAG,KAAX;;AAEA,MAAIoC,IAAI,CAAC5C,MAAL,IAAe,CAAnB,EAAsB;AAEpB;AACA;AACAwK,IAAAA,CAAC,GAAGnF,MAAM,CAACpD,CAAD,EAAIiB,CAAC,CAAClB,GAAF,EAAJ,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAV;AACAwI,IAAAA,CAAC,CAACrI,CAAF,IAAOe,CAAC,CAACf,CAAT;AACD,GAND,MAMO;AACLqI,IAAAA,CAAC,GAAGnF,MAAM,CAACpD,CAAD,EAAIiB,CAAJ,EAAO,CAAP,EAAUN,IAAI,CAAC5C,MAAf,EAAuB,CAAvB,CAAV;AACD;;AAEDwK,EAAAA,CAAC,GAAGA,CAAC,CAACrF,KAAF,CAAQjC,CAAR,CAAJ;AAEA1C,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAOyB,CAAC,CAAC0E,KAAF,CAAQ6D,CAAR,CAAP;AACD,CAjCD;AAoCA;AACA;AACA;AACA;AACA;AACA;;;AACA3I,CAAC,CAAC4I,kBAAF,GAAuB5I,CAAC,CAAC6I,GAAF,GAAQ,YAAY;AACzC,SAAOD,kBAAkB,CAAC,IAAD,CAAzB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACA5I,CAAC,CAAC+H,gBAAF,GAAqB/H,CAAC,CAACiG,EAAF,GAAO,YAAY;AACtC,SAAO8B,gBAAgB,CAAC,IAAD,CAAvB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACA/H,CAAC,CAAC8I,OAAF,GAAY9I,CAAC,CAACqC,GAAF,GAAQ,YAAY;AAC9B,MAAIjC,CAAC,GAAG,IAAI,KAAKC,WAAT,CAAqB,IAArB,CAAR;AACAD,EAAAA,CAAC,CAACE,CAAF,GAAM,CAACF,CAAC,CAACE,CAAT;AACA,SAAOC,QAAQ,CAACH,CAAD,CAAf;AACD,CAJD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,CAAC,CAACuD,IAAF,GAASvD,CAAC,CAAC+I,GAAF,GAAQ,UAAU1H,CAAV,EAAa;AAC5B,MAAI2H,KAAJ;AAAA,MAAWrH,CAAX;AAAA,MAAclB,CAAd;AAAA,MAAiBa,CAAjB;AAAA,MAAoBR,CAApB;AAAA,MAAuB0D,GAAvB;AAAA,MAA4BvC,EAA5B;AAAA,MAAgCC,EAAhC;AAAA,MAAoCR,EAApC;AAAA,MAAwCE,EAAxC;AAAA,MACExB,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIAgB,EAAAA,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAT,CAAJ,CAL4B,CAO5B;;AACA,MAAI,CAACjB,CAAC,CAACuB,CAAH,IAAQ,CAACN,CAAC,CAACM,CAAf,EAAkB;AAEhB;AACA,QAAI,CAACvB,CAAC,CAACE,CAAH,IAAQ,CAACe,CAAC,CAACf,CAAf,EAAkBe,CAAC,GAAG,IAAIN,IAAJ,CAASC,GAAT,CAAJ,CAAlB,CAEA;AACA;AACA;AACA;AALA,SAMK,IAAI,CAACZ,CAAC,CAACuB,CAAP,EAAUN,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAC,CAACM,CAAF,IAAOvB,CAAC,CAACE,CAAF,KAAQe,CAAC,CAACf,CAAjB,GAAqBF,CAArB,GAAyBY,GAAlC,CAAJ;AAEf,WAAOK,CAAP;AACD,GApB2B,CAsB3B;;;AACD,MAAIjB,CAAC,CAACE,CAAF,IAAOe,CAAC,CAACf,CAAb,EAAgB;AACde,IAAAA,CAAC,CAACf,CAAF,GAAM,CAACe,CAAC,CAACf,CAAT;AACA,WAAOF,CAAC,CAAC0E,KAAF,CAAQzD,CAAR,CAAP;AACD;;AAEDK,EAAAA,EAAE,GAAGtB,CAAC,CAACuB,CAAP;AACAC,EAAAA,EAAE,GAAGP,CAAC,CAACM,CAAP;AACAM,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CA/B4B,CAiC5B;;AACA,MAAI,CAACwD,EAAE,CAAC,CAAD,CAAH,IAAU,CAACE,EAAE,CAAC,CAAD,CAAjB,EAAsB;AAEpB;AACA;AACA,QAAI,CAACA,EAAE,CAAC,CAAD,CAAP,EAAYP,CAAC,GAAG,IAAIN,IAAJ,CAASX,CAAT,CAAJ;AAEZ,WAAOzB,QAAQ,GAAG4B,QAAQ,CAACc,CAAD,EAAIY,EAAJ,EAAQC,EAAR,CAAX,GAAyBb,CAAxC;AACD,GAzC2B,CA2C5B;AAEA;;;AACAP,EAAAA,CAAC,GAAG7B,SAAS,CAACmB,CAAC,CAACK,CAAF,GAAMd,QAAP,CAAb;AACAc,EAAAA,CAAC,GAAGxB,SAAS,CAACoC,CAAC,CAACZ,CAAF,GAAMd,QAAP,CAAb;AAEA+B,EAAAA,EAAE,GAAGA,EAAE,CAACyB,KAAH,EAAL;AACA7B,EAAAA,CAAC,GAAGR,CAAC,GAAGL,CAAR,CAlD4B,CAoD5B;;AACA,MAAIa,CAAJ,EAAO;AAEL,QAAIA,CAAC,GAAG,CAAR,EAAW;AACTK,MAAAA,CAAC,GAAGD,EAAJ;AACAJ,MAAAA,CAAC,GAAG,CAACA,CAAL;AACAkD,MAAAA,GAAG,GAAG5C,EAAE,CAAC9B,MAAT;AACD,KAJD,MAIO;AACL6B,MAAAA,CAAC,GAAGC,EAAJ;AACAnB,MAAAA,CAAC,GAAGK,CAAJ;AACA0D,MAAAA,GAAG,GAAG9C,EAAE,CAAC5B,MAAT;AACD,KAVI,CAYL;;;AACAgB,IAAAA,CAAC,GAAG5B,IAAI,CAACsB,IAAL,CAAUyB,EAAE,GAAGtC,QAAf,CAAJ;AACA6E,IAAAA,GAAG,GAAG1D,CAAC,GAAG0D,GAAJ,GAAU1D,CAAC,GAAG,CAAd,GAAkB0D,GAAG,GAAG,CAA9B;;AAEA,QAAIlD,CAAC,GAAGkD,GAAR,EAAa;AACXlD,MAAAA,CAAC,GAAGkD,GAAJ;AACA7C,MAAAA,CAAC,CAAC7B,MAAF,GAAW,CAAX;AACD,KAnBI,CAqBL;;;AACA6B,IAAAA,CAAC,CAAC0G,OAAF;;AACA,WAAO/G,CAAC,EAAR,GAAaK,CAAC,CAAC2G,IAAF,CAAO,CAAP;;AACb3G,IAAAA,CAAC,CAAC0G,OAAF;AACD;;AAED7D,EAAAA,GAAG,GAAG9C,EAAE,CAAC5B,MAAT;AACAwB,EAAAA,CAAC,GAAGM,EAAE,CAAC9B,MAAP,CAjF4B,CAmF5B;;AACA,MAAI0E,GAAG,GAAGlD,CAAN,GAAU,CAAd,EAAiB;AACfA,IAAAA,CAAC,GAAGkD,GAAJ;AACA7C,IAAAA,CAAC,GAAGC,EAAJ;AACAA,IAAAA,EAAE,GAAGF,EAAL;AACAA,IAAAA,EAAE,GAAGC,CAAL;AACD,GAzF2B,CA2F5B;;;AACA,OAAKqH,KAAK,GAAG,CAAb,EAAgB1H,CAAhB,GAAoB;AAClB0H,IAAAA,KAAK,GAAG,CAACtH,EAAE,CAAC,EAAEJ,CAAH,CAAF,GAAUI,EAAE,CAACJ,CAAD,CAAF,GAAQM,EAAE,CAACN,CAAD,CAAV,GAAgB0H,KAA3B,IAAoCtJ,IAApC,GAA2C,CAAnD;AACAgC,IAAAA,EAAE,CAACJ,CAAD,CAAF,IAAS5B,IAAT;AACD;;AAED,MAAIsJ,KAAJ,EAAW;AACTtH,IAAAA,EAAE,CAACuH,OAAH,CAAWD,KAAX;AACA,MAAEvI,CAAF;AACD,GApG2B,CAsG5B;AACA;;;AACA,OAAK+D,GAAG,GAAG9C,EAAE,CAAC5B,MAAd,EAAsB4B,EAAE,CAAC,EAAE8C,GAAH,CAAF,IAAa,CAAnC,GAAuC9C,EAAE,CAAC6G,GAAH;;AAEvClH,EAAAA,CAAC,CAACM,CAAF,GAAMD,EAAN;AACAL,EAAAA,CAAC,CAACZ,CAAF,GAAMgI,iBAAiB,CAAC/G,EAAD,EAAKjB,CAAL,CAAvB;AAEA,SAAO9B,QAAQ,GAAG4B,QAAQ,CAACc,CAAD,EAAIY,EAAJ,EAAQC,EAAR,CAAX,GAAyBb,CAAxC;AACD,CA9GD;AAiHA;AACA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAAC/B,SAAF,GAAc+B,CAAC,CAACmC,EAAF,GAAO,UAAU+G,CAAV,EAAa;AAChC,MAAIpI,CAAJ;AAAA,MACEV,CAAC,GAAG,IADN;AAGA,MAAI8I,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAC,CAACA,CAAxB,IAA6BA,CAAC,KAAK,CAAnC,IAAwCA,CAAC,KAAK,CAAlD,EAAqD,MAAMhI,KAAK,CAACrC,eAAe,GAAGqK,CAAnB,CAAX;;AAErD,MAAI9I,CAAC,CAACuB,CAAN,EAAS;AACPb,IAAAA,CAAC,GAAGqI,YAAY,CAAC/I,CAAC,CAACuB,CAAH,CAAhB;AACA,QAAIuH,CAAC,IAAI9I,CAAC,CAACK,CAAF,GAAM,CAAN,GAAUK,CAAnB,EAAsBA,CAAC,GAAGV,CAAC,CAACK,CAAF,GAAM,CAAV;AACvB,GAHD,MAGO;AACLK,IAAAA,CAAC,GAAGE,GAAJ;AACD;;AAED,SAAOF,CAAP;AACD,CAdD;AAiBA;AACA;AACA;AACA;AACA;;;AACAd,CAAC,CAACoJ,KAAF,GAAU,YAAY;AACpB,MAAIhJ,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;AAGA,SAAOE,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAcA,CAAC,CAACK,CAAF,GAAM,CAApB,EAAuBM,IAAI,CAAC7C,QAA5B,CAAf;AACD,CALD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8B,CAAC,CAACqJ,IAAF,GAASrJ,CAAC,CAACsJ,GAAF,GAAQ,YAAY;AAC3B,MAAIrH,EAAJ;AAAA,MAAQC,EAAR;AAAA,MACE9B,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAO,IAAIhC,IAAJ,CAASC,GAAT,CAAP;AACnB,MAAIZ,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AAEhB6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG/C,IAAI,CAAC2B,GAAL,CAAST,CAAC,CAACK,CAAX,EAAcL,CAAC,CAAC+B,EAAF,EAAd,CAAL,GAA6BxC,QAA9C;AACAoB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEAkC,EAAAA,CAAC,GAAGiJ,IAAI,CAACtI,IAAD,EAAOqB,gBAAgB,CAACrB,IAAD,EAAOX,CAAP,CAAvB,CAAR;AAEAW,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO3B,QAAQ,CAAC7B,QAAQ,GAAG,CAAX,GAAe0B,CAAC,CAACiC,GAAF,EAAf,GAAyBjC,CAA1B,EAA6B6B,EAA7B,EAAiCC,EAAjC,EAAqC,IAArC,CAAf;AACD,CAnBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACuJ,UAAF,GAAevJ,CAAC,CAACiF,IAAF,GAAS,YAAY;AAClC,MAAIzC,CAAJ;AAAA,MAAOC,CAAP;AAAA,MAAUN,EAAV;AAAA,MAAcO,CAAd;AAAA,MAAiBC,GAAjB;AAAA,MAAsBC,CAAtB;AAAA,MACExC,CAAC,GAAG,IADN;AAAA,MAEEuB,CAAC,GAAGvB,CAAC,CAACuB,CAFR;AAAA,MAGElB,CAAC,GAAGL,CAAC,CAACK,CAHR;AAAA,MAIEH,CAAC,GAAGF,CAAC,CAACE,CAJR;AAAA,MAKES,IAAI,GAAGX,CAAC,CAACC,WALX,CADkC,CAQlC;;AACA,MAAIC,CAAC,KAAK,CAAN,IAAW,CAACqB,CAAZ,IAAiB,CAACA,CAAC,CAAC,CAAD,CAAvB,EAA4B;AAC1B,WAAO,IAAIZ,IAAJ,CAAS,CAACT,CAAD,IAAMA,CAAC,GAAG,CAAJ,KAAU,CAACqB,CAAD,IAAMA,CAAC,CAAC,CAAD,CAAjB,CAAN,GAA8BX,GAA9B,GAAoCW,CAAC,GAAGvB,CAAH,GAAO,IAAI,CAAzD,CAAP;AACD;;AAEDzB,EAAAA,QAAQ,GAAG,KAAX,CAbkC,CAelC;;AACA2B,EAAAA,CAAC,GAAGpB,IAAI,CAAC+F,IAAL,CAAU,CAAC7E,CAAX,CAAJ,CAhBkC,CAkBlC;AACA;;AACA,MAAIE,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI,IAAI,CAAvB,EAA0B;AACxBmC,IAAAA,CAAC,GAAGQ,cAAc,CAACtB,CAAD,CAAlB;AAEA,QAAI,CAACc,CAAC,CAAC3C,MAAF,GAAWW,CAAZ,IAAiB,CAAjB,IAAsB,CAA1B,EAA6BgC,CAAC,IAAI,GAAL;AAC7BnC,IAAAA,CAAC,GAAGpB,IAAI,CAAC+F,IAAL,CAAUxC,CAAV,CAAJ;AACAhC,IAAAA,CAAC,GAAGxB,SAAS,CAAC,CAACwB,CAAC,GAAG,CAAL,IAAU,CAAX,CAAT,IAA0BA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,CAAvC,CAAJ;;AAEA,QAAIH,CAAC,IAAI,IAAI,CAAb,EAAgB;AACdmC,MAAAA,CAAC,GAAG,OAAOhC,CAAX;AACD,KAFD,MAEO;AACLgC,MAAAA,CAAC,GAAGnC,CAAC,CAAC4C,aAAF,EAAJ;AACAT,MAAAA,CAAC,GAAGA,CAAC,CAACU,KAAF,CAAQ,CAAR,EAAWV,CAAC,CAACW,OAAF,CAAU,GAAV,IAAiB,CAA5B,IAAiC3C,CAArC;AACD;;AAEDiC,IAAAA,CAAC,GAAG,IAAI3B,IAAJ,CAAS0B,CAAT,CAAJ;AACD,GAfD,MAeO;AACLC,IAAAA,CAAC,GAAG,IAAI3B,IAAJ,CAAST,CAAC,CAAC+C,QAAF,EAAT,CAAJ;AACD;;AAEDlB,EAAAA,EAAE,GAAG,CAAC1B,CAAC,GAAGM,IAAI,CAAC9C,SAAV,IAAuB,CAA5B,CAvCkC,CAyClC;;AACA,WAAS;AACP2E,IAAAA,CAAC,GAAGF,CAAJ;AACAA,IAAAA,CAAC,GAAGE,CAAC,CAACW,IAAF,CAAOC,MAAM,CAACpD,CAAD,EAAIwC,CAAJ,EAAOT,EAAE,GAAG,CAAZ,EAAe,CAAf,CAAb,EAAgCmB,KAAhC,CAAsC,GAAtC,CAAJ,CAFO,CAIP;;AACA,QAAIL,cAAc,CAACL,CAAC,CAACjB,CAAH,CAAd,CAAoBwB,KAApB,CAA0B,CAA1B,EAA6BhB,EAA7B,MAAqC,CAACM,CAAC,GAAGQ,cAAc,CAACP,CAAC,CAACf,CAAH,CAAnB,EAA0BwB,KAA1B,CAAgC,CAAhC,EAAmChB,EAAnC,CAAzC,EAAiF;AAC/EM,MAAAA,CAAC,GAAGA,CAAC,CAACU,KAAF,CAAQhB,EAAE,GAAG,CAAb,EAAgBA,EAAE,GAAG,CAArB,CAAJ,CAD+E,CAG/E;AACA;;AACA,UAAIM,CAAC,IAAI,MAAL,IAAe,CAACE,GAAD,IAAQF,CAAC,IAAI,MAAhC,EAAwC;AAEtC;AACA;AACA,YAAI,CAACE,GAAL,EAAU;AACRpC,UAAAA,QAAQ,CAACqC,CAAD,EAAInC,CAAC,GAAG,CAAR,EAAW,CAAX,CAAR;;AAEA,cAAImC,CAAC,CAACU,KAAF,CAAQV,CAAR,EAAWa,EAAX,CAAcrD,CAAd,CAAJ,EAAsB;AACpBsC,YAAAA,CAAC,GAAGE,CAAJ;AACA;AACD;AACF;;AAEDT,QAAAA,EAAE,IAAI,CAAN;AACAQ,QAAAA,GAAG,GAAG,CAAN;AACD,OAfD,MAeO;AAEL;AACA;AACA,YAAI,CAAC,CAACF,CAAF,IAAO,CAAC,CAACA,CAAC,CAACU,KAAF,CAAQ,CAAR,CAAF,IAAgBV,CAAC,CAACiB,MAAF,CAAS,CAAT,KAAe,GAA1C,EAA+C;AAE7C;AACAnD,UAAAA,QAAQ,CAACmC,CAAD,EAAIjC,CAAC,GAAG,CAAR,EAAW,CAAX,CAAR;AACA+B,UAAAA,CAAC,GAAG,CAACE,CAAC,CAACY,KAAF,CAAQZ,CAAR,EAAWe,EAAX,CAAcrD,CAAd,CAAL;AACD;;AAED;AACD;AACF;AACF;;AAEDzB,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO4B,QAAQ,CAACmC,CAAD,EAAIjC,CAAJ,EAAOM,IAAI,CAAC7C,QAAZ,EAAsBsE,CAAtB,CAAf;AACD,CAtFD;AAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxC,CAAC,CAACwJ,OAAF,GAAYxJ,CAAC,CAACyJ,GAAF,GAAQ,YAAY;AAC9B,MAAIxH,EAAJ;AAAA,MAAQC,EAAR;AAAA,MACE9B,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAIA,MAAI,CAACD,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAO,IAAIhC,IAAJ,CAASC,GAAT,CAAP;AACnB,MAAIZ,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAO,IAAIjC,IAAJ,CAASX,CAAT,CAAP;AAEhB6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACA6C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAE,GAAG,EAAtB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgB,CAAhB;AAEAkC,EAAAA,CAAC,GAAGA,CAAC,CAACkJ,GAAF,EAAJ;AACAlJ,EAAAA,CAAC,CAACE,CAAF,GAAM,CAAN;AACAF,EAAAA,CAAC,GAAGoD,MAAM,CAACpD,CAAD,EAAI,IAAIW,IAAJ,CAAS,CAAT,EAAY+D,KAAZ,CAAkB1E,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAlB,EAA8B6E,IAA9B,EAAJ,EAA0ChD,EAAE,GAAG,EAA/C,EAAmD,CAAnD,CAAV;AAEAlB,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAlB,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO3B,QAAQ,CAAC7B,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAA7B,GAAiC0B,CAAC,CAACiC,GAAF,EAAjC,GAA2CjC,CAA5C,EAA+C6B,EAA/C,EAAmDC,EAAnD,EAAuD,IAAvD,CAAf;AACD,CArBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACsD,KAAF,GAAUtD,CAAC,CAAC0J,GAAF,GAAQ,UAAUrI,CAAV,EAAa;AAC7B,MAAI2H,KAAJ;AAAA,MAAWvI,CAAX;AAAA,MAAca,CAAd;AAAA,MAAiBR,CAAjB;AAAA,MAAoB4B,CAApB;AAAA,MAAuBiH,EAAvB;AAAA,MAA2B/G,CAA3B;AAAA,MAA8BpB,GAA9B;AAAA,MAAmCC,GAAnC;AAAA,MACErB,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAAA,MAGEqB,EAAE,GAAGtB,CAAC,CAACuB,CAHT;AAAA,MAIEC,EAAE,GAAG,CAACP,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAT,CAAL,EAAkBM,CAJzB;AAMAN,EAAAA,CAAC,CAACf,CAAF,IAAOF,CAAC,CAACE,CAAT,CAP6B,CAS5B;;AACD,MAAI,CAACoB,EAAD,IAAO,CAACA,EAAE,CAAC,CAAD,CAAV,IAAiB,CAACE,EAAlB,IAAwB,CAACA,EAAE,CAAC,CAAD,CAA/B,EAAoC;AAElC,WAAO,IAAIb,IAAJ,CAAS,CAACM,CAAC,CAACf,CAAH,IAAQoB,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAT,IAAgB,CAACE,EAAzB,IAA+BA,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAT,IAAgB,CAACF,EAAhD,CAEd;AACA;AAHc,MAIZV,GAJY,CAMd;AACA;AAPc,MAQZ,CAACU,EAAD,IAAO,CAACE,EAAR,GAAaP,CAAC,CAACf,CAAF,GAAM,CAAnB,GAAuBe,CAAC,CAACf,CAAF,GAAM,CAR1B,CAAP;AASD;;AAEDG,EAAAA,CAAC,GAAGxB,SAAS,CAACmB,CAAC,CAACK,CAAF,GAAMd,QAAP,CAAT,GAA4BV,SAAS,CAACoC,CAAC,CAACZ,CAAF,GAAMd,QAAP,CAAzC;AACA6B,EAAAA,GAAG,GAAGE,EAAE,CAAC5B,MAAT;AACA2B,EAAAA,GAAG,GAAGG,EAAE,CAAC9B,MAAT,CAzB6B,CA2B7B;;AACA,MAAI0B,GAAG,GAAGC,GAAV,EAAe;AACbiB,IAAAA,CAAC,GAAGhB,EAAJ;AACAA,IAAAA,EAAE,GAAGE,EAAL;AACAA,IAAAA,EAAE,GAAGc,CAAL;AACAiH,IAAAA,EAAE,GAAGnI,GAAL;AACAA,IAAAA,GAAG,GAAGC,GAAN;AACAA,IAAAA,GAAG,GAAGkI,EAAN;AACD,GAnC4B,CAqC7B;;;AACAjH,EAAAA,CAAC,GAAG,EAAJ;AACAiH,EAAAA,EAAE,GAAGnI,GAAG,GAAGC,GAAX;;AACA,OAAKH,CAAC,GAAGqI,EAAT,EAAarI,CAAC,EAAd,GAAmBoB,CAAC,CAAC4F,IAAF,CAAO,CAAP,EAxCU,CA0C7B;;;AACA,OAAKhH,CAAC,GAAGG,GAAT,EAAc,EAAEH,CAAF,IAAO,CAArB,GAAyB;AACvB0H,IAAAA,KAAK,GAAG,CAAR;;AACA,SAAKlI,CAAC,GAAGU,GAAG,GAAGF,CAAf,EAAkBR,CAAC,GAAGQ,CAAtB,GAA0B;AACxBsB,MAAAA,CAAC,GAAGF,CAAC,CAAC5B,CAAD,CAAD,GAAOc,EAAE,CAACN,CAAD,CAAF,GAAQI,EAAE,CAACZ,CAAC,GAAGQ,CAAJ,GAAQ,CAAT,CAAjB,GAA+B0H,KAAnC;AACAtG,MAAAA,CAAC,CAAC5B,CAAC,EAAF,CAAD,GAAS8B,CAAC,GAAGlD,IAAJ,GAAW,CAApB;AACAsJ,MAAAA,KAAK,GAAGpG,CAAC,GAAGlD,IAAJ,GAAW,CAAnB;AACD;;AAEDgD,IAAAA,CAAC,CAAC5B,CAAD,CAAD,GAAO,CAAC4B,CAAC,CAAC5B,CAAD,CAAD,GAAOkI,KAAR,IAAiBtJ,IAAjB,GAAwB,CAA/B;AACD,GApD4B,CAsD7B;;;AACA,SAAO,CAACgD,CAAC,CAAC,EAAEiH,EAAH,CAAT,GAAkBjH,CAAC,CAAC6F,GAAF;;AAElB,MAAIS,KAAJ,EAAW,EAAEvI,CAAF,CAAX,KACKiC,CAAC,CAAC8F,KAAF;AAELnH,EAAAA,CAAC,CAACM,CAAF,GAAMe,CAAN;AACArB,EAAAA,CAAC,CAACZ,CAAF,GAAMgI,iBAAiB,CAAC/F,CAAD,EAAIjC,CAAJ,CAAvB;AAEA,SAAO9B,QAAQ,GAAG4B,QAAQ,CAACc,CAAD,EAAIN,IAAI,CAAC9C,SAAT,EAAoB8C,IAAI,CAAC7C,QAAzB,CAAX,GAAgDmD,CAA/D;AACD,CAhED;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArB,CAAC,CAAC4J,QAAF,GAAa,UAAUzH,EAAV,EAAcD,EAAd,EAAkB;AAC7B,SAAO2H,cAAc,CAAC,IAAD,EAAO,CAAP,EAAU1H,EAAV,EAAcD,EAAd,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAAC8J,eAAF,GAAoB9J,CAAC,CAAC+J,IAAF,GAAS,UAAUnG,EAAV,EAAc1B,EAAd,EAAkB;AAC7C,MAAI9B,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;AAGAD,EAAAA,CAAC,GAAG,IAAIW,IAAJ,CAASX,CAAT,CAAJ;AACA,MAAIwD,EAAE,KAAK,KAAK,CAAhB,EAAmB,OAAOxD,CAAP;AAEnB4J,EAAAA,UAAU,CAACpG,EAAD,EAAK,CAAL,EAAQhG,UAAR,CAAV;AAEA,MAAIsE,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAAnB,KACK8L,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AAEL,SAAO3B,QAAQ,CAACH,CAAD,EAAIwD,EAAE,GAAGxD,CAAC,CAACK,CAAP,GAAW,CAAf,EAAkByB,EAAlB,CAAf;AACD,CAbD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACkD,aAAF,GAAkB,UAAUU,EAAV,EAAc1B,EAAd,EAAkB;AAClC,MAAI+H,GAAJ;AAAA,MACE7J,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;;AAIA,MAAIuD,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjBqG,IAAAA,GAAG,GAAGC,cAAc,CAAC9J,CAAD,EAAI,IAAJ,CAApB;AACD,GAFD,MAEO;AACL4J,IAAAA,UAAU,CAACpG,EAAD,EAAK,CAAL,EAAQhG,UAAR,CAAV;AAEA,QAAIsE,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAAnB,KACK8L,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AAEL9B,IAAAA,CAAC,GAAGG,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAcwD,EAAE,GAAG,CAAnB,EAAsB1B,EAAtB,CAAZ;AACA+H,IAAAA,GAAG,GAAGC,cAAc,CAAC9J,CAAD,EAAI,IAAJ,EAAUwD,EAAE,GAAG,CAAf,CAApB;AACD;;AAED,SAAOxD,CAAC,CAACuF,KAAF,MAAa,CAACvF,CAAC,CAAC4C,MAAF,EAAd,GAA2B,MAAMiH,GAAjC,GAAuCA,GAA9C;AACD,CAlBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjK,CAAC,CAACmK,OAAF,GAAY,UAAUvG,EAAV,EAAc1B,EAAd,EAAkB;AAC5B,MAAI+H,GAAJ;AAAA,MAAS5I,CAAT;AAAA,MACEjB,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;;AAIA,MAAIuD,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjBqG,IAAAA,GAAG,GAAGC,cAAc,CAAC9J,CAAD,CAApB;AACD,GAFD,MAEO;AACL4J,IAAAA,UAAU,CAACpG,EAAD,EAAK,CAAL,EAAQhG,UAAR,CAAV;AAEA,QAAIsE,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAAnB,KACK8L,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AAELb,IAAAA,CAAC,GAAGd,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAcwD,EAAE,GAAGxD,CAAC,CAACK,CAAP,GAAW,CAAzB,EAA4ByB,EAA5B,CAAZ;AACA+H,IAAAA,GAAG,GAAGC,cAAc,CAAC7I,CAAD,EAAI,KAAJ,EAAWuC,EAAE,GAAGvC,CAAC,CAACZ,CAAP,GAAW,CAAtB,CAApB;AACD,GAf2B,CAiB5B;AACA;;;AACA,SAAOL,CAAC,CAACuF,KAAF,MAAa,CAACvF,CAAC,CAAC4C,MAAF,EAAd,GAA2B,MAAMiH,GAAjC,GAAuCA,GAA9C;AACD,CApBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjK,CAAC,CAACoK,UAAF,GAAe,UAAUC,IAAV,EAAgB;AAC7B,MAAI1I,CAAJ;AAAA,MAAO2I,EAAP;AAAA,MAAWC,EAAX;AAAA,MAAeC,EAAf;AAAA,MAAmB/J,CAAnB;AAAA,MAAsBK,CAAtB;AAAA,MAAyB2B,CAAzB;AAAA,MAA4BgI,EAA5B;AAAA,MAAgCC,EAAhC;AAAA,MAAoCzI,EAApC;AAAA,MAAwC0G,CAAxC;AAAA,MAA2CjG,CAA3C;AAAA,MACEtC,CAAC,GAAG,IADN;AAAA,MAEEsB,EAAE,GAAGtB,CAAC,CAACuB,CAFT;AAAA,MAGEZ,IAAI,GAAGX,CAAC,CAACC,WAHX;AAKA,MAAI,CAACqB,EAAL,EAAS,OAAO,IAAIX,IAAJ,CAASX,CAAT,CAAP;AAETsK,EAAAA,EAAE,GAAGJ,EAAE,GAAG,IAAIvJ,IAAJ,CAAS,CAAT,CAAV;AACAwJ,EAAAA,EAAE,GAAGE,EAAE,GAAG,IAAI1J,IAAJ,CAAS,CAAT,CAAV;AAEAY,EAAAA,CAAC,GAAG,IAAIZ,IAAJ,CAASwJ,EAAT,CAAJ;AACA9J,EAAAA,CAAC,GAAGkB,CAAC,CAAClB,CAAF,GAAM0I,YAAY,CAACzH,EAAD,CAAZ,GAAmBtB,CAAC,CAACK,CAArB,GAAyB,CAAnC;AACAK,EAAAA,CAAC,GAAGL,CAAC,GAAGd,QAAR;AACAgC,EAAAA,CAAC,CAACA,CAAF,CAAI,CAAJ,IAASvC,OAAO,CAAC,EAAD,EAAK0B,CAAC,GAAG,CAAJ,GAAQnB,QAAQ,GAAGmB,CAAnB,GAAuBA,CAA5B,CAAhB;;AAEA,MAAIuJ,IAAI,IAAI,IAAZ,EAAkB;AAEhB;AACAA,IAAAA,IAAI,GAAG5J,CAAC,GAAG,CAAJ,GAAQkB,CAAR,GAAY+I,EAAnB;AACD,GAJD,MAIO;AACLjI,IAAAA,CAAC,GAAG,IAAI1B,IAAJ,CAASsJ,IAAT,CAAJ;AACA,QAAI,CAAC5H,CAAC,CAACqE,KAAF,EAAD,IAAcrE,CAAC,CAAC2E,EAAF,CAAKsD,EAAL,CAAlB,EAA4B,MAAMxJ,KAAK,CAACrC,eAAe,GAAG4D,CAAnB,CAAX;AAC5B4H,IAAAA,IAAI,GAAG5H,CAAC,CAACxB,EAAF,CAAKU,CAAL,IAAWlB,CAAC,GAAG,CAAJ,GAAQkB,CAAR,GAAY+I,EAAvB,GAA6BjI,CAApC;AACD;;AAED9D,EAAAA,QAAQ,GAAG,KAAX;AACA8D,EAAAA,CAAC,GAAG,IAAI1B,IAAJ,CAASkC,cAAc,CAACvB,EAAD,CAAvB,CAAJ;AACAO,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACA8C,EAAAA,IAAI,CAAC9C,SAAL,GAAiBwC,CAAC,GAAGiB,EAAE,CAAC5B,MAAH,GAAYH,QAAZ,GAAuB,CAA5C;;AAEA,WAAU;AACRgJ,IAAAA,CAAC,GAAGnF,MAAM,CAACf,CAAD,EAAId,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAV;AACA6I,IAAAA,EAAE,GAAGF,EAAE,CAAC/G,IAAH,CAAQoF,CAAC,CAACrF,KAAF,CAAQiH,EAAR,CAAR,CAAL;AACA,QAAIC,EAAE,CAACrJ,GAAH,CAAOkJ,IAAP,KAAgB,CAApB,EAAuB;AACvBC,IAAAA,EAAE,GAAGC,EAAL;AACAA,IAAAA,EAAE,GAAGC,EAAL;AACAA,IAAAA,EAAE,GAAGE,EAAL;AACAA,IAAAA,EAAE,GAAGD,EAAE,CAAClH,IAAH,CAAQoF,CAAC,CAACrF,KAAF,CAAQkH,EAAR,CAAR,CAAL;AACAC,IAAAA,EAAE,GAAGD,EAAL;AACAA,IAAAA,EAAE,GAAG7I,CAAL;AACAA,IAAAA,CAAC,GAAGc,CAAC,CAACqC,KAAF,CAAQ6D,CAAC,CAACrF,KAAF,CAAQkH,EAAR,CAAR,CAAJ;AACA/H,IAAAA,CAAC,GAAG+H,EAAJ;AACD;;AAEDA,EAAAA,EAAE,GAAGhH,MAAM,CAAC6G,IAAI,CAACvF,KAAL,CAAWwF,EAAX,CAAD,EAAiBC,EAAjB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAX;AACAE,EAAAA,EAAE,GAAGA,EAAE,CAAClH,IAAH,CAAQiH,EAAE,CAAClH,KAAH,CAASoH,EAAT,CAAR,CAAL;AACAJ,EAAAA,EAAE,GAAGA,EAAE,CAAC/G,IAAH,CAAQiH,EAAE,CAAClH,KAAH,CAASiH,EAAT,CAAR,CAAL;AACAE,EAAAA,EAAE,CAACnK,CAAH,GAAOoK,EAAE,CAACpK,CAAH,GAAOF,CAAC,CAACE,CAAhB,CAhD6B,CAkD7B;;AACAoC,EAAAA,CAAC,GAAGc,MAAM,CAACkH,EAAD,EAAKH,EAAL,EAAS9J,CAAT,EAAY,CAAZ,CAAN,CAAqBqE,KAArB,CAA2B1E,CAA3B,EAA8BD,GAA9B,GAAoCgB,GAApC,CAAwCqC,MAAM,CAACiH,EAAD,EAAKH,EAAL,EAAS7J,CAAT,EAAY,CAAZ,CAAN,CAAqBqE,KAArB,CAA2B1E,CAA3B,EAA8BD,GAA9B,EAAxC,IAA+E,CAA/E,GACE,CAACuK,EAAD,EAAKH,EAAL,CADF,GACa,CAACE,EAAD,EAAKH,EAAL,CADjB;AAGAvJ,EAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACAtD,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO+D,CAAP;AACD,CA1DD;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1C,CAAC,CAAC2K,aAAF,GAAkB3K,CAAC,CAAC4K,KAAF,GAAU,UAAUzI,EAAV,EAAcD,EAAd,EAAkB;AAC5C,SAAO2H,cAAc,CAAC,IAAD,EAAO,EAAP,EAAW1H,EAAX,EAAeD,EAAf,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAAC6K,SAAF,GAAc,UAAUxJ,CAAV,EAAaa,EAAb,EAAiB;AAC7B,MAAI9B,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;AAGAD,EAAAA,CAAC,GAAG,IAAIW,IAAJ,CAASX,CAAT,CAAJ;;AAEA,MAAIiB,CAAC,IAAI,IAAT,EAAe;AAEb;AACA,QAAI,CAACjB,CAAC,CAACuB,CAAP,EAAU,OAAOvB,CAAP;AAEViB,IAAAA,CAAC,GAAG,IAAIN,IAAJ,CAAS,CAAT,CAAJ;AACAmB,IAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACD,GAPD,MAOO;AACLmD,IAAAA,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAT,CAAJ;;AACA,QAAIa,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjBA,MAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACD,KAFD,MAEO;AACL8L,MAAAA,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AACD,KANI,CAQL;;;AACA,QAAI,CAAC9B,CAAC,CAACuB,CAAP,EAAU,OAAON,CAAC,CAACf,CAAF,GAAMF,CAAN,GAAUiB,CAAjB,CATL,CAWL;;AACA,QAAI,CAACA,CAAC,CAACM,CAAP,EAAU;AACR,UAAIN,CAAC,CAACf,CAAN,EAASe,CAAC,CAACf,CAAF,GAAMF,CAAC,CAACE,CAAR;AACT,aAAOe,CAAP;AACD;AACF,GA7B4B,CA+B7B;;;AACA,MAAIA,CAAC,CAACM,CAAF,CAAI,CAAJ,CAAJ,EAAY;AACVhD,IAAAA,QAAQ,GAAG,KAAX;AACAyB,IAAAA,CAAC,GAAGoD,MAAM,CAACpD,CAAD,EAAIiB,CAAJ,EAAO,CAAP,EAAUa,EAAV,EAAc,CAAd,CAAN,CAAuBoB,KAAvB,CAA6BjC,CAA7B,CAAJ;AACA1C,IAAAA,QAAQ,GAAG,IAAX;AACA4B,IAAAA,QAAQ,CAACH,CAAD,CAAR,CAJU,CAMZ;AACC,GAPD,MAOO;AACLiB,IAAAA,CAAC,CAACf,CAAF,GAAMF,CAAC,CAACE,CAAR;AACAF,IAAAA,CAAC,GAAGiB,CAAJ;AACD;;AAED,SAAOjB,CAAP;AACD,CA7CD;AAgDA;AACA;AACA;AACA;AACA;;;AACAJ,CAAC,CAAC8K,QAAF,GAAa,YAAY;AACvB,SAAO,CAAC,IAAR;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9K,CAAC,CAAC+K,OAAF,GAAY,UAAU5I,EAAV,EAAcD,EAAd,EAAkB;AAC5B,SAAO2H,cAAc,CAAC,IAAD,EAAO,CAAP,EAAU1H,EAAV,EAAcD,EAAd,CAArB;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACgL,OAAF,GAAYhL,CAAC,CAACX,GAAF,GAAQ,UAAUgC,CAAV,EAAa;AAC/B,MAAIZ,CAAJ;AAAA,MAAOK,CAAP;AAAA,MAAUmB,EAAV;AAAA,MAAcS,CAAd;AAAA,MAAiBR,EAAjB;AAAA,MAAqB5B,CAArB;AAAA,MACEF,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;AAAA,MAGE4K,EAAE,GAAG,EAAE5J,CAAC,GAAG,IAAIN,IAAJ,CAASM,CAAT,CAAN,CAHP,CAD+B,CAM/B;;AACA,MAAI,CAACjB,CAAC,CAACuB,CAAH,IAAQ,CAACN,CAAC,CAACM,CAAX,IAAgB,CAACvB,CAAC,CAACuB,CAAF,CAAI,CAAJ,CAAjB,IAA2B,CAACN,CAAC,CAACM,CAAF,CAAI,CAAJ,CAAhC,EAAwC,OAAO,IAAIZ,IAAJ,CAAS3B,OAAO,CAAC,CAACgB,CAAF,EAAK6K,EAAL,CAAhB,CAAP;AAExC7K,EAAAA,CAAC,GAAG,IAAIW,IAAJ,CAASX,CAAT,CAAJ;AAEA,MAAIA,CAAC,CAACqD,EAAF,CAAK,CAAL,CAAJ,EAAa,OAAOrD,CAAP;AAEb6B,EAAAA,EAAE,GAAGlB,IAAI,CAAC9C,SAAV;AACAiE,EAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AAEA,MAAImD,CAAC,CAACoC,EAAF,CAAK,CAAL,CAAJ,EAAa,OAAOlD,QAAQ,CAACH,CAAD,EAAI6B,EAAJ,EAAQC,EAAR,CAAf,CAhBkB,CAkB/B;;AACAzB,EAAAA,CAAC,GAAGxB,SAAS,CAACoC,CAAC,CAACZ,CAAF,GAAMd,QAAP,CAAb,CAnB+B,CAqB/B;;AACA,MAAIc,CAAC,IAAIY,CAAC,CAACM,CAAF,CAAI7B,MAAJ,GAAa,CAAlB,IAAuB,CAACgB,CAAC,GAAGmK,EAAE,GAAG,CAAL,GAAS,CAACA,EAAV,GAAeA,EAApB,KAA2BrL,gBAAtD,EAAwE;AACtE8C,IAAAA,CAAC,GAAGwI,MAAM,CAACnK,IAAD,EAAOX,CAAP,EAAUU,CAAV,EAAamB,EAAb,CAAV;AACA,WAAOZ,CAAC,CAACf,CAAF,GAAM,CAAN,GAAU,IAAIS,IAAJ,CAAS,CAAT,EAAYgD,GAAZ,CAAgBrB,CAAhB,CAAV,GAA+BnC,QAAQ,CAACmC,CAAD,EAAIT,EAAJ,EAAQC,EAAR,CAA9C;AACD;;AAED5B,EAAAA,CAAC,GAAGF,CAAC,CAACE,CAAN,CA3B+B,CA6B/B;;AACA,MAAIA,CAAC,GAAG,CAAR,EAAW;AAET;AACA,QAAIG,CAAC,GAAGY,CAAC,CAACM,CAAF,CAAI7B,MAAJ,GAAa,CAArB,EAAwB,OAAO,IAAIiB,IAAJ,CAASC,GAAT,CAAP,CAHf,CAKT;;AACA,QAAI,CAACK,CAAC,CAACM,CAAF,CAAIlB,CAAJ,IAAS,CAAV,KAAgB,CAApB,EAAuBH,CAAC,GAAG,CAAJ,CANd,CAQT;;AACA,QAAIF,CAAC,CAACK,CAAF,IAAO,CAAP,IAAYL,CAAC,CAACuB,CAAF,CAAI,CAAJ,KAAU,CAAtB,IAA2BvB,CAAC,CAACuB,CAAF,CAAI7B,MAAJ,IAAc,CAA7C,EAAgD;AAC9CM,MAAAA,CAAC,CAACE,CAAF,GAAMA,CAAN;AACA,aAAOF,CAAP;AACD;AACF,GA3C8B,CA6C/B;AACA;AACA;AACA;;;AACAU,EAAAA,CAAC,GAAG1B,OAAO,CAAC,CAACgB,CAAF,EAAK6K,EAAL,CAAX;AACAxK,EAAAA,CAAC,GAAGK,CAAC,IAAI,CAAL,IAAU,CAACiC,QAAQ,CAACjC,CAAD,CAAnB,GACA7B,SAAS,CAACgM,EAAE,IAAI/L,IAAI,CAACqI,GAAL,CAAS,OAAOtE,cAAc,CAAC7C,CAAC,CAACuB,CAAH,CAA9B,IAAuCzC,IAAI,CAACpB,IAA5C,GAAmDsC,CAAC,CAACK,CAArD,GAAyD,CAA7D,CAAH,CADT,GAEA,IAAIM,IAAJ,CAASD,CAAC,GAAG,EAAb,EAAiBL,CAFrB,CAlD+B,CAsD/B;AAEA;;AACA,MAAIA,CAAC,GAAGM,IAAI,CAACxC,IAAL,GAAY,CAAhB,IAAqBkC,CAAC,GAAGM,IAAI,CAACzC,IAAL,GAAY,CAAzC,EAA4C,OAAO,IAAIyC,IAAJ,CAASN,CAAC,GAAG,CAAJ,GAAQH,CAAC,GAAG,CAAZ,GAAgB,CAAzB,CAAP;AAE5C3B,EAAAA,QAAQ,GAAG,KAAX;AACAoC,EAAAA,IAAI,CAAC7C,QAAL,GAAgBkC,CAAC,CAACE,CAAF,GAAM,CAAtB,CA5D+B,CA8D/B;AACA;AACA;AACA;;AACAQ,EAAAA,CAAC,GAAG5B,IAAI,CAAC0B,GAAL,CAAS,EAAT,EAAa,CAACH,CAAC,GAAG,EAAL,EAASX,MAAtB,CAAJ,CAlE+B,CAoE/B;;AACA4C,EAAAA,CAAC,GAAGkG,kBAAkB,CAACvH,CAAC,CAACiC,KAAF,CAAQyE,gBAAgB,CAAC3H,CAAD,EAAI6B,EAAE,GAAGnB,CAAT,CAAxB,CAAD,EAAuCmB,EAAvC,CAAtB,CArE+B,CAuE/B;;AACA,MAAIS,CAAC,CAACf,CAAN,EAAS;AAEP;AACAe,IAAAA,CAAC,GAAGnC,QAAQ,CAACmC,CAAD,EAAIT,EAAE,GAAG,CAAT,EAAY,CAAZ,CAAZ,CAHO,CAKP;AACA;;AACA,QAAIgG,mBAAmB,CAACvF,CAAC,CAACf,CAAH,EAAMM,EAAN,EAAUC,EAAV,CAAvB,EAAsC;AACpCzB,MAAAA,CAAC,GAAGwB,EAAE,GAAG,EAAT,CADoC,CAGpC;;AACAS,MAAAA,CAAC,GAAGnC,QAAQ,CAACqI,kBAAkB,CAACvH,CAAC,CAACiC,KAAF,CAAQyE,gBAAgB,CAAC3H,CAAD,EAAIK,CAAC,GAAGK,CAAR,CAAxB,CAAD,EAAsCL,CAAtC,CAAnB,EAA6DA,CAAC,GAAG,CAAjE,EAAoE,CAApE,CAAZ,CAJoC,CAMpC;;AACA,UAAI,CAACwC,cAAc,CAACP,CAAC,CAACf,CAAH,CAAd,CAAoBwB,KAApB,CAA0BlB,EAAE,GAAG,CAA/B,EAAkCA,EAAE,GAAG,EAAvC,CAAD,GAA8C,CAA9C,IAAmD,IAAvD,EAA6D;AAC3DS,QAAAA,CAAC,GAAGnC,QAAQ,CAACmC,CAAD,EAAIT,EAAE,GAAG,CAAT,EAAY,CAAZ,CAAZ;AACD;AACF;AACF;;AAEDS,EAAAA,CAAC,CAACpC,CAAF,GAAMA,CAAN;AACA3B,EAAAA,QAAQ,GAAG,IAAX;AACAoC,EAAAA,IAAI,CAAC7C,QAAL,GAAgBgE,EAAhB;AAEA,SAAO3B,QAAQ,CAACmC,CAAD,EAAIT,EAAJ,EAAQC,EAAR,CAAf;AACD,CAjGD;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACmL,WAAF,GAAgB,UAAUhJ,EAAV,EAAcD,EAAd,EAAkB;AAChC,MAAI+H,GAAJ;AAAA,MACE7J,CAAC,GAAG,IADN;AAAA,MAEEW,IAAI,GAAGX,CAAC,CAACC,WAFX;;AAIA,MAAI8B,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjB8H,IAAAA,GAAG,GAAGC,cAAc,CAAC9J,CAAD,EAAIA,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC3C,QAAZ,IAAwBgC,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC1C,QAAxC,CAApB;AACD,GAFD,MAEO;AACL2L,IAAAA,UAAU,CAAC7H,EAAD,EAAK,CAAL,EAAQvE,UAAR,CAAV;AAEA,QAAIsE,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAAnB,KACK8L,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AAEL9B,IAAAA,CAAC,GAAGG,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAc+B,EAAd,EAAkBD,EAAlB,CAAZ;AACA+H,IAAAA,GAAG,GAAGC,cAAc,CAAC9J,CAAD,EAAI+B,EAAE,IAAI/B,CAAC,CAACK,CAAR,IAAaL,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC3C,QAA7B,EAAuC+D,EAAvC,CAApB;AACD;;AAED,SAAO/B,CAAC,CAACuF,KAAF,MAAa,CAACvF,CAAC,CAAC4C,MAAF,EAAd,GAA2B,MAAMiH,GAAjC,GAAuCA,GAA9C;AACD,CAlBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjK,CAAC,CAACoL,mBAAF,GAAwBpL,CAAC,CAACqL,IAAF,GAAS,UAAUlJ,EAAV,EAAcD,EAAd,EAAkB;AACjD,MAAI9B,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;;AAGA,MAAI8B,EAAE,KAAK,KAAK,CAAhB,EAAmB;AACjBA,IAAAA,EAAE,GAAGpB,IAAI,CAAC9C,SAAV;AACAiE,IAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACD,GAHD,MAGO;AACL8L,IAAAA,UAAU,CAAC7H,EAAD,EAAK,CAAL,EAAQvE,UAAR,CAAV;AAEA,QAAIsE,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAAnB,KACK8L,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AACN;;AAED,SAAO3B,QAAQ,CAAC,IAAIQ,IAAJ,CAASX,CAAT,CAAD,EAAc+B,EAAd,EAAkBD,EAAlB,CAAf;AACD,CAfD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlC,CAAC,CAACqD,QAAF,GAAa,YAAY;AACvB,MAAIjD,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;AAAA,MAEE4J,GAAG,GAAGC,cAAc,CAAC9J,CAAD,EAAIA,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC3C,QAAZ,IAAwBgC,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC1C,QAAxC,CAFtB;AAIA,SAAO+B,CAAC,CAACuF,KAAF,MAAa,CAACvF,CAAC,CAAC4C,MAAF,EAAd,GAA2B,MAAMiH,GAAjC,GAAuCA,GAA9C;AACD,CAND;AASA;AACA;AACA;AACA;;;AACAjK,CAAC,CAACsL,SAAF,GAActL,CAAC,CAACuL,KAAF,GAAU,YAAY;AAClC,SAAOhL,QAAQ,CAAC,IAAI,KAAKF,WAAT,CAAqB,IAArB,CAAD,EAA6B,KAAKI,CAAL,GAAS,CAAtC,EAAyC,CAAzC,CAAf;AACD,CAFD;AAKA;AACA;AACA;AACA;AACA;;;AACAT,CAAC,CAACwL,OAAF,GAAYxL,CAAC,CAACyL,MAAF,GAAW,YAAY;AACjC,MAAIrL,CAAC,GAAG,IAAR;AAAA,MACEW,IAAI,GAAGX,CAAC,CAACC,WADX;AAAA,MAEE4J,GAAG,GAAGC,cAAc,CAAC9J,CAAD,EAAIA,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC3C,QAAZ,IAAwBgC,CAAC,CAACK,CAAF,IAAOM,IAAI,CAAC1C,QAAxC,CAFtB;AAIA,SAAO+B,CAAC,CAACuF,KAAF,KAAY,MAAMsE,GAAlB,GAAwBA,GAA/B;AACD,CAND,C,CASA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAShH,cAAT,CAAwBtB,CAAxB,EAA2B;AACzB,MAAIL,CAAJ;AAAA,MAAOR,CAAP;AAAA,MAAU4K,EAAV;AAAA,MACEC,eAAe,GAAGhK,CAAC,CAAC7B,MAAF,GAAW,CAD/B;AAAA,MAEEmK,GAAG,GAAG,EAFR;AAAA,MAGEpG,CAAC,GAAGlC,CAAC,CAAC,CAAD,CAHP;;AAKA,MAAIgK,eAAe,GAAG,CAAtB,EAAyB;AACvB1B,IAAAA,GAAG,IAAIpG,CAAP;;AACA,SAAKvC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGqK,eAAhB,EAAiCrK,CAAC,EAAlC,EAAsC;AACpCoK,MAAAA,EAAE,GAAG/J,CAAC,CAACL,CAAD,CAAD,GAAO,EAAZ;AACAR,MAAAA,CAAC,GAAGnB,QAAQ,GAAG+L,EAAE,CAAC5L,MAAlB;AACA,UAAIgB,CAAJ,EAAOmJ,GAAG,IAAI2B,aAAa,CAAC9K,CAAD,CAApB;AACPmJ,MAAAA,GAAG,IAAIyB,EAAP;AACD;;AAED7H,IAAAA,CAAC,GAAGlC,CAAC,CAACL,CAAD,CAAL;AACAoK,IAAAA,EAAE,GAAG7H,CAAC,GAAG,EAAT;AACA/C,IAAAA,CAAC,GAAGnB,QAAQ,GAAG+L,EAAE,CAAC5L,MAAlB;AACA,QAAIgB,CAAJ,EAAOmJ,GAAG,IAAI2B,aAAa,CAAC9K,CAAD,CAApB;AACR,GAbD,MAaO,IAAI+C,CAAC,KAAK,CAAV,EAAa;AAClB,WAAO,GAAP;AACD,GArBwB,CAuBzB;;;AACA,SAAOA,CAAC,GAAG,EAAJ,KAAW,CAAlB,GAAsBA,CAAC,IAAI,EAAL;;AAEtB,SAAOoG,GAAG,GAAGpG,CAAb;AACD;;AAGD,SAASmG,UAAT,CAAoB1I,CAApB,EAAuBV,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAIS,CAAC,KAAK,CAAC,CAACA,CAAR,IAAaA,CAAC,GAAGV,GAAjB,IAAwBU,CAAC,GAAGT,GAAhC,EAAqC;AACnC,UAAMK,KAAK,CAACrC,eAAe,GAAGyC,CAAnB,CAAX;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAAS2G,mBAAT,CAA6BtG,CAA7B,EAAgCL,CAAhC,EAAmCY,EAAnC,EAAuC2J,SAAvC,EAAkD;AAChD,MAAIC,EAAJ,EAAQhL,CAAR,EAAW4B,CAAX,EAAcqJ,EAAd,CADgD,CAGhD;;AACA,OAAKjL,CAAC,GAAGa,CAAC,CAAC,CAAD,CAAV,EAAeb,CAAC,IAAI,EAApB,EAAwBA,CAAC,IAAI,EAA7B,EAAiC,EAAEQ,CAAF,CAJe,CAMhD;;;AACA,MAAI,EAAEA,CAAF,GAAM,CAAV,EAAa;AACXA,IAAAA,CAAC,IAAI3B,QAAL;AACAmM,IAAAA,EAAE,GAAG,CAAL;AACD,GAHD,MAGO;AACLA,IAAAA,EAAE,GAAG5M,IAAI,CAACsB,IAAL,CAAU,CAACc,CAAC,GAAG,CAAL,IAAU3B,QAApB,CAAL;AACA2B,IAAAA,CAAC,IAAI3B,QAAL;AACD,GAb+C,CAehD;AACA;AACA;;;AACAmB,EAAAA,CAAC,GAAG1B,OAAO,CAAC,EAAD,EAAKO,QAAQ,GAAG2B,CAAhB,CAAX;AACAyK,EAAAA,EAAE,GAAGpK,CAAC,CAACmK,EAAD,CAAD,GAAQhL,CAAR,GAAY,CAAjB;;AAEA,MAAI+K,SAAS,IAAI,IAAjB,EAAuB;AACrB,QAAIvK,CAAC,GAAG,CAAR,EAAW;AACT,UAAIA,CAAC,IAAI,CAAT,EAAYyK,EAAE,GAAGA,EAAE,GAAG,GAAL,GAAW,CAAhB,CAAZ,KACK,IAAIzK,CAAC,IAAI,CAAT,EAAYyK,EAAE,GAAGA,EAAE,GAAG,EAAL,GAAU,CAAf;AACjBrJ,MAAAA,CAAC,GAAGR,EAAE,GAAG,CAAL,IAAU6J,EAAE,IAAI,KAAhB,IAAyB7J,EAAE,GAAG,CAAL,IAAU6J,EAAE,IAAI,KAAzC,IAAkDA,EAAE,IAAI,KAAxD,IAAiEA,EAAE,IAAI,CAA3E;AACD,KAJD,MAIO;AACLrJ,MAAAA,CAAC,GAAG,CAACR,EAAE,GAAG,CAAL,IAAU6J,EAAE,GAAG,CAAL,IAAUjL,CAApB,IAAyBoB,EAAE,GAAG,CAAL,IAAU6J,EAAE,GAAG,CAAL,IAAUjL,CAAC,GAAG,CAAlD,KACF,CAACa,CAAC,CAACmK,EAAE,GAAG,CAAN,CAAD,GAAYhL,CAAZ,GAAgB,GAAhB,GAAsB,CAAvB,KAA6B1B,OAAO,CAAC,EAAD,EAAKkC,CAAC,GAAG,CAAT,CAAP,GAAqB,CADhD,IAEA,CAACyK,EAAE,IAAIjL,CAAC,GAAG,CAAV,IAAeiL,EAAE,IAAI,CAAtB,KAA4B,CAACpK,CAAC,CAACmK,EAAE,GAAG,CAAN,CAAD,GAAYhL,CAAZ,GAAgB,GAAhB,GAAsB,CAAvB,KAA6B,CAF7D;AAGD;AACF,GAVD,MAUO;AACL,QAAIQ,CAAC,GAAG,CAAR,EAAW;AACT,UAAIA,CAAC,IAAI,CAAT,EAAYyK,EAAE,GAAGA,EAAE,GAAG,IAAL,GAAY,CAAjB,CAAZ,KACK,IAAIzK,CAAC,IAAI,CAAT,EAAYyK,EAAE,GAAGA,EAAE,GAAG,GAAL,GAAW,CAAhB,CAAZ,KACA,IAAIzK,CAAC,IAAI,CAAT,EAAYyK,EAAE,GAAGA,EAAE,GAAG,EAAL,GAAU,CAAf;AACjBrJ,MAAAA,CAAC,GAAG,CAACmJ,SAAS,IAAI3J,EAAE,GAAG,CAAnB,KAAyB6J,EAAE,IAAI,IAA/B,IAAuC,CAACF,SAAD,IAAc3J,EAAE,GAAG,CAAnB,IAAwB6J,EAAE,IAAI,IAAzE;AACD,KALD,MAKO;AACLrJ,MAAAA,CAAC,GAAG,CAAC,CAACmJ,SAAS,IAAI3J,EAAE,GAAG,CAAnB,KAAyB6J,EAAE,GAAG,CAAL,IAAUjL,CAAnC,IACJ,CAAC+K,SAAD,IAAc3J,EAAE,GAAG,CAApB,IAA0B6J,EAAE,GAAG,CAAL,IAAUjL,CAAC,GAAG,CADpC,KAEF,CAACa,CAAC,CAACmK,EAAE,GAAG,CAAN,CAAD,GAAYhL,CAAZ,GAAgB,IAAhB,GAAuB,CAAxB,KAA8B1B,OAAO,CAAC,EAAD,EAAKkC,CAAC,GAAG,CAAT,CAAP,GAAqB,CAFrD;AAGD;AACF;;AAED,SAAOoB,CAAP;AACD,C,CAGD;AACA;AACA;;;AACA,SAASsJ,WAAT,CAAqB/B,GAArB,EAA0BgC,MAA1B,EAAkCC,OAAlC,EAA2C;AACzC,MAAI3K,CAAJ;AAAA,MACE4K,GAAG,GAAG,CAAC,CAAD,CADR;AAAA,MAEEC,IAFF;AAAA,MAGE9K,CAAC,GAAG,CAHN;AAAA,MAIE+K,IAAI,GAAGpC,GAAG,CAACnK,MAJb;;AAMA,SAAOwB,CAAC,GAAG+K,IAAX,GAAkB;AAChB,SAAKD,IAAI,GAAGD,GAAG,CAACrM,MAAhB,EAAwBsM,IAAI,EAA5B,GAAiCD,GAAG,CAACC,IAAD,CAAH,IAAaH,MAAb;;AACjCE,IAAAA,GAAG,CAAC,CAAD,CAAH,IAAUtO,QAAQ,CAACuF,OAAT,CAAiB6G,GAAG,CAACvG,MAAJ,CAAWpC,CAAC,EAAZ,CAAjB,CAAV;;AACA,SAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4K,GAAG,CAACrM,MAApB,EAA4ByB,CAAC,EAA7B,EAAiC;AAC/B,UAAI4K,GAAG,CAAC5K,CAAD,CAAH,GAAS2K,OAAO,GAAG,CAAvB,EAA0B;AACxB,YAAIC,GAAG,CAAC5K,CAAC,GAAG,CAAL,CAAH,KAAe,KAAK,CAAxB,EAA2B4K,GAAG,CAAC5K,CAAC,GAAG,CAAL,CAAH,GAAa,CAAb;AAC3B4K,QAAAA,GAAG,CAAC5K,CAAC,GAAG,CAAL,CAAH,IAAc4K,GAAG,CAAC5K,CAAD,CAAH,GAAS2K,OAAT,GAAmB,CAAjC;AACAC,QAAAA,GAAG,CAAC5K,CAAD,CAAH,IAAU2K,OAAV;AACD;AACF;AACF;;AAED,SAAOC,GAAG,CAAC9D,OAAJ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAAStG,MAAT,CAAgBhB,IAAhB,EAAsBX,CAAtB,EAAyB;AACvB,MAAIU,CAAJ,EAAO0D,GAAP,EAAYnD,CAAZ;AAEA,MAAIjB,CAAC,CAAC4C,MAAF,EAAJ,EAAgB,OAAO5C,CAAP,CAHO,CAKvB;AACA;AAEA;;AACAoE,EAAAA,GAAG,GAAGpE,CAAC,CAACuB,CAAF,CAAI7B,MAAV;;AACA,MAAI0E,GAAG,GAAG,EAAV,EAAc;AACZ1D,IAAAA,CAAC,GAAG5B,IAAI,CAACsB,IAAL,CAAUgE,GAAG,GAAG,CAAhB,CAAJ;AACAnD,IAAAA,CAAC,GAAG,CAAC,IAAIqD,OAAO,CAAC,CAAD,EAAI5D,CAAJ,CAAZ,EAAoBuC,QAApB,EAAJ;AACD,GAHD,MAGO;AACLvC,IAAAA,CAAC,GAAG,EAAJ;AACAO,IAAAA,CAAC,GAAG,8BAAJ;AACD;;AAEDN,EAAAA,IAAI,CAAC9C,SAAL,IAAkB6C,CAAlB;AAEAV,EAAAA,CAAC,GAAGuE,YAAY,CAAC5D,IAAD,EAAO,CAAP,EAAUX,CAAC,CAACkD,KAAF,CAAQjC,CAAR,CAAV,EAAsB,IAAIN,IAAJ,CAAS,CAAT,CAAtB,CAAhB,CApBuB,CAsBvB;;AACA,OAAK,IAAIO,CAAC,GAAGR,CAAb,EAAgBQ,CAAC,EAAjB,GAAsB;AACpB,QAAIgL,KAAK,GAAGlM,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAZ;AACAA,IAAAA,CAAC,GAAGkM,KAAK,CAAChJ,KAAN,CAAYgJ,KAAZ,EAAmBxH,KAAnB,CAAyBwH,KAAzB,EAAgChJ,KAAhC,CAAsC,CAAtC,EAAyCC,IAAzC,CAA8C,CAA9C,CAAJ;AACD;;AAEDxC,EAAAA,IAAI,CAAC9C,SAAL,IAAkB6C,CAAlB;AAEA,SAAOV,CAAP;AACD;AAGD;AACA;AACA;;;AACA,IAAIoD,MAAM,GAAI,YAAY;AAExB;AACA,WAAS+I,eAAT,CAAyBnM,CAAzB,EAA4BU,CAA5B,EAA+B0G,IAA/B,EAAqC;AACnC,QAAIgF,IAAJ;AAAA,QACExD,KAAK,GAAG,CADV;AAAA,QAEE1H,CAAC,GAAGlB,CAAC,CAACN,MAFR;;AAIA,SAAKM,CAAC,GAAGA,CAAC,CAAC+C,KAAF,EAAT,EAAoB7B,CAAC,EAArB,GAA0B;AACxBkL,MAAAA,IAAI,GAAGpM,CAAC,CAACkB,CAAD,CAAD,GAAOR,CAAP,GAAWkI,KAAlB;AACA5I,MAAAA,CAAC,CAACkB,CAAD,CAAD,GAAOkL,IAAI,GAAGhF,IAAP,GAAc,CAArB;AACAwB,MAAAA,KAAK,GAAGwD,IAAI,GAAGhF,IAAP,GAAc,CAAtB;AACD;;AAED,QAAIwB,KAAJ,EAAW5I,CAAC,CAAC6I,OAAF,CAAUD,KAAV;AAEX,WAAO5I,CAAP;AACD;;AAED,WAASqM,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+B;AAC7B,QAAIvL,CAAJ,EAAOoB,CAAP;;AAEA,QAAIkK,EAAE,IAAIC,EAAV,EAAc;AACZnK,MAAAA,CAAC,GAAGkK,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAAC,CAAnB;AACD,KAFD,MAEO;AACL,WAAKvL,CAAC,GAAGoB,CAAC,GAAG,CAAb,EAAgBpB,CAAC,GAAGsL,EAApB,EAAwBtL,CAAC,EAAzB,EAA6B;AAC3B,YAAIoL,CAAC,CAACpL,CAAD,CAAD,IAAQqL,CAAC,CAACrL,CAAD,CAAb,EAAkB;AAChBoB,UAAAA,CAAC,GAAGgK,CAAC,CAACpL,CAAD,CAAD,GAAOqL,CAAC,CAACrL,CAAD,CAAR,GAAc,CAAd,GAAkB,CAAC,CAAvB;AACA;AACD;AACF;AACF;;AAED,WAAOoB,CAAP;AACD;;AAED,WAASoK,QAAT,CAAkBJ,CAAlB,EAAqBC,CAArB,EAAwBC,EAAxB,EAA4BpF,IAA5B,EAAkC;AAChC,QAAIlG,CAAC,GAAG,CAAR,CADgC,CAGhC;;AACA,WAAOsL,EAAE,EAAT,GAAc;AACZF,MAAAA,CAAC,CAACE,EAAD,CAAD,IAAStL,CAAT;AACAA,MAAAA,CAAC,GAAGoL,CAAC,CAACE,EAAD,CAAD,GAAQD,CAAC,CAACC,EAAD,CAAT,GAAgB,CAAhB,GAAoB,CAAxB;AACAF,MAAAA,CAAC,CAACE,EAAD,CAAD,GAAQtL,CAAC,GAAGkG,IAAJ,GAAWkF,CAAC,CAACE,EAAD,CAAZ,GAAmBD,CAAC,CAACC,EAAD,CAA5B;AACD,KAR+B,CAUhC;;;AACA,WAAO,CAACF,CAAC,CAAC,CAAD,CAAF,IAASA,CAAC,CAAC5M,MAAF,GAAW,CAA3B,GAA+B4M,CAAC,CAAClE,KAAF;AAChC;;AAED,SAAO,UAAUpI,CAAV,EAAaiB,CAAb,EAAgBY,EAAhB,EAAoBC,EAApB,EAAwB0B,EAAxB,EAA4B4D,IAA5B,EAAkC;AACvC,QAAIrG,GAAJ;AAAA,QAASV,CAAT;AAAA,QAAYa,CAAZ;AAAA,QAAeR,CAAf;AAAA,QAAkBiM,OAAlB;AAAA,QAA2BC,IAA3B;AAAA,QAAiCC,IAAjC;AAAA,QAAuCC,KAAvC;AAAA,QAA8CvE,CAA9C;AAAA,QAAiDwE,EAAjD;AAAA,QAAqDC,GAArD;AAAA,QAA0DC,IAA1D;AAAA,QAAgEC,IAAhE;AAAA,QAAsEnL,EAAtE;AAAA,QAA0ES,CAA1E;AAAA,QAA6E2K,EAA7E;AAAA,QAAiFC,EAAjF;AAAA,QAAqFC,GAArF;AAAA,QACEC,EADF;AAAA,QACMC,EADN;AAAA,QAEE5M,IAAI,GAAGX,CAAC,CAACC,WAFX;AAAA,QAGEuN,IAAI,GAAGxN,CAAC,CAACE,CAAF,IAAOe,CAAC,CAACf,CAAT,GAAa,CAAb,GAAiB,CAAC,CAH3B;AAAA,QAIEoB,EAAE,GAAGtB,CAAC,CAACuB,CAJT;AAAA,QAKEC,EAAE,GAAGP,CAAC,CAACM,CALT,CADuC,CAQvC;;AACA,QAAI,CAACD,EAAD,IAAO,CAACA,EAAE,CAAC,CAAD,CAAV,IAAiB,CAACE,EAAlB,IAAwB,CAACA,EAAE,CAAC,CAAD,CAA/B,EAAoC;AAElC,aAAO,IAAIb,IAAJ,EAAS;AACd,OAACX,CAAC,CAACE,CAAH,IAAQ,CAACe,CAAC,CAACf,CAAX,KAAiBoB,EAAE,GAAGE,EAAE,IAAIF,EAAE,CAAC,CAAD,CAAF,IAASE,EAAE,CAAC,CAAD,CAApB,GAA0B,CAACA,EAA9C,IAAoDZ,GAApD,GAEA;AACAU,MAAAA,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAF,IAAS,CAAf,IAAoB,CAACE,EAArB,GAA0BgM,IAAI,GAAG,CAAjC,GAAqCA,IAAI,GAAG,CAJvC,CAAP;AAKD;;AAED,QAAIpG,IAAJ,EAAU;AACRuF,MAAAA,OAAO,GAAG,CAAV;AACAtM,MAAAA,CAAC,GAAGL,CAAC,CAACK,CAAF,GAAMY,CAAC,CAACZ,CAAZ;AACD,KAHD,MAGO;AACL+G,MAAAA,IAAI,GAAG9H,IAAP;AACAqN,MAAAA,OAAO,GAAGpN,QAAV;AACAc,MAAAA,CAAC,GAAGxB,SAAS,CAACmB,CAAC,CAACK,CAAF,GAAMsM,OAAP,CAAT,GAA2B9N,SAAS,CAACoC,CAAC,CAACZ,CAAF,GAAMsM,OAAP,CAAxC;AACD;;AAEDW,IAAAA,EAAE,GAAG9L,EAAE,CAAC9B,MAAR;AACA0N,IAAAA,EAAE,GAAG9L,EAAE,CAAC5B,MAAR;AACA6I,IAAAA,CAAC,GAAG,IAAI5H,IAAJ,CAAS6M,IAAT,CAAJ;AACAT,IAAAA,EAAE,GAAGxE,CAAC,CAAChH,CAAF,GAAM,EAAX,CA9BuC,CAgCvC;AACA;;AACA,SAAKL,CAAC,GAAG,CAAT,EAAYM,EAAE,CAACN,CAAD,CAAF,KAAUI,EAAE,CAACJ,CAAD,CAAF,IAAS,CAAnB,CAAZ,EAAmCA,CAAC,EAApC,CAAuC;;AAEvC,QAAIM,EAAE,CAACN,CAAD,CAAF,IAASI,EAAE,CAACJ,CAAD,CAAF,IAAS,CAAlB,CAAJ,EAA0Bb,CAAC;;AAE3B,QAAIwB,EAAE,IAAI,IAAV,EAAgB;AACdE,MAAAA,EAAE,GAAGF,EAAE,GAAGlB,IAAI,CAAC9C,SAAf;AACAiE,MAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACD,KAHD,MAGO,IAAI0F,EAAJ,EAAQ;AACbzB,MAAAA,EAAE,GAAGF,EAAE,IAAI7B,CAAC,CAACK,CAAF,GAAMY,CAAC,CAACZ,CAAZ,CAAF,GAAmB,CAAxB;AACD,KAFM,MAEA;AACL0B,MAAAA,EAAE,GAAGF,EAAL;AACD;;AAED,QAAIE,EAAE,GAAG,CAAT,EAAY;AACVgL,MAAAA,EAAE,CAAC7E,IAAH,CAAQ,CAAR;AACA0E,MAAAA,IAAI,GAAG,IAAP;AACD,KAHD,MAGO;AAEL;AACA7K,MAAAA,EAAE,GAAGA,EAAE,GAAG4K,OAAL,GAAe,CAAf,GAAmB,CAAxB;AACAzL,MAAAA,CAAC,GAAG,CAAJ,CAJK,CAML;;AACA,UAAIoM,EAAE,IAAI,CAAV,EAAa;AACX5M,QAAAA,CAAC,GAAG,CAAJ;AACAc,QAAAA,EAAE,GAAGA,EAAE,CAAC,CAAD,CAAP;AACAO,QAAAA,EAAE,GAHS,CAKX;;AACA,eAAO,CAACb,CAAC,GAAGkM,EAAJ,IAAU1M,CAAX,KAAiBqB,EAAE,EAA1B,EAA8Bb,CAAC,EAA/B,EAAmC;AACjCsB,UAAAA,CAAC,GAAG9B,CAAC,GAAG0G,IAAJ,IAAY9F,EAAE,CAACJ,CAAD,CAAF,IAAS,CAArB,CAAJ;AACA6L,UAAAA,EAAE,CAAC7L,CAAD,CAAF,GAAQsB,CAAC,GAAGhB,EAAJ,GAAS,CAAjB;AACAd,UAAAA,CAAC,GAAG8B,CAAC,GAAGhB,EAAJ,GAAS,CAAb;AACD;;AAEDoL,QAAAA,IAAI,GAAGlM,CAAC,IAAIQ,CAAC,GAAGkM,EAAhB,CAZW,CAcb;AACC,OAfD,MAeO;AAEL;AACA1M,QAAAA,CAAC,GAAG0G,IAAI,IAAI5F,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,CAAJ,GAAqB,CAAzB;;AAEA,YAAId,CAAC,GAAG,CAAR,EAAW;AACTc,UAAAA,EAAE,GAAG2K,eAAe,CAAC3K,EAAD,EAAKd,CAAL,EAAQ0G,IAAR,CAApB;AACA9F,UAAAA,EAAE,GAAG6K,eAAe,CAAC7K,EAAD,EAAKZ,CAAL,EAAQ0G,IAAR,CAApB;AACAkG,UAAAA,EAAE,GAAG9L,EAAE,CAAC9B,MAAR;AACA0N,UAAAA,EAAE,GAAG9L,EAAE,CAAC5B,MAAR;AACD;;AAEDyN,QAAAA,EAAE,GAAGG,EAAL;AACAN,QAAAA,GAAG,GAAG1L,EAAE,CAACyB,KAAH,CAAS,CAAT,EAAYuK,EAAZ,CAAN;AACAL,QAAAA,IAAI,GAAGD,GAAG,CAACtN,MAAX,CAdK,CAgBL;;AACA,eAAOuN,IAAI,GAAGK,EAAd,GAAmBN,GAAG,CAACC,IAAI,EAAL,CAAH,GAAc,CAAd;;AAEnBM,QAAAA,EAAE,GAAG/L,EAAE,CAACuB,KAAH,EAAL;AACAwK,QAAAA,EAAE,CAAC1E,OAAH,CAAW,CAAX;AACAwE,QAAAA,GAAG,GAAG7L,EAAE,CAAC,CAAD,CAAR;AAEA,YAAIA,EAAE,CAAC,CAAD,CAAF,IAAS4F,IAAI,GAAG,CAApB,EAAuB,EAAEiG,GAAF;;AAEvB,WAAG;AACD3M,UAAAA,CAAC,GAAG,CAAJ,CADC,CAGD;;AACAK,UAAAA,GAAG,GAAGsL,OAAO,CAAC7K,EAAD,EAAKwL,GAAL,EAAUM,EAAV,EAAcL,IAAd,CAAb,CAJC,CAMD;;AACA,cAAIlM,GAAG,GAAG,CAAV,EAAa;AAEX;AACAmM,YAAAA,IAAI,GAAGF,GAAG,CAAC,CAAD,CAAV;AACA,gBAAIM,EAAE,IAAIL,IAAV,EAAgBC,IAAI,GAAGA,IAAI,GAAG9F,IAAP,IAAe4F,GAAG,CAAC,CAAD,CAAH,IAAU,CAAzB,CAAP,CAJL,CAMX;;AACAtM,YAAAA,CAAC,GAAGwM,IAAI,GAAGG,GAAP,GAAa,CAAjB,CAPW,CASX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAI3M,CAAC,GAAG,CAAR,EAAW;AACT,kBAAIA,CAAC,IAAI0G,IAAT,EAAe1G,CAAC,GAAG0G,IAAI,GAAG,CAAX,CADN,CAGT;;AACAyF,cAAAA,IAAI,GAAGV,eAAe,CAAC3K,EAAD,EAAKd,CAAL,EAAQ0G,IAAR,CAAtB;AACA0F,cAAAA,KAAK,GAAGD,IAAI,CAACnN,MAAb;AACAuN,cAAAA,IAAI,GAAGD,GAAG,CAACtN,MAAX,CANS,CAQT;;AACAqB,cAAAA,GAAG,GAAGsL,OAAO,CAACQ,IAAD,EAAOG,GAAP,EAAYF,KAAZ,EAAmBG,IAAnB,CAAb,CATS,CAWT;;AACA,kBAAIlM,GAAG,IAAI,CAAX,EAAc;AACZL,gBAAAA,CAAC,GADW,CAGZ;;AACAgM,gBAAAA,QAAQ,CAACG,IAAD,EAAOS,EAAE,GAAGR,KAAL,GAAaS,EAAb,GAAkB/L,EAAzB,EAA6BsL,KAA7B,EAAoC1F,IAApC,CAAR;AACD;AACF,aAlBD,MAkBO;AAEL;AACA;AACA;AACA,kBAAI1G,CAAC,IAAI,CAAT,EAAYK,GAAG,GAAGL,CAAC,GAAG,CAAV;AACZmM,cAAAA,IAAI,GAAGrL,EAAE,CAACuB,KAAH,EAAP;AACD;;AAED+J,YAAAA,KAAK,GAAGD,IAAI,CAACnN,MAAb;AACA,gBAAIoN,KAAK,GAAGG,IAAZ,EAAkBJ,IAAI,CAAChE,OAAL,CAAa,CAAb,EA7CP,CA+CX;;AACA6D,YAAAA,QAAQ,CAACM,GAAD,EAAMH,IAAN,EAAYI,IAAZ,EAAkB7F,IAAlB,CAAR,CAhDW,CAkDX;;AACA,gBAAIrG,GAAG,IAAI,CAAC,CAAZ,EAAe;AACbkM,cAAAA,IAAI,GAAGD,GAAG,CAACtN,MAAX,CADa,CAGb;;AACAqB,cAAAA,GAAG,GAAGsL,OAAO,CAAC7K,EAAD,EAAKwL,GAAL,EAAUM,EAAV,EAAcL,IAAd,CAAb,CAJa,CAMb;;AACA,kBAAIlM,GAAG,GAAG,CAAV,EAAa;AACXL,gBAAAA,CAAC,GADU,CAGX;;AACAgM,gBAAAA,QAAQ,CAACM,GAAD,EAAMM,EAAE,GAAGL,IAAL,GAAYM,EAAZ,GAAiB/L,EAAvB,EAA2ByL,IAA3B,EAAiC7F,IAAjC,CAAR;AACD;AACF;;AAED6F,YAAAA,IAAI,GAAGD,GAAG,CAACtN,MAAX;AACD,WAnED,MAmEO,IAAIqB,GAAG,KAAK,CAAZ,EAAe;AACpBL,YAAAA,CAAC;AACDsM,YAAAA,GAAG,GAAG,CAAC,CAAD,CAAN;AACD,WA7EA,CA6EI;AAEL;;;AACAD,UAAAA,EAAE,CAAC7L,CAAC,EAAF,CAAF,GAAUR,CAAV,CAhFC,CAkFD;;AACA,cAAIK,GAAG,IAAIiM,GAAG,CAAC,CAAD,CAAd,EAAmB;AACjBA,YAAAA,GAAG,CAACC,IAAI,EAAL,CAAH,GAAc3L,EAAE,CAAC6L,EAAD,CAAF,IAAU,CAAxB;AACD,WAFD,MAEO;AACLH,YAAAA,GAAG,GAAG,CAAC1L,EAAE,CAAC6L,EAAD,CAAH,CAAN;AACAF,YAAAA,IAAI,GAAG,CAAP;AACD;AAEF,SA1FD,QA0FS,CAACE,EAAE,KAAKC,EAAP,IAAaJ,GAAG,CAAC,CAAD,CAAH,KAAW,KAAK,CAA9B,KAAoCjL,EAAE,EA1F/C;;AA4FA6K,QAAAA,IAAI,GAAGI,GAAG,CAAC,CAAD,CAAH,KAAW,KAAK,CAAvB;AACD,OA5II,CA8IL;;;AACA,UAAI,CAACD,EAAE,CAAC,CAAD,CAAP,EAAYA,EAAE,CAAC3E,KAAH;AACb,KAlMsC,CAoMvC;;;AACA,QAAIuE,OAAO,IAAI,CAAf,EAAkB;AAChBpE,MAAAA,CAAC,CAAClI,CAAF,GAAMA,CAAN;AACAhC,MAAAA,OAAO,GAAGuO,IAAV;AACD,KAHD,MAGO;AAEL;AACA,WAAK1L,CAAC,GAAG,CAAJ,EAAOR,CAAC,GAAGqM,EAAE,CAAC,CAAD,CAAlB,EAAuBrM,CAAC,IAAI,EAA5B,EAAgCA,CAAC,IAAI,EAArC,EAAyCQ,CAAC;;AAC1CqH,MAAAA,CAAC,CAAClI,CAAF,GAAMa,CAAC,GAAGb,CAAC,GAAGsM,OAAR,GAAkB,CAAxB;AAEAxM,MAAAA,QAAQ,CAACoI,CAAD,EAAI/E,EAAE,GAAG3B,EAAE,GAAG0G,CAAC,CAAClI,CAAP,GAAW,CAAd,GAAkBwB,EAAxB,EAA4BC,EAA5B,EAAgC8K,IAAhC,CAAR;AACD;;AAED,WAAOrE,CAAP;AACD,GAlND;AAmND,CArQY,EAAb;AAwQA;AACA;AACA;AACA;;;AACC,SAASpI,QAAT,CAAkBH,CAAlB,EAAqB+B,EAArB,EAAyBD,EAAzB,EAA6B2L,WAA7B,EAA0C;AACzC,MAAIC,MAAJ;AAAA,MAAYxM,CAAZ;AAAA,MAAeC,CAAf;AAAA,MAAkBT,CAAlB;AAAA,MAAqBiL,EAArB;AAAA,MAAyBgC,OAAzB;AAAA,MAAkClK,CAAlC;AAAA,MAAqCnC,EAArC;AAAA,MAAyCsM,GAAzC;AAAA,MACEjN,IAAI,GAAGX,CAAC,CAACC,WADX,CADyC,CAIzC;;AACA4N,EAAAA,GAAG,EAAE,IAAI9L,EAAE,IAAI,IAAV,EAAgB;AACnBT,IAAAA,EAAE,GAAGtB,CAAC,CAACuB,CAAP,CADmB,CAGnB;;AACA,QAAI,CAACD,EAAL,EAAS,OAAOtB,CAAP,CAJU,CAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAAK0N,MAAM,GAAG,CAAT,EAAYhN,CAAC,GAAGY,EAAE,CAAC,CAAD,CAAvB,EAA4BZ,CAAC,IAAI,EAAjC,EAAqCA,CAAC,IAAI,EAA1C,EAA8CgN,MAAM;;AACpDxM,IAAAA,CAAC,GAAGa,EAAE,GAAG2L,MAAT,CAhBmB,CAkBnB;;AACA,QAAIxM,CAAC,GAAG,CAAR,EAAW;AACTA,MAAAA,CAAC,IAAI3B,QAAL;AACA4B,MAAAA,CAAC,GAAGY,EAAJ;AACA0B,MAAAA,CAAC,GAAGnC,EAAE,CAACsM,GAAG,GAAG,CAAP,CAAN,CAHS,CAKT;;AACAjC,MAAAA,EAAE,GAAGlI,CAAC,GAAGzE,OAAO,CAAC,EAAD,EAAK0O,MAAM,GAAGvM,CAAT,GAAa,CAAlB,CAAX,GAAkC,EAAlC,GAAuC,CAA5C;AACD,KAPD,MAOO;AACLyM,MAAAA,GAAG,GAAG9O,IAAI,CAACsB,IAAL,CAAU,CAACc,CAAC,GAAG,CAAL,IAAU3B,QAApB,CAAN;AACAmB,MAAAA,CAAC,GAAGY,EAAE,CAAC5B,MAAP;;AACA,UAAIkO,GAAG,IAAIlN,CAAX,EAAc;AACZ,YAAI+M,WAAJ,EAAiB;AAEf;AACA,iBAAO/M,CAAC,MAAMkN,GAAd,GAAoBtM,EAAE,CAAC4G,IAAH,CAAQ,CAAR;;AACpBzE,UAAAA,CAAC,GAAGkI,EAAE,GAAG,CAAT;AACA+B,UAAAA,MAAM,GAAG,CAAT;AACAxM,UAAAA,CAAC,IAAI3B,QAAL;AACA4B,UAAAA,CAAC,GAAGD,CAAC,GAAG3B,QAAJ,GAAe,CAAnB;AACD,SARD,MAQO;AACL,gBAAMsO,GAAN;AACD;AACF,OAZD,MAYO;AACLpK,QAAAA,CAAC,GAAG/C,CAAC,GAAGY,EAAE,CAACsM,GAAD,CAAV,CADK,CAGL;;AACA,aAAKF,MAAM,GAAG,CAAd,EAAiBhN,CAAC,IAAI,EAAtB,EAA0BA,CAAC,IAAI,EAA/B,EAAmCgN,MAAM,GAJpC,CAML;;;AACAxM,QAAAA,CAAC,IAAI3B,QAAL,CAPK,CASL;AACA;;AACA4B,QAAAA,CAAC,GAAGD,CAAC,GAAG3B,QAAJ,GAAemO,MAAnB,CAXK,CAaL;;AACA/B,QAAAA,EAAE,GAAGxK,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYsC,CAAC,GAAGzE,OAAO,CAAC,EAAD,EAAK0O,MAAM,GAAGvM,CAAT,GAAa,CAAlB,CAAX,GAAkC,EAAlC,GAAuC,CAAxD;AACD;AACF,KAzDkB,CA2DnB;;;AACAsM,IAAAA,WAAW,GAAGA,WAAW,IAAI1L,EAAE,GAAG,CAApB,IACZT,EAAE,CAACsM,GAAG,GAAG,CAAP,CAAF,KAAgB,KAAK,CADT,KACezM,CAAC,GAAG,CAAJ,GAAQsC,CAAR,GAAYA,CAAC,GAAGzE,OAAO,CAAC,EAAD,EAAK0O,MAAM,GAAGvM,CAAT,GAAa,CAAlB,CADtC,CAAd,CA5DmB,CA+DnB;AACA;AACA;;AAEAwM,IAAAA,OAAO,GAAG7L,EAAE,GAAG,CAAL,GACN,CAAC6J,EAAE,IAAI8B,WAAP,MAAwB3L,EAAE,IAAI,CAAN,IAAWA,EAAE,KAAK9B,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAnB,CAArC,CADM,GAENyL,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,CAAN,KAAY7J,EAAE,IAAI,CAAN,IAAW2L,WAAX,IAA0B3L,EAAE,IAAI,CAAN,IAEhD;AACC,KAACZ,CAAC,GAAG,CAAJ,GAAQC,CAAC,GAAG,CAAJ,GAAQsC,CAAC,GAAGzE,OAAO,CAAC,EAAD,EAAK0O,MAAM,GAAGvM,CAAd,CAAnB,GAAsC,CAA9C,GAAkDG,EAAE,CAACsM,GAAG,GAAG,CAAP,CAArD,IAAkE,EAAnE,GAAyE,CAHnD,IAIpB9L,EAAE,KAAK9B,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAAnB,CAJM,CAFd;;AAQA,QAAI6B,EAAE,GAAG,CAAL,IAAU,CAACT,EAAE,CAAC,CAAD,CAAjB,EAAsB;AACpBA,MAAAA,EAAE,CAAC5B,MAAH,GAAY,CAAZ;;AACA,UAAIiO,OAAJ,EAAa;AAEX;AACA5L,QAAAA,EAAE,IAAI/B,CAAC,CAACK,CAAF,GAAM,CAAZ,CAHW,CAKX;;AACAiB,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQtC,OAAO,CAAC,EAAD,EAAK,CAACO,QAAQ,GAAGwC,EAAE,GAAGxC,QAAjB,IAA6BA,QAAlC,CAAf;AACAS,QAAAA,CAAC,CAACK,CAAF,GAAM,CAAC0B,EAAD,IAAO,CAAb;AACD,OARD,MAQO;AAEL;AACAT,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQtB,CAAC,CAACK,CAAF,GAAM,CAAd;AACD;;AAED,aAAOL,CAAP;AACD,KA5FkB,CA8FnB;;;AACA,QAAIkB,CAAC,IAAI,CAAT,EAAY;AACVI,MAAAA,EAAE,CAAC5B,MAAH,GAAYkO,GAAZ;AACAlN,MAAAA,CAAC,GAAG,CAAJ;AACAkN,MAAAA,GAAG;AACJ,KAJD,MAIO;AACLtM,MAAAA,EAAE,CAAC5B,MAAH,GAAYkO,GAAG,GAAG,CAAlB;AACAlN,MAAAA,CAAC,GAAG1B,OAAO,CAAC,EAAD,EAAKO,QAAQ,GAAG2B,CAAhB,CAAX,CAFK,CAIL;AACA;;AACAI,MAAAA,EAAE,CAACsM,GAAD,CAAF,GAAUzM,CAAC,GAAG,CAAJ,GAAQ,CAACsC,CAAC,GAAGzE,OAAO,CAAC,EAAD,EAAK0O,MAAM,GAAGvM,CAAd,CAAX,GAA8BnC,OAAO,CAAC,EAAD,EAAKmC,CAAL,CAArC,GAA+C,CAAhD,IAAqDT,CAA7D,GAAiE,CAA3E;AACD;;AAED,QAAIiN,OAAJ,EAAa;AACX,eAAS;AAEP;AACA,YAAIC,GAAG,IAAI,CAAX,EAAc;AAEZ;AACA,eAAK1M,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAlB,EAAuBH,CAAC,IAAI,EAA5B,EAAgCA,CAAC,IAAI,EAArC,EAAyCD,CAAC;;AAC1CC,UAAAA,CAAC,GAAGG,EAAE,CAAC,CAAD,CAAF,IAASZ,CAAb;;AACA,eAAKA,CAAC,GAAG,CAAT,EAAYS,CAAC,IAAI,EAAjB,EAAqBA,CAAC,IAAI,EAA1B,EAA8BT,CAAC,GALnB,CAOZ;;;AACA,cAAIQ,CAAC,IAAIR,CAAT,EAAY;AACVV,YAAAA,CAAC,CAACK,CAAF;AACA,gBAAIiB,EAAE,CAAC,CAAD,CAAF,IAAShC,IAAb,EAAmBgC,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAR;AACpB;;AAED;AACD,SAdD,MAcO;AACLA,UAAAA,EAAE,CAACsM,GAAD,CAAF,IAAWlN,CAAX;AACA,cAAIY,EAAE,CAACsM,GAAD,CAAF,IAAWtO,IAAf,EAAqB;AACrBgC,UAAAA,EAAE,CAACsM,GAAG,EAAJ,CAAF,GAAY,CAAZ;AACAlN,UAAAA,CAAC,GAAG,CAAJ;AACD;AACF;AACF,KArIkB,CAuInB;;;AACA,SAAKQ,CAAC,GAAGI,EAAE,CAAC5B,MAAZ,EAAoB4B,EAAE,CAAC,EAAEJ,CAAH,CAAF,KAAY,CAAhC,GAAoCI,EAAE,CAAC6G,GAAH;AACrC;;AAED,MAAI5J,QAAJ,EAAc;AAEZ;AACA,QAAIyB,CAAC,CAACK,CAAF,GAAMM,IAAI,CAACxC,IAAf,EAAqB;AAEnB;AACA6B,MAAAA,CAAC,CAACuB,CAAF,GAAM,IAAN;AACAvB,MAAAA,CAAC,CAACK,CAAF,GAAMO,GAAN,CAJmB,CAMrB;AACC,KAPD,MAOO,IAAIZ,CAAC,CAACK,CAAF,GAAMM,IAAI,CAACzC,IAAf,EAAqB;AAE1B;AACA8B,MAAAA,CAAC,CAACK,CAAF,GAAM,CAAN;AACAL,MAAAA,CAAC,CAACuB,CAAF,GAAM,CAAC,CAAD,CAAN,CAJ0B,CAK1B;AACD,KAhBW,CAgBV;;AACH;;AAED,SAAOvB,CAAP;AACD;;AAGD,SAAS8J,cAAT,CAAwB9J,CAAxB,EAA2B8N,KAA3B,EAAkC/L,EAAlC,EAAsC;AACpC,MAAI,CAAC/B,CAAC,CAAC2C,QAAF,EAAL,EAAmB,OAAOoL,iBAAiB,CAAC/N,CAAD,CAAxB;AACnB,MAAIU,CAAJ;AAAA,MACEL,CAAC,GAAGL,CAAC,CAACK,CADR;AAAA,MAEEwJ,GAAG,GAAGhH,cAAc,CAAC7C,CAAC,CAACuB,CAAH,CAFtB;AAAA,MAGE6C,GAAG,GAAGyF,GAAG,CAACnK,MAHZ;;AAKA,MAAIoO,KAAJ,EAAW;AACT,QAAI/L,EAAE,IAAI,CAACrB,CAAC,GAAGqB,EAAE,GAAGqC,GAAV,IAAiB,CAA3B,EAA8B;AAC5ByF,MAAAA,GAAG,GAAGA,GAAG,CAACvG,MAAJ,CAAW,CAAX,IAAgB,GAAhB,GAAsBuG,GAAG,CAAC9G,KAAJ,CAAU,CAAV,CAAtB,GAAqCyI,aAAa,CAAC9K,CAAD,CAAxD;AACD,KAFD,MAEO,IAAI0D,GAAG,GAAG,CAAV,EAAa;AAClByF,MAAAA,GAAG,GAAGA,GAAG,CAACvG,MAAJ,CAAW,CAAX,IAAgB,GAAhB,GAAsBuG,GAAG,CAAC9G,KAAJ,CAAU,CAAV,CAA5B;AACD;;AAED8G,IAAAA,GAAG,GAAGA,GAAG,IAAI7J,CAAC,CAACK,CAAF,GAAM,CAAN,GAAU,GAAV,GAAgB,IAApB,CAAH,GAA+BL,CAAC,CAACK,CAAvC;AACD,GARD,MAQO,IAAIA,CAAC,GAAG,CAAR,EAAW;AAChBwJ,IAAAA,GAAG,GAAG,OAAO2B,aAAa,CAAC,CAACnL,CAAD,GAAK,CAAN,CAApB,GAA+BwJ,GAArC;AACA,QAAI9H,EAAE,IAAI,CAACrB,CAAC,GAAGqB,EAAE,GAAGqC,GAAV,IAAiB,CAA3B,EAA8ByF,GAAG,IAAI2B,aAAa,CAAC9K,CAAD,CAApB;AAC/B,GAHM,MAGA,IAAIL,CAAC,IAAI+D,GAAT,EAAc;AACnByF,IAAAA,GAAG,IAAI2B,aAAa,CAACnL,CAAC,GAAG,CAAJ,GAAQ+D,GAAT,CAApB;AACA,QAAIrC,EAAE,IAAI,CAACrB,CAAC,GAAGqB,EAAE,GAAG1B,CAAL,GAAS,CAAd,IAAmB,CAA7B,EAAgCwJ,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAY2B,aAAa,CAAC9K,CAAD,CAA/B;AACjC,GAHM,MAGA;AACL,QAAI,CAACA,CAAC,GAAGL,CAAC,GAAG,CAAT,IAAc+D,GAAlB,EAAuByF,GAAG,GAAGA,GAAG,CAAC9G,KAAJ,CAAU,CAAV,EAAarC,CAAb,IAAkB,GAAlB,GAAwBmJ,GAAG,CAAC9G,KAAJ,CAAUrC,CAAV,CAA9B;;AACvB,QAAIqB,EAAE,IAAI,CAACrB,CAAC,GAAGqB,EAAE,GAAGqC,GAAV,IAAiB,CAA3B,EAA8B;AAC5B,UAAI/D,CAAC,GAAG,CAAJ,KAAU+D,GAAd,EAAmByF,GAAG,IAAI,GAAP;AACnBA,MAAAA,GAAG,IAAI2B,aAAa,CAAC9K,CAAD,CAApB;AACD;AACF;;AAED,SAAOmJ,GAAP;AACD,C,CAGD;;;AACA,SAASxB,iBAAT,CAA2BqF,MAA3B,EAAmCrN,CAAnC,EAAsC;AACpC,MAAIoD,CAAC,GAAGiK,MAAM,CAAC,CAAD,CAAd,CADoC,CAGpC;;AACA,OAAMrN,CAAC,IAAId,QAAX,EAAqBkE,CAAC,IAAI,EAA1B,EAA8BA,CAAC,IAAI,EAAnC,EAAuCpD,CAAC;;AACxC,SAAOA,CAAP;AACD;;AAGD,SAASuH,OAAT,CAAiBjH,IAAjB,EAAuBoB,EAAvB,EAA2BF,EAA3B,EAA+B;AAC7B,MAAIE,EAAE,GAAGtC,cAAT,EAAyB;AAEvB;AACAlB,IAAAA,QAAQ,GAAG,IAAX;AACA,QAAIsD,EAAJ,EAAQlB,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACR,UAAMf,KAAK,CAACpC,sBAAD,CAAX;AACD;;AACD,SAAOyB,QAAQ,CAAC,IAAIQ,IAAJ,CAASjD,IAAT,CAAD,EAAiBqE,EAAjB,EAAqB,CAArB,EAAwB,IAAxB,CAAf;AACD;;AAGD,SAASyD,KAAT,CAAe7E,IAAf,EAAqBoB,EAArB,EAAyBD,EAAzB,EAA6B;AAC3B,MAAIC,EAAE,GAAGpC,YAAT,EAAuB,MAAMmB,KAAK,CAACpC,sBAAD,CAAX;AACvB,SAAOyB,QAAQ,CAAC,IAAIQ,IAAJ,CAAShD,EAAT,CAAD,EAAeoE,EAAf,EAAmBD,EAAnB,EAAuB,IAAvB,CAAf;AACD;;AAGD,SAASiH,YAAT,CAAsB2E,MAAtB,EAA8B;AAC5B,MAAIjK,CAAC,GAAGiK,MAAM,CAAChO,MAAP,GAAgB,CAAxB;AAAA,MACE0E,GAAG,GAAGX,CAAC,GAAGlE,QAAJ,GAAe,CADvB;AAGAkE,EAAAA,CAAC,GAAGiK,MAAM,CAACjK,CAAD,CAAV,CAJ4B,CAM5B;;AACA,MAAIA,CAAJ,EAAO;AAEL;AACA,WAAOA,CAAC,GAAG,EAAJ,IAAU,CAAjB,EAAoBA,CAAC,IAAI,EAAzB,EAA6BW,GAAG,GAH3B,CAKL;;;AACA,SAAKX,CAAC,GAAGiK,MAAM,CAAC,CAAD,CAAf,EAAoBjK,CAAC,IAAI,EAAzB,EAA6BA,CAAC,IAAI,EAAlC,EAAsCW,GAAG;AAC1C;;AAED,SAAOA,GAAP;AACD;;AAGD,SAASoH,aAAT,CAAuB9K,CAAvB,EAA0B;AACxB,MAAIsN,EAAE,GAAG,EAAT;;AACA,SAAOtN,CAAC,EAAR,GAAasN,EAAE,IAAI,GAAN;;AACb,SAAOA,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASlD,MAAT,CAAgBnK,IAAhB,EAAsBX,CAAtB,EAAyBqC,CAAzB,EAA4BR,EAA5B,EAAgC;AAC9B,MAAI4L,WAAJ;AAAA,MACEnL,CAAC,GAAG,IAAI3B,IAAJ,CAAS,CAAT,CADN;AAAA,MAGE;AACA;AACAD,EAAAA,CAAC,GAAG5B,IAAI,CAACsB,IAAL,CAAUyB,EAAE,GAAGtC,QAAL,GAAgB,CAA1B,CALN;AAOAhB,EAAAA,QAAQ,GAAG,KAAX;;AAEA,WAAS;AACP,QAAI8D,CAAC,GAAG,CAAR,EAAW;AACTC,MAAAA,CAAC,GAAGA,CAAC,CAACY,KAAF,CAAQlD,CAAR,CAAJ;AACA,UAAIiO,QAAQ,CAAC3L,CAAC,CAACf,CAAH,EAAMb,CAAN,CAAZ,EAAsB+M,WAAW,GAAG,IAAd;AACvB;;AAEDpL,IAAAA,CAAC,GAAGxD,SAAS,CAACwD,CAAC,GAAG,CAAL,CAAb;;AACA,QAAIA,CAAC,KAAK,CAAV,EAAa;AAEX;AACAA,MAAAA,CAAC,GAAGC,CAAC,CAACf,CAAF,CAAI7B,MAAJ,GAAa,CAAjB;AACA,UAAI+N,WAAW,IAAInL,CAAC,CAACf,CAAF,CAAIc,CAAJ,MAAW,CAA9B,EAAiC,EAAEC,CAAC,CAACf,CAAF,CAAIc,CAAJ,CAAF;AACjC;AACD;;AAEDrC,IAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAJ;AACAiO,IAAAA,QAAQ,CAACjO,CAAC,CAACuB,CAAH,EAAMb,CAAN,CAAR;AACD;;AAEDnC,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO+D,CAAP;AACD;;AAGD,SAAS4L,KAAT,CAAe7L,CAAf,EAAkB;AAChB,SAAOA,CAAC,CAACd,CAAF,CAAIc,CAAC,CAACd,CAAF,CAAI7B,MAAJ,GAAa,CAAjB,IAAsB,CAA7B;AACD;AAGD;AACA;AACA;;;AACA,SAASyO,QAAT,CAAkBxN,IAAlB,EAAwByN,IAAxB,EAA8BC,IAA9B,EAAoC;AAClC,MAAIpN,CAAJ;AAAA,MACEjB,CAAC,GAAG,IAAIW,IAAJ,CAASyN,IAAI,CAAC,CAAD,CAAb,CADN;AAAA,MAEElN,CAAC,GAAG,CAFN;;AAIA,SAAO,EAAEA,CAAF,GAAMkN,IAAI,CAAC1O,MAAlB,GAA2B;AACzBuB,IAAAA,CAAC,GAAG,IAAIN,IAAJ,CAASyN,IAAI,CAAClN,CAAD,CAAb,CAAJ;;AACA,QAAI,CAACD,CAAC,CAACf,CAAP,EAAU;AACRF,MAAAA,CAAC,GAAGiB,CAAJ;AACA;AACD,KAHD,MAGO,IAAIjB,CAAC,CAACqO,IAAD,CAAD,CAAQpN,CAAR,CAAJ,EAAgB;AACrBjB,MAAAA,CAAC,GAAGiB,CAAJ;AACD;AACF;;AAED,SAAOjB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwI,kBAAT,CAA4BxI,CAA5B,EAA+B+B,EAA/B,EAAmC;AACjC,MAAIuF,WAAJ;AAAA,MAAiBI,KAAjB;AAAA,MAAwBvG,CAAxB;AAAA,MAA2BlC,GAA3B;AAAA,MAAgCqP,GAAhC;AAAA,MAAqC9L,CAArC;AAAA,MAAwC0D,GAAxC;AAAA,MACE3D,GAAG,GAAG,CADR;AAAA,MAEErB,CAAC,GAAG,CAFN;AAAA,MAGER,CAAC,GAAG,CAHN;AAAA,MAIEC,IAAI,GAAGX,CAAC,CAACC,WAJX;AAAA,MAKE6B,EAAE,GAAGnB,IAAI,CAAC7C,QALZ;AAAA,MAME+D,EAAE,GAAGlB,IAAI,CAAC9C,SANZ,CADiC,CASjC;;AACA,MAAI,CAACmC,CAAC,CAACuB,CAAH,IAAQ,CAACvB,CAAC,CAACuB,CAAF,CAAI,CAAJ,CAAT,IAAmBvB,CAAC,CAACK,CAAF,GAAM,EAA7B,EAAiC;AAE/B,WAAO,IAAIM,IAAJ,CAASX,CAAC,CAACuB,CAAF,GACZ,CAACvB,CAAC,CAACuB,CAAF,CAAI,CAAJ,CAAD,GAAU,CAAV,GAAcvB,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,IAAI,CADpB,GAEZF,CAAC,CAACE,CAAF,GAAMF,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAcF,CAApB,GAAwB,IAAI,CAFzB,CAAP;AAGD;;AAED,MAAI+B,EAAE,IAAI,IAAV,EAAgB;AACdxD,IAAAA,QAAQ,GAAG,KAAX;AACA2H,IAAAA,GAAG,GAAGrE,EAAN;AACD,GAHD,MAGO;AACLqE,IAAAA,GAAG,GAAGnE,EAAN;AACD;;AAEDS,EAAAA,CAAC,GAAG,IAAI7B,IAAJ,CAAS,OAAT,CAAJ,CAxBiC,CA0BjC;;AACA,SAAOX,CAAC,CAACK,CAAF,GAAM,CAAC,CAAd,EAAiB;AAEf;AACAL,IAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQV,CAAR,CAAJ;AACA9B,IAAAA,CAAC,IAAI,CAAL;AACD,GAhCgC,CAkCjC;AACA;;;AACAgH,EAAAA,KAAK,GAAG5I,IAAI,CAACqI,GAAL,CAASnI,OAAO,CAAC,CAAD,EAAI0B,CAAJ,CAAhB,IAA0B5B,IAAI,CAACpB,IAA/B,GAAsC,CAAtC,GAA0C,CAA1C,GAA8C,CAAtD;AACAwI,EAAAA,GAAG,IAAIwB,KAAP;AACAJ,EAAAA,WAAW,GAAGrI,GAAG,GAAGqP,GAAG,GAAG,IAAI3N,IAAJ,CAAS,CAAT,CAA1B;AACAA,EAAAA,IAAI,CAAC9C,SAAL,GAAiBqI,GAAjB;;AAEA,WAAS;AACPjH,IAAAA,GAAG,GAAGkB,QAAQ,CAAClB,GAAG,CAACiE,KAAJ,CAAUlD,CAAV,CAAD,EAAekG,GAAf,EAAoB,CAApB,CAAd;AACAoB,IAAAA,WAAW,GAAGA,WAAW,CAACpE,KAAZ,CAAkB,EAAEhC,CAApB,CAAd;AACAsB,IAAAA,CAAC,GAAG8L,GAAG,CAACnL,IAAJ,CAASC,MAAM,CAACnE,GAAD,EAAMqI,WAAN,EAAmBpB,GAAnB,EAAwB,CAAxB,CAAf,CAAJ;;AAEA,QAAIrD,cAAc,CAACL,CAAC,CAACjB,CAAH,CAAd,CAAoBwB,KAApB,CAA0B,CAA1B,EAA6BmD,GAA7B,MAAsCrD,cAAc,CAACyL,GAAG,CAAC/M,CAAL,CAAd,CAAsBwB,KAAtB,CAA4B,CAA5B,EAA+BmD,GAA/B,CAA1C,EAA+E;AAC7E/E,MAAAA,CAAC,GAAGT,CAAJ;;AACA,aAAOS,CAAC,EAAR,EAAYmN,GAAG,GAAGnO,QAAQ,CAACmO,GAAG,CAACpL,KAAJ,CAAUoL,GAAV,CAAD,EAAiBpI,GAAjB,EAAsB,CAAtB,CAAd,CAFiE,CAI7E;AACA;AACA;AACA;AACA;;;AACA,UAAInE,EAAE,IAAI,IAAV,EAAgB;AAEd,YAAIQ,GAAG,GAAG,CAAN,IAAWsF,mBAAmB,CAACyG,GAAG,CAAC/M,CAAL,EAAQ2E,GAAG,GAAGwB,KAAd,EAAqB5F,EAArB,EAAyBS,GAAzB,CAAlC,EAAiE;AAC/D5B,UAAAA,IAAI,CAAC9C,SAAL,GAAiBqI,GAAG,IAAI,EAAxB;AACAoB,UAAAA,WAAW,GAAGrI,GAAG,GAAGuD,CAAC,GAAG,IAAI7B,IAAJ,CAAS,CAAT,CAAxB;AACAO,UAAAA,CAAC,GAAG,CAAJ;AACAqB,UAAAA,GAAG;AACJ,SALD,MAKO;AACL,iBAAOpC,QAAQ,CAACmO,GAAD,EAAM3N,IAAI,CAAC9C,SAAL,GAAiBgE,EAAvB,EAA2BC,EAA3B,EAA+BvD,QAAQ,GAAG,IAA1C,CAAf;AACD;AACF,OAVD,MAUO;AACLoC,QAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACA,eAAOyM,GAAP;AACD;AACF;;AAEDA,IAAAA,GAAG,GAAG9L,CAAN;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmF,gBAAT,CAA0B1G,CAA1B,EAA6Bc,EAA7B,EAAiC;AAC/B,MAAIwM,CAAJ;AAAA,MAAOC,EAAP;AAAA,MAAWlH,WAAX;AAAA,MAAwBjH,CAAxB;AAAA,MAA2BoO,SAA3B;AAAA,MAAsClM,GAAtC;AAAA,MAA2C+L,GAA3C;AAAA,MAAgD9L,CAAhD;AAAA,MAAmD0D,GAAnD;AAAA,MAAwDwI,EAAxD;AAAA,MAA4DlI,EAA5D;AAAA,MACEnE,CAAC,GAAG,CADN;AAAA,MAEEqF,KAAK,GAAG,EAFV;AAAA,MAGE1H,CAAC,GAAGiB,CAHN;AAAA,MAIEK,EAAE,GAAGtB,CAAC,CAACuB,CAJT;AAAA,MAKEZ,IAAI,GAAGX,CAAC,CAACC,WALX;AAAA,MAME6B,EAAE,GAAGnB,IAAI,CAAC7C,QANZ;AAAA,MAOE+D,EAAE,GAAGlB,IAAI,CAAC9C,SAPZ,CAD+B,CAU/B;;AACA,MAAImC,CAAC,CAACE,CAAF,GAAM,CAAN,IAAW,CAACoB,EAAZ,IAAkB,CAACA,EAAE,CAAC,CAAD,CAArB,IAA4B,CAACtB,CAAC,CAACK,CAAH,IAAQiB,EAAE,CAAC,CAAD,CAAF,IAAS,CAAjB,IAAsBA,EAAE,CAAC5B,MAAH,IAAa,CAAnE,EAAsE;AACpE,WAAO,IAAIiB,IAAJ,CAASW,EAAE,IAAI,CAACA,EAAE,CAAC,CAAD,CAAT,GAAe,CAAC,CAAD,GAAK,CAApB,GAAwBtB,CAAC,CAACE,CAAF,IAAO,CAAP,GAAWU,GAAX,GAAiBU,EAAE,GAAG,CAAH,GAAOtB,CAA3D,CAAP;AACD;;AAED,MAAI+B,EAAE,IAAI,IAAV,EAAgB;AACdxD,IAAAA,QAAQ,GAAG,KAAX;AACA2H,IAAAA,GAAG,GAAGrE,EAAN;AACD,GAHD,MAGO;AACLqE,IAAAA,GAAG,GAAGnE,EAAN;AACD;;AAEDpB,EAAAA,IAAI,CAAC9C,SAAL,GAAiBqI,GAAG,IAAIwB,KAAxB;AACA6G,EAAAA,CAAC,GAAG1L,cAAc,CAACvB,EAAD,CAAlB;AACAkN,EAAAA,EAAE,GAAGD,CAAC,CAACjL,MAAF,CAAS,CAAT,CAAL;;AAEA,MAAIxE,IAAI,CAACiB,GAAL,CAASM,CAAC,GAAGL,CAAC,CAACK,CAAf,IAAoB,MAAxB,EAAgC;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,WAAOmO,EAAE,GAAG,CAAL,IAAUA,EAAE,IAAI,CAAhB,IAAqBA,EAAE,IAAI,CAAN,IAAWD,CAAC,CAACjL,MAAF,CAAS,CAAT,IAAc,CAArD,EAAwD;AACtDtD,MAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQjC,CAAR,CAAJ;AACAsN,MAAAA,CAAC,GAAG1L,cAAc,CAAC7C,CAAC,CAACuB,CAAH,CAAlB;AACAiN,MAAAA,EAAE,GAAGD,CAAC,CAACjL,MAAF,CAAS,CAAT,CAAL;AACAjB,MAAAA,CAAC;AACF;;AAEDhC,IAAAA,CAAC,GAAGL,CAAC,CAACK,CAAN;;AAEA,QAAImO,EAAE,GAAG,CAAT,EAAY;AACVxO,MAAAA,CAAC,GAAG,IAAIW,IAAJ,CAAS,OAAO4N,CAAhB,CAAJ;AACAlO,MAAAA,CAAC;AACF,KAHD,MAGO;AACLL,MAAAA,CAAC,GAAG,IAAIW,IAAJ,CAAS6N,EAAE,GAAG,GAAL,GAAWD,CAAC,CAACxL,KAAF,CAAQ,CAAR,CAApB,CAAJ;AACD;AACF,GA5BD,MA4BO;AAEL;AACA;AACA;AACAP,IAAAA,CAAC,GAAGoF,OAAO,CAACjH,IAAD,EAAOuF,GAAG,GAAG,CAAb,EAAgBrE,EAAhB,CAAP,CAA2BqB,KAA3B,CAAiC7C,CAAC,GAAG,EAArC,CAAJ;AACAL,IAAAA,CAAC,GAAG2H,gBAAgB,CAAC,IAAIhH,IAAJ,CAAS6N,EAAE,GAAG,GAAL,GAAWD,CAAC,CAACxL,KAAF,CAAQ,CAAR,CAApB,CAAD,EAAkCmD,GAAG,GAAGwB,KAAxC,CAAhB,CAA+DvE,IAA/D,CAAoEX,CAApE,CAAJ;AACA7B,IAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AAEA,WAAOE,EAAE,IAAI,IAAN,GAAa5B,QAAQ,CAACH,CAAD,EAAI6B,EAAJ,EAAQC,EAAR,EAAYvD,QAAQ,GAAG,IAAvB,CAArB,GAAoDyB,CAA3D;AACD,GAhE8B,CAkE/B;;;AACA0O,EAAAA,EAAE,GAAG1O,CAAL,CAnE+B,CAqE/B;AACA;AACA;;AACAsO,EAAAA,GAAG,GAAGG,SAAS,GAAGzO,CAAC,GAAGoD,MAAM,CAACpD,CAAC,CAAC0E,KAAF,CAAQ,CAAR,CAAD,EAAa1E,CAAC,CAACmD,IAAF,CAAO,CAAP,CAAb,EAAwB+C,GAAxB,EAA6B,CAA7B,CAA5B;AACAM,EAAAA,EAAE,GAAGrG,QAAQ,CAACH,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAD,EAAakG,GAAb,EAAkB,CAAlB,CAAb;AACAoB,EAAAA,WAAW,GAAG,CAAd;;AAEA,WAAS;AACPmH,IAAAA,SAAS,GAAGtO,QAAQ,CAACsO,SAAS,CAACvL,KAAV,CAAgBsD,EAAhB,CAAD,EAAsBN,GAAtB,EAA2B,CAA3B,CAApB;AACA1D,IAAAA,CAAC,GAAG8L,GAAG,CAACnL,IAAJ,CAASC,MAAM,CAACqL,SAAD,EAAY,IAAI9N,IAAJ,CAAS2G,WAAT,CAAZ,EAAmCpB,GAAnC,EAAwC,CAAxC,CAAf,CAAJ;;AAEA,QAAIrD,cAAc,CAACL,CAAC,CAACjB,CAAH,CAAd,CAAoBwB,KAApB,CAA0B,CAA1B,EAA6BmD,GAA7B,MAAsCrD,cAAc,CAACyL,GAAG,CAAC/M,CAAL,CAAd,CAAsBwB,KAAtB,CAA4B,CAA5B,EAA+BmD,GAA/B,CAA1C,EAA+E;AAC7EoI,MAAAA,GAAG,GAAGA,GAAG,CAACpL,KAAJ,CAAU,CAAV,CAAN,CAD6E,CAG7E;AACA;;AACA,UAAI7C,CAAC,KAAK,CAAV,EAAaiO,GAAG,GAAGA,GAAG,CAACnL,IAAJ,CAASyE,OAAO,CAACjH,IAAD,EAAOuF,GAAG,GAAG,CAAb,EAAgBrE,EAAhB,CAAP,CAA2BqB,KAA3B,CAAiC7C,CAAC,GAAG,EAArC,CAAT,CAAN;AACbiO,MAAAA,GAAG,GAAGlL,MAAM,CAACkL,GAAD,EAAM,IAAI3N,IAAJ,CAAS0B,CAAT,CAAN,EAAmB6D,GAAnB,EAAwB,CAAxB,CAAZ,CAN6E,CAQ7E;AACA;AACA;AACA;AACA;AACA;;AACA,UAAInE,EAAE,IAAI,IAAV,EAAgB;AACd,YAAI8F,mBAAmB,CAACyG,GAAG,CAAC/M,CAAL,EAAQ2E,GAAG,GAAGwB,KAAd,EAAqB5F,EAArB,EAAyBS,GAAzB,CAAvB,EAAsD;AACpD5B,UAAAA,IAAI,CAAC9C,SAAL,GAAiBqI,GAAG,IAAIwB,KAAxB;AACAlF,UAAAA,CAAC,GAAGiM,SAAS,GAAGzO,CAAC,GAAGoD,MAAM,CAACsL,EAAE,CAAChK,KAAH,CAAS,CAAT,CAAD,EAAcgK,EAAE,CAACvL,IAAH,CAAQ,CAAR,CAAd,EAA0B+C,GAA1B,EAA+B,CAA/B,CAA1B;AACAM,UAAAA,EAAE,GAAGrG,QAAQ,CAACH,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAD,EAAakG,GAAb,EAAkB,CAAlB,CAAb;AACAoB,UAAAA,WAAW,GAAG/E,GAAG,GAAG,CAApB;AACD,SALD,MAKO;AACL,iBAAOpC,QAAQ,CAACmO,GAAD,EAAM3N,IAAI,CAAC9C,SAAL,GAAiBgE,EAAvB,EAA2BC,EAA3B,EAA+BvD,QAAQ,GAAG,IAA1C,CAAf;AACD;AACF,OATD,MASO;AACLoC,QAAAA,IAAI,CAAC9C,SAAL,GAAiBgE,EAAjB;AACA,eAAOyM,GAAP;AACD;AACF;;AAEDA,IAAAA,GAAG,GAAG9L,CAAN;AACA8E,IAAAA,WAAW,IAAI,CAAf;AACD;AACF,C,CAGD;;;AACA,SAASyG,iBAAT,CAA2B/N,CAA3B,EAA8B;AAC5B;AACA,SAAO2O,MAAM,CAAC3O,CAAC,CAACE,CAAF,GAAMF,CAAC,CAACE,CAAR,GAAY,CAAb,CAAb;AACD;AAGD;AACA;AACA;;;AACA,SAAS0O,YAAT,CAAsB5O,CAAtB,EAAyB6J,GAAzB,EAA8B;AAC5B,MAAIxJ,CAAJ,EAAOa,CAAP,EAAUkD,GAAV,CAD4B,CAG5B;;AACA,MAAI,CAAC/D,CAAC,GAAGwJ,GAAG,CAAC7G,OAAJ,CAAY,GAAZ,CAAL,IAAyB,CAAC,CAA9B,EAAiC6G,GAAG,GAAGA,GAAG,CAACgF,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN,CAJL,CAM5B;;AACA,MAAI,CAAC3N,CAAC,GAAG2I,GAAG,CAACiF,MAAJ,CAAW,IAAX,CAAL,IAAyB,CAA7B,EAAgC;AAE9B;AACA,QAAIzO,CAAC,GAAG,CAAR,EAAWA,CAAC,GAAGa,CAAJ;AACXb,IAAAA,CAAC,IAAI,CAACwJ,GAAG,CAAC9G,KAAJ,CAAU7B,CAAC,GAAG,CAAd,CAAN;AACA2I,IAAAA,GAAG,GAAGA,GAAG,CAACkF,SAAJ,CAAc,CAAd,EAAiB7N,CAAjB,CAAN;AACD,GAND,MAMO,IAAIb,CAAC,GAAG,CAAR,EAAW;AAEhB;AACAA,IAAAA,CAAC,GAAGwJ,GAAG,CAACnK,MAAR;AACD,GAjB2B,CAmB5B;;;AACA,OAAKwB,CAAC,GAAG,CAAT,EAAY2I,GAAG,CAACmF,UAAJ,CAAe9N,CAAf,MAAsB,EAAlC,EAAsCA,CAAC,EAAvC,CAA0C,CApBd,CAsB5B;;;AACA,OAAKkD,GAAG,GAAGyF,GAAG,CAACnK,MAAf,EAAuBmK,GAAG,CAACmF,UAAJ,CAAe5K,GAAG,GAAG,CAArB,MAA4B,EAAnD,EAAuD,EAAEA,GAAzD,CAA6D;;AAC7DyF,EAAAA,GAAG,GAAGA,GAAG,CAAC9G,KAAJ,CAAU7B,CAAV,EAAakD,GAAb,CAAN;;AAEA,MAAIyF,GAAJ,EAAS;AACPzF,IAAAA,GAAG,IAAIlD,CAAP;AACAlB,IAAAA,CAAC,CAACK,CAAF,GAAMA,CAAC,GAAGA,CAAC,GAAGa,CAAJ,GAAQ,CAAlB;AACAlB,IAAAA,CAAC,CAACuB,CAAF,GAAM,EAAN,CAHO,CAKP;AAEA;AACA;;AACAL,IAAAA,CAAC,GAAG,CAACb,CAAC,GAAG,CAAL,IAAUd,QAAd;AACA,QAAIc,CAAC,GAAG,CAAR,EAAWa,CAAC,IAAI3B,QAAL;;AAEX,QAAI2B,CAAC,GAAGkD,GAAR,EAAa;AACX,UAAIlD,CAAJ,EAAOlB,CAAC,CAACuB,CAAF,CAAI2G,IAAJ,CAAS,CAAC2B,GAAG,CAAC9G,KAAJ,CAAU,CAAV,EAAa7B,CAAb,CAAV;;AACP,WAAKkD,GAAG,IAAI7E,QAAZ,EAAsB2B,CAAC,GAAGkD,GAA1B,GAAgCpE,CAAC,CAACuB,CAAF,CAAI2G,IAAJ,CAAS,CAAC2B,GAAG,CAAC9G,KAAJ,CAAU7B,CAAV,EAAaA,CAAC,IAAI3B,QAAlB,CAAV;;AAChCsK,MAAAA,GAAG,GAAGA,GAAG,CAAC9G,KAAJ,CAAU7B,CAAV,CAAN;AACAA,MAAAA,CAAC,GAAG3B,QAAQ,GAAGsK,GAAG,CAACnK,MAAnB;AACD,KALD,MAKO;AACLwB,MAAAA,CAAC,IAAIkD,GAAL;AACD;;AAED,WAAOlD,CAAC,EAAR,GAAa2I,GAAG,IAAI,GAAP;;AACb7J,IAAAA,CAAC,CAACuB,CAAF,CAAI2G,IAAJ,CAAS,CAAC2B,GAAV;;AAEA,QAAItL,QAAJ,EAAc;AAEZ;AACA,UAAIyB,CAAC,CAACK,CAAF,GAAML,CAAC,CAACC,WAAF,CAAc9B,IAAxB,EAA8B;AAE5B;AACA6B,QAAAA,CAAC,CAACuB,CAAF,GAAM,IAAN;AACAvB,QAAAA,CAAC,CAACK,CAAF,GAAMO,GAAN,CAJ4B,CAM9B;AACC,OAPD,MAOO,IAAIZ,CAAC,CAACK,CAAF,GAAML,CAAC,CAACC,WAAF,CAAc/B,IAAxB,EAA8B;AAEnC;AACA8B,QAAAA,CAAC,CAACK,CAAF,GAAM,CAAN;AACAL,QAAAA,CAAC,CAACuB,CAAF,GAAM,CAAC,CAAD,CAAN,CAJmC,CAKnC;AACD,OAhBW,CAgBV;;AACH;AACF,GA1CD,MA0CO;AAEL;AACAvB,IAAAA,CAAC,CAACK,CAAF,GAAM,CAAN;AACAL,IAAAA,CAAC,CAACuB,CAAF,GAAM,CAAC,CAAD,CAAN;AACD;;AAED,SAAOvB,CAAP;AACD;AAGD;AACA;AACA;;;AACA,SAASiP,UAAT,CAAoBjP,CAApB,EAAuB6J,GAAvB,EAA4B;AAC1B,MAAIzC,IAAJ,EAAUzG,IAAV,EAAgBuO,OAAhB,EAAyBhO,CAAzB,EAA4BiO,OAA5B,EAAqC/K,GAArC,EAA0CgL,CAA1C,EAA6C9N,EAA7C,EAAiDyG,EAAjD;;AAEA,MAAI8B,GAAG,CAAC7G,OAAJ,CAAY,GAAZ,IAAmB,CAAC,CAAxB,EAA2B;AACzB6G,IAAAA,GAAG,GAAGA,GAAG,CAACgF,OAAJ,CAAY,cAAZ,EAA4B,IAA5B,CAAN;AACA,QAAIxP,SAAS,CAACgQ,IAAV,CAAexF,GAAf,CAAJ,EAAyB,OAAO+E,YAAY,CAAC5O,CAAD,EAAI6J,GAAJ,CAAnB;AAC1B,GAHD,MAGO,IAAIA,GAAG,KAAK,UAAR,IAAsBA,GAAG,KAAK,KAAlC,EAAyC;AAC9C,QAAI,CAAC,CAACA,GAAN,EAAW7J,CAAC,CAACE,CAAF,GAAMU,GAAN;AACXZ,IAAAA,CAAC,CAACK,CAAF,GAAMO,GAAN;AACAZ,IAAAA,CAAC,CAACuB,CAAF,GAAM,IAAN;AACA,WAAOvB,CAAP;AACD;;AAED,MAAIb,KAAK,CAACkQ,IAAN,CAAWxF,GAAX,CAAJ,EAAsB;AACpBzC,IAAAA,IAAI,GAAG,EAAP;AACAyC,IAAAA,GAAG,GAAGA,GAAG,CAACyF,WAAJ,EAAN;AACD,GAHD,MAGO,IAAIpQ,QAAQ,CAACmQ,IAAT,CAAcxF,GAAd,CAAJ,EAAyB;AAC9BzC,IAAAA,IAAI,GAAG,CAAP;AACD,GAFM,MAEA,IAAIhI,OAAO,CAACiQ,IAAR,CAAaxF,GAAb,CAAJ,EAAwB;AAC7BzC,IAAAA,IAAI,GAAG,CAAP;AACD,GAFM,MAEA;AACL,UAAMtG,KAAK,CAACrC,eAAe,GAAGoL,GAAnB,CAAX;AACD,GAtByB,CAwB1B;;;AACA3I,EAAAA,CAAC,GAAG2I,GAAG,CAACiF,MAAJ,CAAW,IAAX,CAAJ;;AAEA,MAAI5N,CAAC,GAAG,CAAR,EAAW;AACTkO,IAAAA,CAAC,GAAG,CAACvF,GAAG,CAAC9G,KAAJ,CAAU7B,CAAC,GAAG,CAAd,CAAL;AACA2I,IAAAA,GAAG,GAAGA,GAAG,CAACkF,SAAJ,CAAc,CAAd,EAAiB7N,CAAjB,CAAN;AACD,GAHD,MAGO;AACL2I,IAAAA,GAAG,GAAGA,GAAG,CAAC9G,KAAJ,CAAU,CAAV,CAAN;AACD,GAhCyB,CAkC1B;AACA;;;AACA7B,EAAAA,CAAC,GAAG2I,GAAG,CAAC7G,OAAJ,CAAY,GAAZ,CAAJ;AACAmM,EAAAA,OAAO,GAAGjO,CAAC,IAAI,CAAf;AACAP,EAAAA,IAAI,GAAGX,CAAC,CAACC,WAAT;;AAEA,MAAIkP,OAAJ,EAAa;AACXtF,IAAAA,GAAG,GAAGA,GAAG,CAACgF,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN;AACAzK,IAAAA,GAAG,GAAGyF,GAAG,CAACnK,MAAV;AACAwB,IAAAA,CAAC,GAAGkD,GAAG,GAAGlD,CAAV,CAHW,CAKX;;AACAgO,IAAAA,OAAO,GAAGpE,MAAM,CAACnK,IAAD,EAAO,IAAIA,IAAJ,CAASyG,IAAT,CAAP,EAAuBlG,CAAvB,EAA0BA,CAAC,GAAG,CAA9B,CAAhB;AACD;;AAEDI,EAAAA,EAAE,GAAGsK,WAAW,CAAC/B,GAAD,EAAMzC,IAAN,EAAY9H,IAAZ,CAAhB;AACAyI,EAAAA,EAAE,GAAGzG,EAAE,CAAC5B,MAAH,GAAY,CAAjB,CAlD0B,CAoD1B;;AACA,OAAKwB,CAAC,GAAG6G,EAAT,EAAazG,EAAE,CAACJ,CAAD,CAAF,KAAU,CAAvB,EAA0B,EAAEA,CAA5B,EAA+BI,EAAE,CAAC6G,GAAH;;AAC/B,MAAIjH,CAAC,GAAG,CAAR,EAAW,OAAO,IAAIP,IAAJ,CAASX,CAAC,CAACE,CAAF,GAAM,CAAf,CAAP;AACXF,EAAAA,CAAC,CAACK,CAAF,GAAMgI,iBAAiB,CAAC/G,EAAD,EAAKyG,EAAL,CAAvB;AACA/H,EAAAA,CAAC,CAACuB,CAAF,GAAMD,EAAN;AACA/C,EAAAA,QAAQ,GAAG,KAAX,CAzD0B,CA2D1B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI4Q,OAAJ,EAAanP,CAAC,GAAGoD,MAAM,CAACpD,CAAD,EAAIkP,OAAJ,EAAa9K,GAAG,GAAG,CAAnB,CAAV,CAjEa,CAmE1B;;AACA,MAAIgL,CAAJ,EAAOpP,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQpE,IAAI,CAACiB,GAAL,CAASqP,CAAT,IAAc,EAAd,GAAmBpQ,OAAO,CAAC,CAAD,EAAIoQ,CAAJ,CAA1B,GAAmCG,OAAO,CAACtQ,GAAR,CAAY,CAAZ,EAAemQ,CAAf,CAA3C,CAAJ;AACP7Q,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAOyB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAASiJ,IAAT,CAActI,IAAd,EAAoBX,CAApB,EAAuB;AACrB,MAAIU,CAAJ;AAAA,MACE0D,GAAG,GAAGpE,CAAC,CAACuB,CAAF,CAAI7B,MADZ;;AAGA,MAAI0E,GAAG,GAAG,CAAV,EAAa;AACX,WAAOpE,CAAC,CAAC4C,MAAF,KAAa5C,CAAb,GAAiBuE,YAAY,CAAC5D,IAAD,EAAO,CAAP,EAAUX,CAAV,EAAaA,CAAb,CAApC;AACD,GANoB,CAQrB;AACA;AACA;AAEA;;;AACAU,EAAAA,CAAC,GAAG,MAAM5B,IAAI,CAAC+F,IAAL,CAAUT,GAAV,CAAV;AACA1D,EAAAA,CAAC,GAAGA,CAAC,GAAG,EAAJ,GAAS,EAAT,GAAcA,CAAC,GAAG,CAAtB;AAEAV,EAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQ,IAAIoB,OAAO,CAAC,CAAD,EAAI5D,CAAJ,CAAnB,CAAJ;AACAV,EAAAA,CAAC,GAAGuE,YAAY,CAAC5D,IAAD,EAAO,CAAP,EAAUX,CAAV,EAAaA,CAAb,CAAhB,CAjBqB,CAmBrB;;AACA,MAAIwP,MAAJ;AAAA,MACEzK,EAAE,GAAG,IAAIpE,IAAJ,CAAS,CAAT,CADP;AAAA,MAEEqE,GAAG,GAAG,IAAIrE,IAAJ,CAAS,EAAT,CAFR;AAAA,MAGEsE,GAAG,GAAG,IAAItE,IAAJ,CAAS,EAAT,CAHR;;AAIA,SAAOD,CAAC,EAAR,GAAa;AACX8O,IAAAA,MAAM,GAAGxP,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAT;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACkD,KAAF,CAAQ6B,EAAE,CAAC5B,IAAH,CAAQqM,MAAM,CAACtM,KAAP,CAAa8B,GAAG,CAAC9B,KAAJ,CAAUsM,MAAV,EAAkB9K,KAAlB,CAAwBO,GAAxB,CAAb,CAAR,CAAR,CAAJ;AACD;;AAED,SAAOjF,CAAP;AACD,C,CAGD;;;AACA,SAASuE,YAAT,CAAsB5D,IAAtB,EAA4B0B,CAA5B,EAA+BrC,CAA/B,EAAkCiB,CAAlC,EAAqCwO,YAArC,EAAmD;AACjD,MAAItO,CAAJ;AAAA,MAAOqB,CAAP;AAAA,MAAUkN,CAAV;AAAA,MAAalJ,EAAb;AAAA,MACEtF,CAAC,GAAG,CADN;AAAA,MAEEW,EAAE,GAAGlB,IAAI,CAAC9C,SAFZ;AAAA,MAGE6C,CAAC,GAAG5B,IAAI,CAACsB,IAAL,CAAUyB,EAAE,GAAGtC,QAAf,CAHN;AAKAhB,EAAAA,QAAQ,GAAG,KAAX;AACAiI,EAAAA,EAAE,GAAGxG,CAAC,CAACkD,KAAF,CAAQlD,CAAR,CAAL;AACA0P,EAAAA,CAAC,GAAG,IAAI/O,IAAJ,CAASM,CAAT,CAAJ;;AAEA,WAAS;AACPuB,IAAAA,CAAC,GAAGY,MAAM,CAACsM,CAAC,CAACxM,KAAF,CAAQsD,EAAR,CAAD,EAAc,IAAI7F,IAAJ,CAAS0B,CAAC,KAAKA,CAAC,EAAhB,CAAd,EAAmCR,EAAnC,EAAuC,CAAvC,CAAV;AACA6N,IAAAA,CAAC,GAAGD,YAAY,GAAGxO,CAAC,CAACkC,IAAF,CAAOX,CAAP,CAAH,GAAevB,CAAC,CAACyD,KAAF,CAAQlC,CAAR,CAA/B;AACAvB,IAAAA,CAAC,GAAGmC,MAAM,CAACZ,CAAC,CAACU,KAAF,CAAQsD,EAAR,CAAD,EAAc,IAAI7F,IAAJ,CAAS0B,CAAC,KAAKA,CAAC,EAAhB,CAAd,EAAmCR,EAAnC,EAAuC,CAAvC,CAAV;AACAW,IAAAA,CAAC,GAAGkN,CAAC,CAACvM,IAAF,CAAOlC,CAAP,CAAJ;;AAEA,QAAIuB,CAAC,CAACjB,CAAF,CAAIb,CAAJ,MAAW,KAAK,CAApB,EAAuB;AACrB,WAAKS,CAAC,GAAGT,CAAT,EAAY8B,CAAC,CAACjB,CAAF,CAAIJ,CAAJ,MAAWuO,CAAC,CAACnO,CAAF,CAAIJ,CAAJ,CAAX,IAAqBA,CAAC,EAAlC,EAAsC;;AACtC,UAAIA,CAAC,IAAI,CAAC,CAAV,EAAa;AACd;;AAEDA,IAAAA,CAAC,GAAGuO,CAAJ;AACAA,IAAAA,CAAC,GAAGzO,CAAJ;AACAA,IAAAA,CAAC,GAAGuB,CAAJ;AACAA,IAAAA,CAAC,GAAGrB,CAAJ;AACAD,IAAAA,CAAC;AACF;;AAED3C,EAAAA,QAAQ,GAAG,IAAX;AACAiE,EAAAA,CAAC,CAACjB,CAAF,CAAI7B,MAAJ,GAAagB,CAAC,GAAG,CAAjB;AAEA,SAAO8B,CAAP;AACD,C,CAGD;;;AACA,SAAS8B,OAAT,CAAiBiI,CAAjB,EAAoBlM,CAApB,EAAuB;AACrB,MAAIgC,CAAC,GAAGkK,CAAR;;AACA,SAAO,EAAElM,CAAT,EAAYgC,CAAC,IAAIkK,CAAL;;AACZ,SAAOlK,CAAP;AACD,C,CAGD;;;AACA,SAASL,gBAAT,CAA0BrB,IAA1B,EAAgCX,CAAhC,EAAmC;AACjC,MAAIwC,CAAJ;AAAA,MACE+C,KAAK,GAAGvF,CAAC,CAACE,CAAF,GAAM,CADhB;AAAA,MAEEyP,EAAE,GAAGnK,KAAK,CAAC7E,IAAD,EAAOA,IAAI,CAAC9C,SAAZ,EAAuB,CAAvB,CAFZ;AAAA,MAGEyH,MAAM,GAAGqK,EAAE,CAACzM,KAAH,CAAS,GAAT,CAHX;AAKAlD,EAAAA,CAAC,GAAGA,CAAC,CAACD,GAAF,EAAJ;;AAEA,MAAIC,CAAC,CAAC4F,GAAF,CAAMN,MAAN,CAAJ,EAAmB;AACjBhH,IAAAA,QAAQ,GAAGiH,KAAK,GAAG,CAAH,GAAO,CAAvB;AACA,WAAOvF,CAAP;AACD;;AAEDwC,EAAAA,CAAC,GAAGxC,CAAC,CAAC6D,QAAF,CAAW8L,EAAX,CAAJ;;AAEA,MAAInN,CAAC,CAACI,MAAF,EAAJ,EAAgB;AACdtE,IAAAA,QAAQ,GAAGiH,KAAK,GAAG,CAAH,GAAO,CAAvB;AACD,GAFD,MAEO;AACLvF,IAAAA,CAAC,GAAGA,CAAC,CAAC0E,KAAF,CAAQlC,CAAC,CAACU,KAAF,CAAQyM,EAAR,CAAR,CAAJ,CADK,CAGL;;AACA,QAAI3P,CAAC,CAAC4F,GAAF,CAAMN,MAAN,CAAJ,EAAmB;AACjBhH,MAAAA,QAAQ,GAAG4P,KAAK,CAAC1L,CAAD,CAAL,GAAY+C,KAAK,GAAG,CAAH,GAAO,CAAxB,GAA8BA,KAAK,GAAG,CAAH,GAAO,CAArD;AACA,aAAOvF,CAAP;AACD;;AAED1B,IAAAA,QAAQ,GAAG4P,KAAK,CAAC1L,CAAD,CAAL,GAAY+C,KAAK,GAAG,CAAH,GAAO,CAAxB,GAA8BA,KAAK,GAAG,CAAH,GAAO,CAArD;AACD;;AAED,SAAOvF,CAAC,CAAC0E,KAAF,CAAQiL,EAAR,EAAY5P,GAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAAS0J,cAAT,CAAwBzJ,CAAxB,EAA2B8L,OAA3B,EAAoC/J,EAApC,EAAwCD,EAAxC,EAA4C;AAC1C,MAAIsF,IAAJ;AAAA,MAAU/G,CAAV;AAAA,MAAaa,CAAb;AAAA,MAAgBR,CAAhB;AAAA,MAAmB0D,GAAnB;AAAA,MAAwBuJ,OAAxB;AAAA,MAAiC9D,GAAjC;AAAA,MAAsCvI,EAAtC;AAAA,MAA0CL,CAA1C;AAAA,MACEN,IAAI,GAAGX,CAAC,CAACC,WADX;AAAA,MAEE6N,KAAK,GAAG/L,EAAE,KAAK,KAAK,CAFtB;;AAIA,MAAI+L,KAAJ,EAAW;AACTlE,IAAAA,UAAU,CAAC7H,EAAD,EAAK,CAAL,EAAQvE,UAAR,CAAV;AACA,QAAIsE,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV,CAAnB,KACK8L,UAAU,CAAC9H,EAAD,EAAK,CAAL,EAAQ,CAAR,CAAV;AACN,GAJD,MAIO;AACLC,IAAAA,EAAE,GAAGpB,IAAI,CAAC9C,SAAV;AACAiE,IAAAA,EAAE,GAAGnB,IAAI,CAAC7C,QAAV;AACD;;AAED,MAAI,CAACkC,CAAC,CAAC2C,QAAF,EAAL,EAAmB;AACjBkH,IAAAA,GAAG,GAAGkE,iBAAiB,CAAC/N,CAAD,CAAvB;AACD,GAFD,MAEO;AACL6J,IAAAA,GAAG,GAAGC,cAAc,CAAC9J,CAAD,CAApB;AACAkB,IAAAA,CAAC,GAAG2I,GAAG,CAAC7G,OAAJ,CAAY,GAAZ,CAAJ,CAFK,CAIL;AACA;AACA;AACA;;AAEA,QAAI8K,KAAJ,EAAW;AACT1G,MAAAA,IAAI,GAAG,CAAP;;AACA,UAAI0E,OAAO,IAAI,EAAf,EAAmB;AACjB/J,QAAAA,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,CAAd;AACD,OAFD,MAEO,IAAI+J,OAAO,IAAI,CAAf,EAAkB;AACvB/J,QAAAA,EAAE,GAAGA,EAAE,GAAG,CAAL,GAAS,CAAd;AACD;AACF,KAPD,MAOO;AACLqF,MAAAA,IAAI,GAAG0E,OAAP;AACD,KAlBI,CAoBL;AACA;AAEA;;;AACA,QAAI5K,CAAC,IAAI,CAAT,EAAY;AACV2I,MAAAA,GAAG,GAAGA,GAAG,CAACgF,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAN;AACA5N,MAAAA,CAAC,GAAG,IAAIN,IAAJ,CAAS,CAAT,CAAJ;AACAM,MAAAA,CAAC,CAACZ,CAAF,GAAMwJ,GAAG,CAACnK,MAAJ,GAAawB,CAAnB;AACAD,MAAAA,CAAC,CAACM,CAAF,GAAMqK,WAAW,CAAC9B,cAAc,CAAC7I,CAAD,CAAf,EAAoB,EAApB,EAAwBmG,IAAxB,CAAjB;AACAnG,MAAAA,CAAC,CAACZ,CAAF,GAAMY,CAAC,CAACM,CAAF,CAAI7B,MAAV;AACD;;AAED4B,IAAAA,EAAE,GAAGsK,WAAW,CAAC/B,GAAD,EAAM,EAAN,EAAUzC,IAAV,CAAhB;AACA/G,IAAAA,CAAC,GAAG+D,GAAG,GAAG9C,EAAE,CAAC5B,MAAb,CAjCK,CAmCL;;AACA,WAAO4B,EAAE,CAAC,EAAE8C,GAAH,CAAF,IAAa,CAApB,GAAwB9C,EAAE,CAAC6G,GAAH;;AAExB,QAAI,CAAC7G,EAAE,CAAC,CAAD,CAAP,EAAY;AACVuI,MAAAA,GAAG,GAAGiE,KAAK,GAAG,MAAH,GAAY,GAAvB;AACD,KAFD,MAEO;AACL,UAAI5M,CAAC,GAAG,CAAR,EAAW;AACTb,QAAAA,CAAC;AACF,OAFD,MAEO;AACLL,QAAAA,CAAC,GAAG,IAAIW,IAAJ,CAASX,CAAT,CAAJ;AACAA,QAAAA,CAAC,CAACuB,CAAF,GAAMD,EAAN;AACAtB,QAAAA,CAAC,CAACK,CAAF,GAAMA,CAAN;AACAL,QAAAA,CAAC,GAAGoD,MAAM,CAACpD,CAAD,EAAIiB,CAAJ,EAAOc,EAAP,EAAWD,EAAX,EAAe,CAAf,EAAkBsF,IAAlB,CAAV;AACA9F,QAAAA,EAAE,GAAGtB,CAAC,CAACuB,CAAP;AACAlB,QAAAA,CAAC,GAAGL,CAAC,CAACK,CAAN;AACAsN,QAAAA,OAAO,GAAGtP,OAAV;AACD,OAXI,CAaL;;;AACA6C,MAAAA,CAAC,GAAGI,EAAE,CAACS,EAAD,CAAN;AACArB,MAAAA,CAAC,GAAG0G,IAAI,GAAG,CAAX;AACAuG,MAAAA,OAAO,GAAGA,OAAO,IAAIrM,EAAE,CAACS,EAAE,GAAG,CAAN,CAAF,KAAe,KAAK,CAAzC;AAEA4L,MAAAA,OAAO,GAAG7L,EAAE,GAAG,CAAL,GACN,CAACZ,CAAC,KAAK,KAAK,CAAX,IAAgByM,OAAjB,MAA8B7L,EAAE,KAAK,CAAP,IAAYA,EAAE,MAAM9B,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAApB,CAA5C,CADM,GAENgB,CAAC,GAAGR,CAAJ,IAASQ,CAAC,KAAKR,CAAN,KAAYoB,EAAE,KAAK,CAAP,IAAY6L,OAAZ,IAAuB7L,EAAE,KAAK,CAAP,IAAYR,EAAE,CAACS,EAAE,GAAG,CAAN,CAAF,GAAa,CAAhD,IACrBD,EAAE,MAAM9B,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,CAAV,GAAc,CAApB,CADO,CAFb;AAKAoB,MAAAA,EAAE,CAAC5B,MAAH,GAAYqC,EAAZ;;AAEA,UAAI4L,OAAJ,EAAa;AAEX;AACA,eAAO,EAAErM,EAAE,CAAC,EAAES,EAAH,CAAJ,GAAaqF,IAAI,GAAG,CAA3B,GAA+B;AAC7B9F,UAAAA,EAAE,CAACS,EAAD,CAAF,GAAS,CAAT;;AACA,cAAI,CAACA,EAAL,EAAS;AACP,cAAE1B,CAAF;AACAiB,YAAAA,EAAE,CAACuH,OAAH,CAAW,CAAX;AACD;AACF;AACF,OAnCI,CAqCL;;;AACA,WAAKzE,GAAG,GAAG9C,EAAE,CAAC5B,MAAd,EAAsB,CAAC4B,EAAE,CAAC8C,GAAG,GAAG,CAAP,CAAzB,EAAoC,EAAEA,GAAtC,CAA0C,CAtCrC,CAwCL;;;AACA,WAAKlD,CAAC,GAAG,CAAJ,EAAO2I,GAAG,GAAG,EAAlB,EAAsB3I,CAAC,GAAGkD,GAA1B,EAA+BlD,CAAC,EAAhC,EAAoC2I,GAAG,IAAIpM,QAAQ,CAAC6F,MAAT,CAAgBhC,EAAE,CAACJ,CAAD,CAAlB,CAAP,CAzC/B,CA2CL;;;AACA,UAAI4M,KAAJ,EAAW;AACT,YAAI1J,GAAG,GAAG,CAAV,EAAa;AACX,cAAI0H,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,CAAhC,EAAmC;AACjC5K,YAAAA,CAAC,GAAG4K,OAAO,IAAI,EAAX,GAAgB,CAAhB,GAAoB,CAAxB;;AACA,iBAAK,EAAE1H,GAAP,EAAYA,GAAG,GAAGlD,CAAlB,EAAqBkD,GAAG,EAAxB,EAA4ByF,GAAG,IAAI,GAAP;;AAC5BvI,YAAAA,EAAE,GAAGsK,WAAW,CAAC/B,GAAD,EAAMzC,IAAN,EAAY0E,OAAZ,CAAhB;;AACA,iBAAK1H,GAAG,GAAG9C,EAAE,CAAC5B,MAAd,EAAsB,CAAC4B,EAAE,CAAC8C,GAAG,GAAG,CAAP,CAAzB,EAAoC,EAAEA,GAAtC,CAA0C,CAJT,CAMjC;;;AACA,iBAAKlD,CAAC,GAAG,CAAJ,EAAO2I,GAAG,GAAG,IAAlB,EAAwB3I,CAAC,GAAGkD,GAA5B,EAAiClD,CAAC,EAAlC,EAAsC2I,GAAG,IAAIpM,QAAQ,CAAC6F,MAAT,CAAgBhC,EAAE,CAACJ,CAAD,CAAlB,CAAP;AACvC,WARD,MAQO;AACL2I,YAAAA,GAAG,GAAGA,GAAG,CAACvG,MAAJ,CAAW,CAAX,IAAgB,GAAhB,GAAsBuG,GAAG,CAAC9G,KAAJ,CAAU,CAAV,CAA5B;AACD;AACF;;AAED8G,QAAAA,GAAG,GAAIA,GAAG,IAAIxJ,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,IAAlB,CAAH,GAA6BA,CAApC;AACD,OAhBD,MAgBO,IAAIA,CAAC,GAAG,CAAR,EAAW;AAChB,eAAO,EAAEA,CAAT,GAAawJ,GAAG,GAAG,MAAMA,GAAZ;;AACbA,QAAAA,GAAG,GAAG,OAAOA,GAAb;AACD,OAHM,MAGA;AACL,YAAI,EAAExJ,CAAF,GAAM+D,GAAV,EAAe,KAAK/D,CAAC,IAAI+D,GAAV,EAAe/D,CAAC,EAAhB,GAAsBwJ,GAAG,IAAI,GAAP,CAArC,KACK,IAAIxJ,CAAC,GAAG+D,GAAR,EAAayF,GAAG,GAAGA,GAAG,CAAC9G,KAAJ,CAAU,CAAV,EAAa1C,CAAb,IAAkB,GAAlB,GAAwBwJ,GAAG,CAAC9G,KAAJ,CAAU1C,CAAV,CAA9B;AACnB;AACF;;AAEDwJ,IAAAA,GAAG,GAAG,CAACiC,OAAO,IAAI,EAAX,GAAgB,IAAhB,GAAuBA,OAAO,IAAI,CAAX,GAAe,IAAf,GAAsBA,OAAO,IAAI,CAAX,GAAe,IAAf,GAAsB,EAApE,IAA0EjC,GAAhF;AACD;;AAED,SAAO7J,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,MAAM2J,GAAhB,GAAsBA,GAA7B;AACD,C,CAGD;;;AACA,SAASoE,QAAT,CAAkBlC,GAAlB,EAAuB3H,GAAvB,EAA4B;AAC1B,MAAI2H,GAAG,CAACrM,MAAJ,GAAa0E,GAAjB,EAAsB;AACpB2H,IAAAA,GAAG,CAACrM,MAAJ,GAAa0E,GAAb;AACA,WAAO,IAAP;AACD;AACF,C,CAGD;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASrE,GAAT,CAAaC,CAAb,EAAgB;AACd,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYD,GAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsF,IAAT,CAAcrF,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYqF,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,KAAT,CAAe3F,CAAf,EAAkB;AAChB,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAY2F,KAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgD,GAAT,CAAa3I,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAYmD,IAAZ,CAAiBlC,CAAjB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwE,IAAT,CAAczF,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYyF,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,KAAT,CAAe/F,CAAf,EAAkB;AAChB,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAY+F,KAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,IAAT,CAAcrG,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYqG,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,KAAT,CAAejG,CAAf,EAAkB;AAChB,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYiG,KAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2J,KAAT,CAAe3O,CAAf,EAAkBjB,CAAlB,EAAqB;AACnBiB,EAAAA,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAJ;AACAjB,EAAAA,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAJ;AACA,MAAIsC,CAAJ;AAAA,MACET,EAAE,GAAG,KAAKhE,SADZ;AAAA,MAEEiE,EAAE,GAAG,KAAKhE,QAFZ;AAAA,MAGEoI,GAAG,GAAGrE,EAAE,GAAG,CAHb,CAHmB,CAQnB;;AACA,MAAI,CAACZ,CAAC,CAACf,CAAH,IAAQ,CAACF,CAAC,CAACE,CAAf,EAAkB;AAChBoC,IAAAA,CAAC,GAAG,IAAI,IAAJ,CAAS1B,GAAT,CAAJ,CADgB,CAGlB;AACC,GAJD,MAIO,IAAI,CAACK,CAAC,CAACM,CAAH,IAAQ,CAACvB,CAAC,CAACuB,CAAf,EAAkB;AACvBe,IAAAA,CAAC,GAAGkD,KAAK,CAAC,IAAD,EAAOU,GAAP,EAAY,CAAZ,CAAL,CAAoBhD,KAApB,CAA0BlD,CAAC,CAACE,CAAF,GAAM,CAAN,GAAU,IAAV,GAAiB,IAA3C,CAAJ;AACAoC,IAAAA,CAAC,CAACpC,CAAF,GAAMe,CAAC,CAACf,CAAR,CAFuB,CAIzB;AACC,GALM,MAKA,IAAI,CAACF,CAAC,CAACuB,CAAH,IAAQN,CAAC,CAAC2B,MAAF,EAAZ,EAAwB;AAC7BN,IAAAA,CAAC,GAAGtC,CAAC,CAACE,CAAF,GAAM,CAAN,GAAUsF,KAAK,CAAC,IAAD,EAAO3D,EAAP,EAAWC,EAAX,CAAf,GAAgC,IAAI,IAAJ,CAAS,CAAT,CAApC;AACAQ,IAAAA,CAAC,CAACpC,CAAF,GAAMe,CAAC,CAACf,CAAR,CAF6B,CAI/B;AACC,GALM,MAKA,IAAI,CAACe,CAAC,CAACM,CAAH,IAAQvB,CAAC,CAAC4C,MAAF,EAAZ,EAAwB;AAC7BN,IAAAA,CAAC,GAAGkD,KAAK,CAAC,IAAD,EAAOU,GAAP,EAAY,CAAZ,CAAL,CAAoBhD,KAApB,CAA0B,GAA1B,CAAJ;AACAZ,IAAAA,CAAC,CAACpC,CAAF,GAAMe,CAAC,CAACf,CAAR,CAF6B,CAI/B;AACC,GALM,MAKA,IAAIF,CAAC,CAACE,CAAF,GAAM,CAAV,EAAa;AAClB,SAAKrC,SAAL,GAAiBqI,GAAjB;AACA,SAAKpI,QAAL,GAAgB,CAAhB;AACAwE,IAAAA,CAAC,GAAG,KAAK+D,IAAL,CAAUjD,MAAM,CAACnC,CAAD,EAAIjB,CAAJ,EAAOkG,GAAP,EAAY,CAAZ,CAAhB,CAAJ;AACAlG,IAAAA,CAAC,GAAGwF,KAAK,CAAC,IAAD,EAAOU,GAAP,EAAY,CAAZ,CAAT;AACA,SAAKrI,SAAL,GAAiBgE,EAAjB;AACA,SAAK/D,QAAL,GAAgBgE,EAAhB;AACAQ,IAAAA,CAAC,GAAGrB,CAAC,CAACf,CAAF,GAAM,CAAN,GAAUoC,CAAC,CAACoC,KAAF,CAAQ1E,CAAR,CAAV,GAAuBsC,CAAC,CAACa,IAAF,CAAOnD,CAAP,CAA3B;AACD,GARM,MAQA;AACLsC,IAAAA,CAAC,GAAG,KAAK+D,IAAL,CAAUjD,MAAM,CAACnC,CAAD,EAAIjB,CAAJ,EAAOkG,GAAP,EAAY,CAAZ,CAAhB,CAAJ;AACD;;AAED,SAAO5D,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,IAAT,CAAcnC,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYmC,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS/B,IAAT,CAAcJ,CAAd,EAAiB;AACf,SAAOG,QAAQ,CAACH,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAL,EAAkBA,CAAC,CAACK,CAAF,GAAM,CAAxB,EAA2B,CAA3B,CAAf;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,KAAT,CAAeP,CAAf,EAAkBQ,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,SAAO,IAAI,IAAJ,CAAST,CAAT,EAAYO,KAAZ,CAAkBC,GAAlB,EAAuBC,GAAvB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoP,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC,MAAMhP,KAAK,CAACtC,YAAY,GAAG,iBAAhB,CAAX;AACrC,MAAI0C,CAAJ;AAAA,MAAOkO,CAAP;AAAA,MAAUW,CAAV;AAAA,MACEC,WAAW,GAAGF,GAAG,CAACG,QAAJ,KAAiB,IADjC;AAAA,MAEEC,EAAE,GAAG,CACH,WADG,EACU,CADV,EACa1S,UADb,EAEH,UAFG,EAES,CAFT,EAEY,CAFZ,EAGH,UAHG,EAGS,CAACD,SAHV,EAGqB,CAHrB,EAIH,UAJG,EAIS,CAJT,EAIYA,SAJZ,EAKH,MALG,EAKK,CALL,EAKQA,SALR,EAMH,MANG,EAMK,CAACA,SANN,EAMiB,CANjB,EAOH,QAPG,EAOO,CAPP,EAOU,CAPV,CAFP;;AAYA,OAAK2D,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgP,EAAE,CAACxQ,MAAnB,EAA2BwB,CAAC,IAAI,CAAhC,EAAmC;AACjC,QAAIkO,CAAC,GAAGc,EAAE,CAAChP,CAAD,CAAN,EAAW8O,WAAf,EAA4B,KAAKZ,CAAL,IAAUxR,QAAQ,CAACwR,CAAD,CAAlB;;AAC5B,QAAI,CAACW,CAAC,GAAGD,GAAG,CAACV,CAAD,CAAR,MAAiB,KAAK,CAA1B,EAA6B;AAC3B,UAAIvQ,SAAS,CAACkR,CAAD,CAAT,KAAiBA,CAAjB,IAAsBA,CAAC,IAAIG,EAAE,CAAChP,CAAC,GAAG,CAAL,CAA7B,IAAwC6O,CAAC,IAAIG,EAAE,CAAChP,CAAC,GAAG,CAAL,CAAnD,EAA4D,KAAKkO,CAAL,IAAUW,CAAV,CAA5D,KACK,MAAMjP,KAAK,CAACrC,eAAe,GAAG2Q,CAAlB,GAAsB,IAAtB,GAA6BW,CAA9B,CAAX;AACN;AACF;;AAED,MAAIX,CAAC,GAAG,QAAJ,EAAcY,WAAlB,EAA+B,KAAKZ,CAAL,IAAUxR,QAAQ,CAACwR,CAAD,CAAlB;;AAC/B,MAAI,CAACW,CAAC,GAAGD,GAAG,CAACV,CAAD,CAAR,MAAiB,KAAK,CAA1B,EAA6B;AAC3B,QAAIW,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAK,KAApB,IAA6BA,CAAC,KAAK,CAAnC,IAAwCA,CAAC,KAAK,CAAlD,EAAqD;AACnD,UAAIA,CAAJ,EAAO;AACL,YAAI,OAAO3R,MAAP,IAAiB,WAAjB,IAAgCA,MAAhC,KACDA,MAAM,CAAC+R,eAAP,IAA0B/R,MAAM,CAACgS,WADhC,CAAJ,EACkD;AAChD,eAAKhB,CAAL,IAAU,IAAV;AACD,SAHD,MAGO;AACL,gBAAMtO,KAAK,CAACnC,iBAAD,CAAX;AACD;AACF,OAPD,MAOO;AACL,aAAKyQ,CAAL,IAAU,KAAV;AACD;AACF,KAXD,MAWO;AACL,YAAMtO,KAAK,CAACrC,eAAe,GAAG2Q,CAAlB,GAAsB,IAAtB,GAA6BW,CAA9B,CAAX;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASnO,GAAT,CAAa5B,CAAb,EAAgB;AACd,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAY4B,GAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuC,IAAT,CAAcnE,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYmE,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAASkM,KAAT,CAAeP,GAAf,EAAoB;AAClB,MAAI5O,CAAJ,EAAOkO,CAAP,EAAUc,EAAV;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,WAASX,OAAT,CAAiBQ,CAAjB,EAAoB;AAClB,QAAI1P,CAAJ;AAAA,QAAOa,CAAP;AAAA,QAAUsB,CAAV;AAAA,QACExC,CAAC,GAAG,IADN,CADkB,CAIlB;;AACA,QAAI,EAAEA,CAAC,YAAYuP,OAAf,CAAJ,EAA6B,OAAO,IAAIA,OAAJ,CAAYQ,CAAZ,CAAP,CALX,CAOlB;AACA;;AACA/P,IAAAA,CAAC,CAACC,WAAF,GAAgBsP,OAAhB,CATkB,CAWlB;;AACA,QAAIe,iBAAiB,CAACP,CAAD,CAArB,EAA0B;AACxB/P,MAAAA,CAAC,CAACE,CAAF,GAAM6P,CAAC,CAAC7P,CAAR;;AAEA,UAAI3B,QAAJ,EAAc;AACZ,YAAI,CAACwR,CAAC,CAACxO,CAAH,IAAQwO,CAAC,CAAC1P,CAAF,GAAMkP,OAAO,CAACpR,IAA1B,EAAgC;AAE9B;AACA6B,UAAAA,CAAC,CAACK,CAAF,GAAMO,GAAN;AACAZ,UAAAA,CAAC,CAACuB,CAAF,GAAM,IAAN;AACD,SALD,MAKO,IAAIwO,CAAC,CAAC1P,CAAF,GAAMkP,OAAO,CAACrR,IAAlB,EAAwB;AAE7B;AACA8B,UAAAA,CAAC,CAACK,CAAF,GAAM,CAAN;AACAL,UAAAA,CAAC,CAACuB,CAAF,GAAM,CAAC,CAAD,CAAN;AACD,SALM,MAKA;AACLvB,UAAAA,CAAC,CAACK,CAAF,GAAM0P,CAAC,CAAC1P,CAAR;AACAL,UAAAA,CAAC,CAACuB,CAAF,GAAMwO,CAAC,CAACxO,CAAF,CAAIwB,KAAJ,EAAN;AACD;AACF,OAfD,MAeO;AACL/C,QAAAA,CAAC,CAACK,CAAF,GAAM0P,CAAC,CAAC1P,CAAR;AACAL,QAAAA,CAAC,CAACuB,CAAF,GAAMwO,CAAC,CAACxO,CAAF,GAAMwO,CAAC,CAACxO,CAAF,CAAIwB,KAAJ,EAAN,GAAoBgN,CAAC,CAACxO,CAA5B;AACD;;AAED;AACD;;AAEDiB,IAAAA,CAAC,GAAG,OAAOuN,CAAX;;AAEA,QAAIvN,CAAC,KAAK,QAAV,EAAoB;AAClB,UAAIuN,CAAC,KAAK,CAAV,EAAa;AACX/P,QAAAA,CAAC,CAACE,CAAF,GAAM,IAAI6P,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAb,GAAiB,CAAvB;AACA/P,QAAAA,CAAC,CAACK,CAAF,GAAM,CAAN;AACAL,QAAAA,CAAC,CAACuB,CAAF,GAAM,CAAC,CAAD,CAAN;AACA;AACD;;AAED,UAAIwO,CAAC,GAAG,CAAR,EAAW;AACTA,QAAAA,CAAC,GAAG,CAACA,CAAL;AACA/P,QAAAA,CAAC,CAACE,CAAF,GAAM,CAAC,CAAP;AACD,OAHD,MAGO;AACLF,QAAAA,CAAC,CAACE,CAAF,GAAM,CAAN;AACD,OAbiB,CAelB;;;AACA,UAAI6P,CAAC,KAAK,CAAC,CAACA,CAAR,IAAaA,CAAC,GAAG,GAArB,EAA0B;AACxB,aAAK1P,CAAC,GAAG,CAAJ,EAAOa,CAAC,GAAG6O,CAAhB,EAAmB7O,CAAC,IAAI,EAAxB,EAA4BA,CAAC,IAAI,EAAjC,EAAqCb,CAAC;;AAEtC,YAAI9B,QAAJ,EAAc;AACZ,cAAI8B,CAAC,GAAGkP,OAAO,CAACpR,IAAhB,EAAsB;AACpB6B,YAAAA,CAAC,CAACK,CAAF,GAAMO,GAAN;AACAZ,YAAAA,CAAC,CAACuB,CAAF,GAAM,IAAN;AACD,WAHD,MAGO,IAAIlB,CAAC,GAAGkP,OAAO,CAACrR,IAAhB,EAAsB;AAC3B8B,YAAAA,CAAC,CAACK,CAAF,GAAM,CAAN;AACAL,YAAAA,CAAC,CAACuB,CAAF,GAAM,CAAC,CAAD,CAAN;AACD,WAHM,MAGA;AACLvB,YAAAA,CAAC,CAACK,CAAF,GAAMA,CAAN;AACAL,YAAAA,CAAC,CAACuB,CAAF,GAAM,CAACwO,CAAD,CAAN;AACD;AACF,SAXD,MAWO;AACL/P,UAAAA,CAAC,CAACK,CAAF,GAAMA,CAAN;AACAL,UAAAA,CAAC,CAACuB,CAAF,GAAM,CAACwO,CAAD,CAAN;AACD;;AAED,eAnBwB,CAqB1B;AACC,OAtBD,MAsBO,IAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACtB,YAAI,CAACA,CAAL,EAAQ/P,CAAC,CAACE,CAAF,GAAMU,GAAN;AACRZ,QAAAA,CAAC,CAACK,CAAF,GAAMO,GAAN;AACAZ,QAAAA,CAAC,CAACuB,CAAF,GAAM,IAAN;AACA;AACD;;AAED,aAAOqN,YAAY,CAAC5O,CAAD,EAAI+P,CAAC,CAAC9M,QAAF,EAAJ,CAAnB;AAED,KA/CD,MA+CO,IAAIT,CAAC,KAAK,QAAV,EAAoB;AACzB,YAAM1B,KAAK,CAACrC,eAAe,GAAGsR,CAAnB,CAAX;AACD,KAzFiB,CA2FlB;;;AACA,QAAI,CAAC7O,CAAC,GAAG6O,CAAC,CAACf,UAAF,CAAa,CAAb,CAAL,MAA0B,EAA9B,EAAkC;AAChCe,MAAAA,CAAC,GAAGA,CAAC,CAAChN,KAAF,CAAQ,CAAR,CAAJ;AACA/C,MAAAA,CAAC,CAACE,CAAF,GAAM,CAAC,CAAP;AACD,KAHD,MAGO;AACL;AACA,UAAIgB,CAAC,KAAK,EAAV,EAAc6O,CAAC,GAAGA,CAAC,CAAChN,KAAF,CAAQ,CAAR,CAAJ;AACd/C,MAAAA,CAAC,CAACE,CAAF,GAAM,CAAN;AACD;;AAED,WAAOb,SAAS,CAACgQ,IAAV,CAAeU,CAAf,IAAoBnB,YAAY,CAAC5O,CAAD,EAAI+P,CAAJ,CAAhC,GAAyCd,UAAU,CAACjP,CAAD,EAAI+P,CAAJ,CAA1D;AACD;;AAEDR,EAAAA,OAAO,CAACgB,SAAR,GAAoB3Q,CAApB;AAEA2P,EAAAA,OAAO,CAACiB,QAAR,GAAmB,CAAnB;AACAjB,EAAAA,OAAO,CAACkB,UAAR,GAAqB,CAArB;AACAlB,EAAAA,OAAO,CAACmB,UAAR,GAAqB,CAArB;AACAnB,EAAAA,OAAO,CAACoB,WAAR,GAAsB,CAAtB;AACApB,EAAAA,OAAO,CAACqB,aAAR,GAAwB,CAAxB;AACArB,EAAAA,OAAO,CAACsB,eAAR,GAA0B,CAA1B;AACAtB,EAAAA,OAAO,CAACuB,eAAR,GAA0B,CAA1B;AACAvB,EAAAA,OAAO,CAACwB,eAAR,GAA0B,CAA1B;AACAxB,EAAAA,OAAO,CAACyB,gBAAR,GAA2B,CAA3B;AACAzB,EAAAA,OAAO,CAAC0B,MAAR,GAAiB,CAAjB;AAEA1B,EAAAA,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAAC2B,GAAR,GAAcrB,MAA/B;AACAN,EAAAA,OAAO,CAACc,KAAR,GAAgBA,KAAhB;AACAd,EAAAA,OAAO,CAAClQ,SAAR,GAAoBiR,iBAApB;AAEAf,EAAAA,OAAO,CAACxP,GAAR,GAAcA,GAAd;AACAwP,EAAAA,OAAO,CAAClK,IAAR,GAAeA,IAAf;AACAkK,EAAAA,OAAO,CAAC5J,KAAR,GAAgBA,KAAhB,CArIkB,CAqIY;;AAC9B4J,EAAAA,OAAO,CAAC5G,GAAR,GAAcA,GAAd;AACA4G,EAAAA,OAAO,CAAC9J,IAAR,GAAeA,IAAf;AACA8J,EAAAA,OAAO,CAACxJ,KAAR,GAAgBA,KAAhB,CAxIkB,CAwIY;;AAC9BwJ,EAAAA,OAAO,CAAClJ,IAAR,GAAeA,IAAf;AACAkJ,EAAAA,OAAO,CAACtJ,KAAR,GAAgBA,KAAhB,CA1IkB,CA0IY;;AAC9BsJ,EAAAA,OAAO,CAACK,KAAR,GAAgBA,KAAhB;AACAL,EAAAA,OAAO,CAACpN,IAAR,GAAeA,IAAf,CA5IkB,CA4IY;;AAC9BoN,EAAAA,OAAO,CAACnP,IAAR,GAAeA,IAAf;AACAmP,EAAAA,OAAO,CAAChP,KAAR,GAAgBA,KAAhB;AACAgP,EAAAA,OAAO,CAAC3N,GAAR,GAAcA,GAAd;AACA2N,EAAAA,OAAO,CAACpL,IAAR,GAAeA,IAAf,CAhJkB,CAgJY;;AAC9BoL,EAAAA,OAAO,CAAC5L,GAAR,GAAcA,GAAd;AACA4L,EAAAA,OAAO,CAAC9G,GAAR,GAAcA,GAAd;AACA8G,EAAAA,OAAO,CAACxQ,KAAR,GAAgBA,KAAhB;AACAwQ,EAAAA,OAAO,CAAC4B,KAAR,GAAgBA,KAAhB,CApJkB,CAoJY;;AAC9B5B,EAAAA,OAAO,CAAC1J,EAAR,GAAaA,EAAb;AACA0J,EAAAA,OAAO,CAACpI,GAAR,GAAcA,GAAd;AACAoI,EAAAA,OAAO,CAAC6B,KAAR,GAAgBA,KAAhB,CAvJkB,CAuJY;;AAC9B7B,EAAAA,OAAO,CAAC8B,IAAR,GAAeA,IAAf,CAxJkB,CAwJY;;AAC9B9B,EAAAA,OAAO,CAAC9O,GAAR,GAAcA,GAAd;AACA8O,EAAAA,OAAO,CAAC/O,GAAR,GAAcA,GAAd;AACA+O,EAAAA,OAAO,CAACjH,GAAR,GAAcA,GAAd;AACAiH,EAAAA,OAAO,CAACjG,GAAR,GAAcA,GAAd;AACAiG,EAAAA,OAAO,CAACtQ,GAAR,GAAcA,GAAd;AACAsQ,EAAAA,OAAO,CAAC+B,MAAR,GAAiBA,MAAjB;AACA/B,EAAAA,OAAO,CAACvG,KAAR,GAAgBA,KAAhB;AACAuG,EAAAA,OAAO,CAAC/B,IAAR,GAAeA,IAAf,CAhKkB,CAgKY;;AAC9B+B,EAAAA,OAAO,CAACrG,GAAR,GAAcA,GAAd;AACAqG,EAAAA,OAAO,CAAC3K,IAAR,GAAeA,IAAf,CAlKkB,CAkKY;;AAC9B2K,EAAAA,OAAO,CAAC1K,IAAR,GAAeA,IAAf;AACA0K,EAAAA,OAAO,CAACzH,GAAR,GAAcA,GAAd;AACAyH,EAAAA,OAAO,CAACjB,GAAR,GAAcA,GAAd;AACAiB,EAAAA,OAAO,CAAClG,GAAR,GAAcA,GAAd;AACAkG,EAAAA,OAAO,CAACpK,IAAR,GAAeA,IAAf,CAvKkB,CAuKY;;AAC9BoK,EAAAA,OAAO,CAACpE,KAAR,GAAgBA,KAAhB,CAxKkB,CAwKY;;AAE9B,MAAI2E,GAAG,KAAK,KAAK,CAAjB,EAAoBA,GAAG,GAAG,EAAN;;AACpB,MAAIA,GAAJ,EAAS;AACP,QAAIA,GAAG,CAACG,QAAJ,KAAiB,IAArB,EAA2B;AACzBC,MAAAA,EAAE,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,UAA1B,EAAsC,UAAtC,EAAkD,MAAlD,EAA0D,MAA1D,EAAkE,QAAlE,EAA4E,QAA5E,CAAL;;AACA,WAAKhP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGgP,EAAE,CAACxQ,MAAnB,GAA4B,IAAI,CAACoQ,GAAG,CAACyB,cAAJ,CAAmBnC,CAAC,GAAGc,EAAE,CAAChP,CAAC,EAAF,CAAzB,CAAL,EAAsC4O,GAAG,CAACV,CAAD,CAAH,GAAS,KAAKA,CAAL,CAAT;AACnE;AACF;;AAEDG,EAAAA,OAAO,CAACM,MAAR,CAAeC,GAAf;AAEA,SAAOP,OAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS5L,GAAT,CAAa3D,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAY2D,GAAZ,CAAgB1C,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwH,GAAT,CAAazI,CAAb,EAAgB;AACd,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYyI,GAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS1J,KAAT,CAAeiB,CAAf,EAAkB;AAChB,SAAOG,QAAQ,CAACH,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAL,EAAkBA,CAAC,CAACK,CAAF,GAAM,CAAxB,EAA2B,CAA3B,CAAf;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8Q,KAAT,GAAiB;AACf,MAAIjQ,CAAJ;AAAA,MAAOmB,CAAP;AAAA,MACEG,CAAC,GAAG,IAAI,IAAJ,CAAS,CAAT,CADN;AAGAjE,EAAAA,QAAQ,GAAG,KAAX;;AAEA,OAAK2C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGsQ,SAAS,CAAC9R,MAA1B,GAAmC;AACjC2C,IAAAA,CAAC,GAAG,IAAI,IAAJ,CAASmP,SAAS,CAACtQ,CAAC,EAAF,CAAlB,CAAJ;;AACA,QAAI,CAACmB,CAAC,CAACd,CAAP,EAAU;AACR,UAAIc,CAAC,CAACnC,CAAN,EAAS;AACP3B,QAAAA,QAAQ,GAAG,IAAX;AACA,eAAO,IAAI,IAAJ,CAAS,IAAI,CAAb,CAAP;AACD;;AACDiE,MAAAA,CAAC,GAAGH,CAAJ;AACD,KAND,MAMO,IAAIG,CAAC,CAACjB,CAAN,EAAS;AACdiB,MAAAA,CAAC,GAAGA,CAAC,CAACW,IAAF,CAAOd,CAAC,CAACa,KAAF,CAAQb,CAAR,CAAP,CAAJ;AACD;AACF;;AAED9D,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAOiE,CAAC,CAACqC,IAAF,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;;;AACA,SAASyL,iBAAT,CAA2BR,GAA3B,EAAgC;AAC9B,SAAOA,GAAG,YAAYP,OAAf,IAA0BO,GAAG,IAAIA,GAAG,CAACjQ,WAAJ,KAAoBjB,GAArD,IAA4D,KAAnE;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiH,EAAT,CAAY7F,CAAZ,EAAe;AACb,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAY6F,EAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsB,GAAT,CAAanH,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAYmH,GAAZ,CAAgBlG,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoQ,IAAT,CAAcrR,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYmH,GAAZ,CAAgB,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiK,KAAT,CAAepR,CAAf,EAAkB;AAChB,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYmH,GAAZ,CAAgB,EAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS1G,GAAT,GAAe;AACb,SAAO0N,QAAQ,CAAC,IAAD,EAAOqD,SAAP,EAAkB,IAAlB,CAAf;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShR,GAAT,GAAe;AACb,SAAO2N,QAAQ,CAAC,IAAD,EAAOqD,SAAP,EAAkB,IAAlB,CAAf;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASlJ,GAAT,CAAatI,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAYsI,GAAZ,CAAgBrH,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqI,GAAT,CAAatJ,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAYsJ,GAAZ,CAAgBrI,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShC,GAAT,CAAae,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAYf,GAAZ,CAAgBgC,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqQ,MAAT,CAAgBvP,EAAhB,EAAoB;AAClB,MAAIR,CAAJ;AAAA,MAAOlB,CAAP;AAAA,MAAUK,CAAV;AAAA,MAAa2B,CAAb;AAAA,MACEnB,CAAC,GAAG,CADN;AAAA,MAEEoB,CAAC,GAAG,IAAI,IAAJ,CAAS,CAAT,CAFN;AAAA,MAGEqJ,EAAE,GAAG,EAHP;AAKA,MAAI5J,EAAE,KAAK,KAAK,CAAhB,EAAmBA,EAAE,GAAG,KAAKlE,SAAV,CAAnB,KACK+L,UAAU,CAAC7H,EAAD,EAAK,CAAL,EAAQvE,UAAR,CAAV;AAELkD,EAAAA,CAAC,GAAG5B,IAAI,CAACsB,IAAL,CAAU2B,EAAE,GAAGxC,QAAf,CAAJ;;AAEA,MAAI,CAAC,KAAKnB,MAAV,EAAkB;AAChB,WAAO8C,CAAC,GAAGR,CAAX,GAAeiL,EAAE,CAACzK,CAAC,EAAF,CAAF,GAAUpC,IAAI,CAACwS,MAAL,KAAgB,GAAhB,GAAsB,CAAhC,CADC,CAGlB;;AACC,GAJD,MAIO,IAAIlT,MAAM,CAAC+R,eAAX,EAA4B;AACjC5O,IAAAA,CAAC,GAAGnD,MAAM,CAAC+R,eAAP,CAAuB,IAAIsB,WAAJ,CAAgB/Q,CAAhB,CAAvB,CAAJ;;AAEA,WAAOQ,CAAC,GAAGR,CAAX,GAAe;AACb2B,MAAAA,CAAC,GAAGd,CAAC,CAACL,CAAD,CAAL,CADa,CAGb;AACA;;AACA,UAAImB,CAAC,IAAI,MAAT,EAAiB;AACfd,QAAAA,CAAC,CAACL,CAAD,CAAD,GAAO9C,MAAM,CAAC+R,eAAP,CAAuB,IAAIsB,WAAJ,CAAgB,CAAhB,CAAvB,EAA2C,CAA3C,CAAP;AACD,OAFD,MAEO;AAEL;AACA;AACA9F,QAAAA,EAAE,CAACzK,CAAC,EAAF,CAAF,GAAUmB,CAAC,GAAG,GAAd;AACD;AACF,KAhBgC,CAkBnC;;AACC,GAnBM,MAmBA,IAAIjE,MAAM,CAACgS,WAAX,EAAwB;AAE7B;AACA7O,IAAAA,CAAC,GAAGnD,MAAM,CAACgS,WAAP,CAAmB1P,CAAC,IAAI,CAAxB,CAAJ;;AAEA,WAAOQ,CAAC,GAAGR,CAAX,GAAe;AAEb;AACA2B,MAAAA,CAAC,GAAGd,CAAC,CAACL,CAAD,CAAD,IAAQK,CAAC,CAACL,CAAC,GAAG,CAAL,CAAD,IAAY,CAApB,KAA0BK,CAAC,CAACL,CAAC,GAAG,CAAL,CAAD,IAAY,EAAtC,KAA6C,CAACK,CAAC,CAACL,CAAC,GAAG,CAAL,CAAD,GAAW,IAAZ,KAAqB,EAAlE,CAAJ,CAHa,CAKb;;AACA,UAAImB,CAAC,IAAI,MAAT,EAAiB;AACfjE,QAAAA,MAAM,CAACgS,WAAP,CAAmB,CAAnB,EAAsBsB,IAAtB,CAA2BnQ,CAA3B,EAA8BL,CAA9B;AACD,OAFD,MAEO;AAEL;AACA;AACAyK,QAAAA,EAAE,CAACzD,IAAH,CAAQ7F,CAAC,GAAG,GAAZ;AACAnB,QAAAA,CAAC,IAAI,CAAL;AACD;AACF;;AAEDA,IAAAA,CAAC,GAAGR,CAAC,GAAG,CAAR;AACD,GAvBM,MAuBA;AACL,UAAMI,KAAK,CAACnC,iBAAD,CAAX;AACD;;AAED+B,EAAAA,CAAC,GAAGiL,EAAE,CAAC,EAAEzK,CAAH,CAAN;AACAa,EAAAA,EAAE,IAAIxC,QAAN,CA9DkB,CAgElB;;AACA,MAAImB,CAAC,IAAIqB,EAAT,EAAa;AACXM,IAAAA,CAAC,GAAGrD,OAAO,CAAC,EAAD,EAAKO,QAAQ,GAAGwC,EAAhB,CAAX;AACA4J,IAAAA,EAAE,CAACzK,CAAD,CAAF,GAAQ,CAACR,CAAC,GAAG2B,CAAJ,GAAQ,CAAT,IAAcA,CAAtB;AACD,GApEiB,CAsElB;;;AACA,SAAOsJ,EAAE,CAACzK,CAAD,CAAF,KAAU,CAAjB,EAAoBA,CAAC,EAArB,EAAyByK,EAAE,CAACxD,GAAH,GAvEP,CAyElB;;;AACA,MAAIjH,CAAC,GAAG,CAAR,EAAW;AACTb,IAAAA,CAAC,GAAG,CAAJ;AACAsL,IAAAA,EAAE,GAAG,CAAC,CAAD,CAAL;AACD,GAHD,MAGO;AACLtL,IAAAA,CAAC,GAAG,CAAC,CAAL,CADK,CAGL;;AACA,WAAOsL,EAAE,CAAC,CAAD,CAAF,KAAU,CAAjB,EAAoBtL,CAAC,IAAId,QAAzB,EAAmCoM,EAAE,CAACvD,KAAH,GAJ9B,CAML;;;AACA,SAAK1H,CAAC,GAAG,CAAJ,EAAO2B,CAAC,GAAGsJ,EAAE,CAAC,CAAD,CAAlB,EAAuBtJ,CAAC,IAAI,EAA5B,EAAgCA,CAAC,IAAI,EAArC,EAAyC3B,CAAC,GAPrC,CASL;;;AACA,QAAIA,CAAC,GAAGnB,QAAR,EAAkBc,CAAC,IAAId,QAAQ,GAAGmB,CAAhB;AACnB;;AAED4B,EAAAA,CAAC,CAACjC,CAAF,GAAMA,CAAN;AACAiC,EAAAA,CAAC,CAACf,CAAF,GAAMoK,EAAN;AAEA,SAAOrJ,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0G,KAAT,CAAehJ,CAAf,EAAkB;AAChB,SAAOG,QAAQ,CAACH,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAL,EAAkBA,CAAC,CAACK,CAAF,GAAM,CAAxB,EAA2B,KAAKvC,QAAhC,CAAf;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0P,IAAT,CAAcxN,CAAd,EAAiB;AACfA,EAAAA,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAJ;AACA,SAAOA,CAAC,CAACuB,CAAF,GAAOvB,CAAC,CAACuB,CAAF,CAAI,CAAJ,IAASvB,CAAC,CAACE,CAAX,GAAe,IAAIF,CAAC,CAACE,CAA5B,GAAiCF,CAAC,CAACE,CAAF,IAAOU,GAA/C;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsI,GAAT,CAAalJ,CAAb,EAAgB;AACd,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYkJ,GAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAStE,IAAT,CAAc5E,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAY4E,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,CAAc7E,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAY6E,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiD,GAAT,CAAa9H,CAAb,EAAgBiB,CAAhB,EAAmB;AACjB,SAAO,IAAI,IAAJ,CAASjB,CAAT,EAAY8H,GAAZ,CAAgB7G,CAAhB,CAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqN,GAAT,GAAe;AACb,MAAIpN,CAAC,GAAG,CAAR;AAAA,MACEkN,IAAI,GAAGoD,SADT;AAAA,MAEExR,CAAC,GAAG,IAAI,IAAJ,CAASoO,IAAI,CAAClN,CAAD,CAAb,CAFN;AAIA3C,EAAAA,QAAQ,GAAG,KAAX;;AACA,SAAOyB,CAAC,CAACE,CAAF,IAAO,EAAEgB,CAAF,GAAMkN,IAAI,CAAC1O,MAAzB,GAAkCM,CAAC,GAAGA,CAAC,CAACmD,IAAF,CAAOiL,IAAI,CAAClN,CAAD,CAAX,CAAJ;;AAClC3C,EAAAA,QAAQ,GAAG,IAAX;AAEA,SAAO4B,QAAQ,CAACH,CAAD,EAAI,KAAKnC,SAAT,EAAoB,KAAKC,QAAzB,CAAf;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuL,GAAT,CAAarJ,CAAb,EAAgB;AACd,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYqJ,GAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASlE,IAAT,CAAcnF,CAAd,EAAiB;AACf,SAAO,IAAI,IAAJ,CAASA,CAAT,EAAYmF,IAAZ,EAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgG,KAAT,CAAenL,CAAf,EAAkB;AAChB,SAAOG,QAAQ,CAACH,CAAC,GAAG,IAAI,IAAJ,CAASA,CAAT,CAAL,EAAkBA,CAAC,CAACK,CAAF,GAAM,CAAxB,EAA2B,CAA3B,CAAf;AACD;;AAGDT,CAAC,CAAC+R,MAAM,CAACC,GAAP,CAAW,4BAAX,CAAD,CAAD,GAA8ChS,CAAC,CAACqD,QAAhD;AACArD,CAAC,CAAC+R,MAAM,CAAC9R,WAAR,CAAD,GAAwB,SAAxB,C,CAEA;;AACA,OAAO,IAAI0P,OAAO,GAAG3P,CAAC,CAACK,WAAF,GAAgBoQ,KAAK,CAACzS,QAAD,CAAnC,C,CAEP;;AACAF,IAAI,GAAG,IAAI6R,OAAJ,CAAY7R,IAAZ,CAAP;AACAC,EAAE,GAAG,IAAI4R,OAAJ,CAAY5R,EAAZ,CAAL;AAEA,eAAe4R,OAAf","sourcesContent":["/*!\r\n *  decimal.js v10.4.3\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n"]},"metadata":{},"sourceType":"module"}