{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n\n  const handleClick = () => {\n    // axios.get('/file1.csv') // assuming data.csv is in the public directory\n    // .then(response => {\n    //   const csvData = response.data;\n    //   const parsedData = Papa.parse(csvData, { header: true }).data;\n    //   const matrixData = parsedData.map(row => Object.values(row).map(val => parseInt(val)));\n    //   const data = { matrix: { data: matrixData } };\n    //   console.log(data);\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\n\n    axios.post(`http://localhost:4000/estimate/${data}`) // .post('http://localhost:8000/estimate', data)\n    .then(response => {\n      var _response$data$Abilit, _response$data$Discri, _response$data$Diffic;\n\n      const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n      const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : []; // use the first element for all items\n\n      const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n      console.log(x, a[0], b[0]);\n\n      const sigmoid = (x, a, b) => {\n        const denominator = 1 + Math.exp(-a * (x - b));\n        return denominator === 0 ? NaN : 1 / denominator;\n      };\n\n      const y = x.map(val => sigmoid(val, a[18], b[18]));\n      console.log(y);\n      const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n      const sortedX = sortedData.map(pair => pair[0]);\n      const sortedY = sortedData.map(pair => pair[1]); // Calculate mean discrimination and difficulty for all exercises\n\n      const meanA = math.mean(response.data.Discrimination);\n      const meanB = math.mean(response.data.Difficulty); // Calculate item response probabilities for a range of ability values\n\n      const minAbility = Math.min(...response.data.Ability);\n      const maxAbility = Math.max(...response.data.Ability);\n      const range = maxAbility - minAbility;\n      const step = range / 100;\n      const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n      const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB)); // Plot the test characteristic curve\n\n      setPlotData({\n        icc: {\n          x: sortedX,\n          y: sortedY\n        },\n        tcc: {\n          x: abilityValues,\n          y: y2\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n    }); // })\n    // .catch(error => {\n    //   console.error(error);\n    // });\n  };\n\n  const handleChangeExercise = event => {\n    const exerciseIndex = parseInt(event.target.value);\n    setSelectedExercise(exerciseIndex);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExercise,\n        onChange: handleChangeExercise,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select an exercise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), response.data.Discrimination.map((_, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: `Exercise ${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this), selectedExercise !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Item Response Curve for Exercise \", selectedExercise + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.icc.x,\n            y: plotData.icc.y,\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 800,\n            height: 600,\n            title: `IRT Model - Exercise ${selectedExercise + 1}`,\n            xaxis: {\n              title: 'Latent trait'\n            },\n            yaxis: {\n              title: 'Item response'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Test Characteristic Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: plotData.tcc.x,\n          y: plotData.tcc.y,\n          type: 'scatter',\n          mode: 'lines',\n          line: {\n            color: 'black'\n          },\n          marker: {\n            symbol: 'circle',\n            size: 8\n          }\n        }],\n        layout: {\n          width: 550,\n          height: 600,\n          title: 'IRT Model - Test Characteristic Curve'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 3\n  }, this);\n}\n\n_s(IRT, \"EuueaKaXdjyjof6KksRLoA74k20=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","handleClick","data","post","then","response","Ability","a","Discrimination","b","Difficulty","console","log","sigmoid","denominator","Math","exp","NaN","map","val","sortedData","value","index","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","catch","error","handleChangeExercise","event","exerciseIndex","parseInt","target","setSelectedExercise","selectedExercise","_","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis","flex"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all)\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] }});\r\n\r\n  const handleClick = () => {\r\n    // axios.get('/file1.csv') // assuming data.csv is in the public directory\r\n      // .then(response => {\r\n      //   const csvData = response.data;\r\n      //   const parsedData = Papa.parse(csvData, { header: true }).data;\r\n      //   const matrixData = parsedData.map(row => Object.values(row).map(val => parseInt(val)));\r\n      //   const data = { matrix: { data: matrixData } };\r\n      //   console.log(data);\r\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\r\n        axios\r\n          .post(`http://localhost:4000/estimate/${data}`)\r\n          // .post('http://localhost:8000/estimate', data)\r\n          .then(response => {\r\n            const x = response.data.Ability ?? [];\r\n            const a = response.data.Discrimination ?? []; // use the first element for all items\r\n            const b = response.data.Difficulty ?? [];\r\n            console.log(x,a[0],b[0])\r\n            const sigmoid = (x, a, b) => {\r\n              const denominator = 1 + Math.exp(-a * (x - b));\r\n              return denominator === 0 ? NaN : 1 / denominator;\r\n            };\r\n            const y = x.map((val) => sigmoid(val, a[18], b[18]));\r\n            console.log(y)\r\n            const sortedData = x.map((value, index) => [value, y[index]])\r\n              .sort((a, b) => a[0] - b[0]);\r\n            const sortedX = sortedData.map(pair => pair[0]);\r\n            const sortedY = sortedData.map(pair => pair[1]);\r\n            // Calculate mean discrimination and difficulty for all exercises\r\n            const meanA = math.mean(response.data.Discrimination);\r\n            const meanB = math.mean(response.data.Difficulty);\r\n\r\n            // Calculate item response probabilities for a range of ability values\r\n            const minAbility = Math.min(...response.data.Ability);\r\n            const maxAbility = Math.max(...response.data.Ability);\r\n            const range = maxAbility - minAbility;\r\n            const step = range / 100;\r\n            const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n            const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n            // Plot the test characteristic curve\r\n            setPlotData({\r\n              icc: { x: sortedX, y: sortedY },\r\n              tcc: { x: abilityValues, y: y2 }\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      // })\r\n      // .catch(error => {\r\n      //   console.error(error);\r\n      // });\r\n      \r\n  };\r\n  const handleChangeExercise = (event) => {\r\n    const exerciseIndex = parseInt(event.target.value);\r\n    setSelectedExercise(exerciseIndex);\r\n  };\r\n return (\r\n  <div>\r\n    <div>\r\n      <select value={selectedExercise} onChange={handleChangeExercise}>\r\n        <option value=\"\">Select an exercise</option>\r\n        {response.data.Discrimination.map((_, index) => (\r\n          <option key={index} value={index}>{`Exercise ${index + 1}`}</option>\r\n        ))}\r\n      </select>\r\n      {selectedExercise !== null && (\r\n        <div>\r\n          <h2>Item Response Curve for Exercise {selectedExercise + 1}</h2>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.icc.x,\r\n                y: plotData.icc.y,\r\n                type: 'scatter',\r\n                mode: 'lines+markers',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              }\r\n            ]}\r\n            layout={{\r\n              width: 800,\r\n              height: 600,\r\n              title: `IRT Model - Exercise ${selectedExercise + 1}`,\r\n              xaxis: { title: 'Latent trait' },\r\n              yaxis: { title: 'Item response' }\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n      <div style={{ flex: 1 }}>\r\n        <div>Test Characteristic Curve</div>\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: plotData.tcc.x,\r\n              y: plotData.tcc.y,\r\n              type: 'scatter',\r\n              mode: 'lines',\r\n              line: { color: 'black' },\r\n              marker: { symbol: 'circle', size: 8 }\r\n            },\r\n          ]}\r\n          layout={{ width: 550, height: 600, title: 'IRT Model - Test Characteristic Curve' }}\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n);\r\n\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}