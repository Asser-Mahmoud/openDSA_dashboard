{"ast":null,"code":"import { isInteger } from '../../utils/number.js';\nimport { product } from '../../utils/product.js';\nexport function combinationsNumber(n, k) {\n  if (!isInteger(n) || n < 0) {\n    throw new TypeError('Positive integer value expected in function combinations');\n  }\n\n  if (!isInteger(k) || k < 0) {\n    throw new TypeError('Positive integer value expected in function combinations');\n  }\n\n  if (k > n) {\n    throw new TypeError('k must be less than or equal to n');\n  }\n\n  var nMinusk = n - k;\n  var answer = 1;\n  var firstnumerator = k < nMinusk ? nMinusk + 1 : k + 1;\n  var nextdivisor = 2;\n  var lastdivisor = k < nMinusk ? k : nMinusk; // balance multiplications and divisions to try to keep intermediate values\n  // in exact-integer range as long as possible\n\n  for (var nextnumerator = firstnumerator; nextnumerator <= n; ++nextnumerator) {\n    answer *= nextnumerator;\n\n    while (nextdivisor <= lastdivisor && answer % nextdivisor === 0) {\n      answer /= nextdivisor;\n      ++nextdivisor;\n    }\n  } // for big n, k, floating point may have caused weirdness in remainder\n\n\n  if (nextdivisor <= lastdivisor) {\n    answer /= product(nextdivisor, lastdivisor);\n  }\n\n  return answer;\n}\ncombinationsNumber.signature = 'number, number';","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/plain/number/combinations.js"],"names":["isInteger","product","combinationsNumber","n","k","TypeError","nMinusk","answer","firstnumerator","nextdivisor","lastdivisor","nextnumerator","signature"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAO,SAASC,kBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AACvC,MAAI,CAACJ,SAAS,CAACG,CAAD,CAAV,IAAiBA,CAAC,GAAG,CAAzB,EAA4B;AAC1B,UAAM,IAAIE,SAAJ,CAAc,0DAAd,CAAN;AACD;;AACD,MAAI,CAACL,SAAS,CAACI,CAAD,CAAV,IAAiBA,CAAC,GAAG,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,SAAJ,CAAc,0DAAd,CAAN;AACD;;AACD,MAAID,CAAC,GAAGD,CAAR,EAAW;AACT,UAAM,IAAIE,SAAJ,CAAc,mCAAd,CAAN;AACD;;AACD,MAAIC,OAAO,GAAGH,CAAC,GAAGC,CAAlB;AACA,MAAIG,MAAM,GAAG,CAAb;AACA,MAAIC,cAAc,GAAGJ,CAAC,GAAGE,OAAJ,GAAcA,OAAO,GAAG,CAAxB,GAA4BF,CAAC,GAAG,CAArD;AACA,MAAIK,WAAW,GAAG,CAAlB;AACA,MAAIC,WAAW,GAAGN,CAAC,GAAGE,OAAJ,GAAcF,CAAd,GAAkBE,OAApC,CAduC,CAevC;AACA;;AACA,OAAK,IAAIK,aAAa,GAAGH,cAAzB,EAAyCG,aAAa,IAAIR,CAA1D,EAA6D,EAAEQ,aAA/D,EAA8E;AAC5EJ,IAAAA,MAAM,IAAII,aAAV;;AACA,WAAOF,WAAW,IAAIC,WAAf,IAA8BH,MAAM,GAAGE,WAAT,KAAyB,CAA9D,EAAiE;AAC/DF,MAAAA,MAAM,IAAIE,WAAV;AACA,QAAEA,WAAF;AACD;AACF,GAvBsC,CAwBvC;;;AACA,MAAIA,WAAW,IAAIC,WAAnB,EAAgC;AAC9BH,IAAAA,MAAM,IAAIN,OAAO,CAACQ,WAAD,EAAcC,WAAd,CAAjB;AACD;;AACD,SAAOH,MAAP;AACD;AACDL,kBAAkB,CAACU,SAAnB,GAA+B,gBAA/B","sourcesContent":["import { isInteger } from '../../utils/number.js';\r\nimport { product } from '../../utils/product.js';\r\nexport function combinationsNumber(n, k) {\r\n  if (!isInteger(n) || n < 0) {\r\n    throw new TypeError('Positive integer value expected in function combinations');\r\n  }\r\n  if (!isInteger(k) || k < 0) {\r\n    throw new TypeError('Positive integer value expected in function combinations');\r\n  }\r\n  if (k > n) {\r\n    throw new TypeError('k must be less than or equal to n');\r\n  }\r\n  var nMinusk = n - k;\r\n  var answer = 1;\r\n  var firstnumerator = k < nMinusk ? nMinusk + 1 : k + 1;\r\n  var nextdivisor = 2;\r\n  var lastdivisor = k < nMinusk ? k : nMinusk;\r\n  // balance multiplications and divisions to try to keep intermediate values\r\n  // in exact-integer range as long as possible\r\n  for (var nextnumerator = firstnumerator; nextnumerator <= n; ++nextnumerator) {\r\n    answer *= nextnumerator;\r\n    while (nextdivisor <= lastdivisor && answer % nextdivisor === 0) {\r\n      answer /= nextdivisor;\r\n      ++nextdivisor;\r\n    }\r\n  }\r\n  // for big n, k, floating point may have caused weirdness in remainder\r\n  if (nextdivisor <= lastdivisor) {\r\n    answer /= product(nextdivisor, lastdivisor);\r\n  }\r\n  return answer;\r\n}\r\ncombinationsNumber.signature = 'number, number';"]},"metadata":{},"sourceType":"module"}