{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n  const [selectedExercise, setSelectedExercise] = useState(0);\n  const [discrimination, setDiscrimination] = useState([]);\n\n  const fetchData = () => {\n    const data = 'attemps_test.csv';\n    axios.post(`http://localhost:4000/estimate/${data}`).then(response => {\n      var _response$data$Discri, _response$data$Diffic, _response$data$Abilit;\n\n      const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : [];\n      const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n      setDiscrimination(a);\n      const selectedDiscrimination = a[selectedExercise];\n      const selectedDifficulty = b[selectedExercise];\n      const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n\n      const sigmoid = (x, a, b) => {\n        const denominator = 1 + Math.exp(-a * (x - b));\n        return denominator === 0 ? NaN : 1 / denominator;\n      };\n\n      const y = x.map(val => sigmoid(val, selectedDiscrimination, selectedDifficulty));\n      const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n      const sortedX = sortedData.map(pair => pair[0]);\n      const sortedY = sortedData.map(pair => pair[1]);\n      const meanA = math.mean(a);\n      const meanB = math.mean(b);\n      const minAbility = math.min(...x);\n      const maxAbility = math.max(...x);\n      const range = maxAbility - minAbility;\n      const step = range / 100;\n      const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n      const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB));\n      setPlotData({\n        icc: {\n          x: sortedX,\n          y: sortedY\n        },\n        tcc: {\n          x: abilityValues,\n          y: y2\n        }\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleExerciseChange = event => {\n    const exerciseIndex = parseInt(event.target.value);\n    setSelectedExercise(exerciseIndex);\n    fetchData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Estimate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedExercise,\n      onChange: handleExerciseChange,\n      children: discrimination.map((_, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index,\n        children: [\"Exercise \", index]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Item Response Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.icc.x,\n            y: plotData.icc.y,\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Item Response Curve',\n            xaxis: {\n              title: 'Latent Trait'\n            },\n            yaxis: {\n              title: 'Item Response'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Test Characteristic Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.tcc.x,\n            y: plotData.tcc.y,\n            type: 'scatter',\n            mode: 'lines',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Test Characteristic Curve'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n}\n\n_s(IRT, \"AgwEDRrDpaMubQpApRF/3CfrqqU=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","selectedExercise","setSelectedExercise","discrimination","setDiscrimination","fetchData","data","post","then","response","a","Discrimination","b","Difficulty","selectedDiscrimination","selectedDifficulty","Ability","sigmoid","denominator","Math","exp","NaN","map","val","sortedData","value","index","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","catch","error","console","handleExerciseChange","event","exerciseIndex","parseInt","target","handleClick","_","display","flex","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all)\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] }});\r\n  const [selectedExercise, setSelectedExercise] = useState(0);\r\n  const [discrimination, setDiscrimination] = useState([]);\r\n\r\n\r\n  const fetchData = () => {\r\n    const data = 'attemps_test.csv';\r\n    axios\r\n      .post(`http://localhost:4000/estimate/${data}`)\r\n      .then(response => {\r\n        const a = response.data.Discrimination ?? [];\r\n        const b = response.data.Difficulty ?? [];\r\n        setDiscrimination(a);\r\n        const selectedDiscrimination = a[selectedExercise];\r\n        const selectedDifficulty = b[selectedExercise];\r\n        const x = response.data.Ability ?? [];\r\n        const sigmoid = (x, a, b) => {\r\n          const denominator = 1 + Math.exp(-a * (x - b));\r\n          return denominator === 0 ? NaN : 1 / denominator;\r\n        };\r\n        const y = x.map(val => sigmoid(val, selectedDiscrimination, selectedDifficulty));\r\n        const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\r\n        const sortedX = sortedData.map(pair => pair[0]);\r\n        const sortedY = sortedData.map(pair => pair[1]);\r\n        const meanA = math.mean(a);\r\n        const meanB = math.mean(b);\r\n        const minAbility = math.min(...x);\r\n        const maxAbility = math.max(...x);\r\n        const range = maxAbility - minAbility;\r\n        const step = range / 100;\r\n        const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n        const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB));\r\n\r\n        setPlotData({\r\n          icc: { x: sortedX, y: sortedY },\r\n          tcc: { x: abilityValues, y: y2 }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  const handleExerciseChange = event => {\r\n    const exerciseIndex = parseInt(event.target.value);\r\n    setSelectedExercise(exerciseIndex);\r\n    fetchData();\r\n  };\r\n return (\r\n  <div>\r\n    <button onClick={handleClick}>Estimate</button>\r\n    <select value={selectedExercise} onChange={handleExerciseChange}>\r\n  {discrimination.map((_, index) => (\r\n    <option key={index} value={index}>\r\n      Exercise {index}\r\n    </option>\r\n  ))}\r\n</select>\r\n    <div style={{ display: 'flex' }}>\r\n      <div style={{ flex: 1 }}>\r\n        <div>Item Response Curve</div>\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: plotData.icc.x,\r\n              y: plotData.icc.y,\r\n              type: 'scatter',\r\n              mode: 'lines+markers',\r\n              line: { color: 'black' },\r\n              marker: { symbol: 'circle', size: 8 }\r\n            }\r\n          ]}\r\n          layout={{\r\n            width: 550,\r\n            height: 600,\r\n            title: 'IRT Model - Item Response Curve',\r\n            xaxis: { title: 'Latent Trait' },\r\n            yaxis: { title: 'Item Response' }\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ flex: 1 }}>\r\n        <div>Test Characteristic Curve</div>\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: plotData.tcc.x,\r\n              y: plotData.tcc.y,\r\n              type: 'scatter',\r\n              mode: 'lines',\r\n              line: { color: 'black' },\r\n              marker: { symbol: 'circle', size: 8 }\r\n            },\r\n          ]}\r\n          layout={{ width: 550, height: 600, title: 'IRT Model - Test Characteristic Curve' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}