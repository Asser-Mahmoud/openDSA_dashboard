{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'sqrt';\nvar dependencies = ['config', 'typed', 'Complex'];\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    Complex\n  } = _ref;\n  /**\r\n   * Calculate the square root of a value.\r\n   *\r\n   * For matrices, if you want the matrix square root of a square matrix,\r\n   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to\r\n   * a matrix M, use `math.map(M, math.sqrt)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sqrt(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sqrt(25)                // returns 5\r\n   *    math.square(5)               // returns 25\r\n   *    math.sqrt(-4)                // returns Complex 2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    square, multiply, cube, cbrt, sqrtm\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x\r\n   *            Value for which to calculate the square root.\r\n   * @return {number | BigNumber | Complex | Unit}\r\n   *            Returns the square root of `x`\r\n   */\n\n  return typed('sqrt', {\n    number: _sqrtNumber,\n    Complex: function Complex(x) {\n      return x.sqrt();\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.sqrt();\n      } else {\n        // negative value -> downgrade to number to do complex value computation\n        return _sqrtNumber(x.toNumber());\n      }\n    },\n    Unit: function Unit(x) {\n      // Someday will work for complex units when they are implemented\n      return x.pow(0.5);\n    }\n  });\n  /**\r\n   * Calculate sqrt for a number\r\n   * @param {number} x\r\n   * @returns {number | Complex} Returns the square root of x\r\n   * @private\r\n   */\n\n  function _sqrtNumber(x) {\n    if (isNaN(x)) {\n      return NaN;\n    } else if (x >= 0 || config.predictable) {\n      return Math.sqrt(x);\n    } else {\n      return new Complex(x, 0).sqrt();\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/sqrt.js"],"names":["factory","name","dependencies","createSqrt","_ref","config","typed","Complex","number","_sqrtNumber","x","sqrt","BigNumber","isNegative","predictable","toNumber","Unit","pow","isNaN","NaN","Math"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzE,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA;AAHE,MAIAH,IAJJ;AAKA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOE,KAAK,CAAC,MAAD,EAAS;AACnBE,IAAAA,MAAM,EAAEC,WADW;AAEnBF,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBG,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,IAAF,EAAP;AACD,KAJkB;AAKnBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,UAAI,CAACA,CAAC,CAACG,UAAF,EAAD,IAAmBR,MAAM,CAACS,WAA9B,EAA2C;AACzC,eAAOJ,CAAC,CAACC,IAAF,EAAP;AACD,OAFD,MAEO;AACL;AACA,eAAOF,WAAW,CAACC,CAAC,CAACK,QAAF,EAAD,CAAlB;AACD;AACF,KAZkB;AAanBC,IAAAA,IAAI,EAAE,SAASA,IAAT,CAAcN,CAAd,EAAiB;AACrB;AACA,aAAOA,CAAC,CAACO,GAAF,CAAM,GAAN,CAAP;AACD;AAhBkB,GAAT,CAAZ;AAmBA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASR,WAAT,CAAqBC,CAArB,EAAwB;AACtB,QAAIQ,KAAK,CAACR,CAAD,CAAT,EAAc;AACZ,aAAOS,GAAP;AACD,KAFD,MAEO,IAAIT,CAAC,IAAI,CAAL,IAAUL,MAAM,CAACS,WAArB,EAAkC;AACvC,aAAOM,IAAI,CAACT,IAAL,CAAUD,CAAV,CAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAIH,OAAJ,CAAYG,CAAZ,EAAe,CAAf,EAAkBC,IAAlB,EAAP;AACD;AACF;AACF,CAlE6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nvar name = 'sqrt';\r\nvar dependencies = ['config', 'typed', 'Complex'];\r\nexport var createSqrt = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    config,\r\n    typed,\r\n    Complex\r\n  } = _ref;\r\n  /**\r\n   * Calculate the square root of a value.\r\n   *\r\n   * For matrices, if you want the matrix square root of a square matrix,\r\n   * use the `sqrtm` function. If you wish to apply `sqrt` elementwise to\r\n   * a matrix M, use `math.map(M, math.sqrt)`.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sqrt(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.sqrt(25)                // returns 5\r\n   *    math.square(5)               // returns 25\r\n   *    math.sqrt(-4)                // returns Complex 2i\r\n   *\r\n   * See also:\r\n   *\r\n   *    square, multiply, cube, cbrt, sqrtm\r\n   *\r\n   * @param {number | BigNumber | Complex | Unit} x\r\n   *            Value for which to calculate the square root.\r\n   * @return {number | BigNumber | Complex | Unit}\r\n   *            Returns the square root of `x`\r\n   */\r\n  return typed('sqrt', {\r\n    number: _sqrtNumber,\r\n    Complex: function Complex(x) {\r\n      return x.sqrt();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      if (!x.isNegative() || config.predictable) {\r\n        return x.sqrt();\r\n      } else {\r\n        // negative value -> downgrade to number to do complex value computation\r\n        return _sqrtNumber(x.toNumber());\r\n      }\r\n    },\r\n    Unit: function Unit(x) {\r\n      // Someday will work for complex units when they are implemented\r\n      return x.pow(0.5);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Calculate sqrt for a number\r\n   * @param {number} x\r\n   * @returns {number | Complex} Returns the square root of x\r\n   * @private\r\n   */\r\n  function _sqrtNumber(x) {\r\n    if (isNaN(x)) {\r\n      return NaN;\r\n    } else if (x >= 0 || config.predictable) {\r\n      return Math.sqrt(x);\r\n    } else {\r\n      return new Complex(x, 0).sqrt();\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}