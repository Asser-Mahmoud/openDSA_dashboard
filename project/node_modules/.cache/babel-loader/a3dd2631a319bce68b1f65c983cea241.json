{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { addNumber } from '../../plain/number/index.js';\nvar name = 'addScalar';\nvar dependencies = ['typed'];\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Add two scalar values, `x + y`.\r\n   * This function is meant for internal use: it is used by the public function\r\n   * `add`\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\r\n   * @private\r\n   */\n\n  return typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\n      if (x.value === null || x.value === undefined) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null || y.value === undefined) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      var res = x.clone();\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    })\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/addScalar.js"],"names":["factory","addNumber","name","dependencies","createAddScalar","_ref","typed","ComplexComplex","x","y","add","BigNumberBigNumber","plus","FractionFraction","referToSelf","self","value","undefined","Error","equalBase","res","clone","find","valueType","fixPrefix"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC9E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBD,SADD;AAEjB,wBAAoB,SAASM,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AACD,KAJgB;AAKjB,4BAAwB,SAASE,kBAAT,CAA4BH,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOD,CAAC,CAACI,IAAF,CAAOH,CAAP,CAAP;AACD,KAPgB;AAQjB,0BAAsB,SAASI,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AACD,KAVgB;AAWjB,kBAAcH,KAAK,CAACQ,WAAN,CAAkBC,IAAI,IAAI,CAACP,CAAD,EAAIC,CAAJ,KAAU;AAChD,UAAID,CAAC,CAACQ,KAAF,KAAY,IAAZ,IAAoBR,CAAC,CAACQ,KAAF,KAAYC,SAApC,EAA+C;AAC7C,cAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,UAAIT,CAAC,CAACO,KAAF,KAAY,IAAZ,IAAoBP,CAAC,CAACO,KAAF,KAAYC,SAApC,EAA+C;AAC7C,cAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,UAAI,CAACV,CAAC,CAACW,SAAF,CAAYV,CAAZ,CAAL,EAAqB,MAAM,IAAIS,KAAJ,CAAU,oBAAV,CAAN;AACrB,UAAIE,GAAG,GAAGZ,CAAC,CAACa,KAAF,EAAV;AACAD,MAAAA,GAAG,CAACJ,KAAJ,GAAYV,KAAK,CAACgB,IAAN,CAAWP,IAAX,EAAiB,CAACK,GAAG,CAACG,SAAJ,EAAD,EAAkBd,CAAC,CAACc,SAAF,EAAlB,CAAjB,EAAmDH,GAAG,CAACJ,KAAvD,EAA8DP,CAAC,CAACO,KAAhE,CAAZ;AACAI,MAAAA,GAAG,CAACI,SAAJ,GAAgB,KAAhB;AACA,aAAOJ,GAAP;AACD,KAZa;AAXG,GAAP,CAAZ;AAyBD,CAzCkD,CAA5C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { addNumber } from '../../plain/number/index.js';\r\nvar name = 'addScalar';\r\nvar dependencies = ['typed'];\r\nexport var createAddScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Add two scalar values, `x + y`.\r\n   * This function is meant for internal use: it is used by the public function\r\n   * `add`\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\r\n   * @private\r\n   */\r\n  return typed(name, {\r\n    'number, number': addNumber,\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return x.add(y);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return x.plus(y);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.add(y);\r\n    },\r\n    'Unit, Unit': typed.referToSelf(self => (x, y) => {\r\n      if (x.value === null || x.value === undefined) {\r\n        throw new Error('Parameter x contains a unit with undefined value');\r\n      }\r\n      if (y.value === null || y.value === undefined) {\r\n        throw new Error('Parameter y contains a unit with undefined value');\r\n      }\r\n      if (!x.equalBase(y)) throw new Error('Units do not match');\r\n      var res = x.clone();\r\n      res.value = typed.find(self, [res.valueType(), y.valueType()])(res.value, y.value);\r\n      res.fixPrefix = false;\r\n      return res;\r\n    })\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}