{"ast":null,"code":"/**\r\n * StringTokenizer.ts class for EJ2-PDF\r\n * Utility class for working with strings.\r\n * @private\r\n */\nvar StringTokenizer =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\r\n   * Initializes a new instance of the `StringTokenizer` class.\r\n   * @private\r\n   */\n  function StringTokenizer(textValue) {\n    /**\r\n     * Current `position`.\r\n     * @private\r\n     */\n    this.currentPosition = 0;\n\n    if (textValue == null) {\n      throw new Error('ArgumentNullException:text');\n    }\n\n    this.text = textValue;\n  }\n\n  Object.defineProperty(StringTokenizer.prototype, \"length\", {\n    // Properties\n\n    /**\r\n     * Gets text `length`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StringTokenizer.prototype, \"end\", {\n    get: function () {\n      return this.currentPosition === this.text.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StringTokenizer.prototype, \"position\", {\n    /**\r\n     * Gets or sets the position.\r\n     * @private\r\n     */\n    get: function () {\n      return this.currentPosition;\n    },\n    set: function (value) {\n      this.currentPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StringTokenizer.getCharsCount = function (text, symbols) {\n    if (typeof symbols === 'string') {\n      if (text == null) {\n        throw new Error('ArgumentNullException:wholeText');\n      }\n\n      var numSymbols = 0;\n      var curIndex = 0;\n\n      for (;;) {\n        curIndex = text.indexOf(symbols, curIndex);\n\n        if (curIndex === -1) {\n          break;\n        } else {\n          numSymbols++;\n          curIndex++;\n        }\n      }\n\n      return numSymbols;\n    } else {\n      if (text == null) {\n        throw new Error('ArgumentNullException:text');\n      }\n\n      if (symbols == null) {\n        throw new Error('ArgumentNullException:symbols');\n      }\n\n      var count = 0;\n\n      for (var i = 0, len = text.length; i < len; i++) {\n        var ch = text[i];\n\n        if (this.contains(symbols, ch)) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  };\n  /**\r\n   * Reads line of the text.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.prototype.readLine = function () {\n    var pos = this.currentPosition;\n\n    while (pos < this.length) {\n      var ch = this.text[pos];\n\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          {\n            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos + 1;\n\n            if (ch === '\\r' && this.currentPosition < this.length && this.text[this.currentPosition] === '\\n') {\n              this.currentPosition++;\n            }\n\n            return text;\n          }\n      }\n\n      pos++;\n    } // The remaining text.\n\n\n    if (pos > this.currentPosition) {\n      var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n      this.currentPosition = pos;\n      return text2;\n    }\n\n    return null;\n  };\n  /**\r\n   * Reads line of the text.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.prototype.peekLine = function () {\n    var pos = this.currentPosition;\n    var line = this.readLine();\n    this.currentPosition = pos;\n    return line;\n  };\n  /**\r\n   * Reads a word from the text.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.prototype.readWord = function () {\n    var pos = this.currentPosition;\n\n    while (pos < this.length) {\n      var ch = this.text[pos];\n\n      switch (ch) {\n        case '\\r':\n        case '\\n':\n          var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\n          this.currentPosition = pos + 1;\n\n          if (ch === '\\r' && this.currentPosition < this.length && this.text[this.currentPosition] === '\\n') {\n            this.currentPosition++;\n          }\n\n          return textValue;\n\n        case ' ':\n        case '\\t':\n          {\n            if (pos === this.currentPosition) {\n              pos++;\n            }\n\n            var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\n            this.currentPosition = pos;\n            return text;\n          }\n      }\n\n      pos++;\n    } // The remaining text.\n\n\n    if (pos > this.currentPosition) {\n      var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\n      this.currentPosition = pos;\n      return text2;\n    }\n\n    return null;\n  };\n  /**\r\n   * Peeks a word from the text.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.prototype.peekWord = function () {\n    var pos = this.currentPosition;\n    var word = this.readWord();\n    this.currentPosition = pos;\n    return word;\n  };\n\n  StringTokenizer.prototype.read = function (count) {\n    if (typeof count === 'undefined') {\n      var ch = '0';\n\n      if (!this.end) {\n        ch = this.text[this.currentPosition];\n        this.currentPosition++;\n      }\n\n      return ch;\n    } else {\n      var num = 0;\n      var builder = '';\n\n      while (!this.end && num < count) {\n        var ch = this.read();\n        builder = builder + ch;\n        num++;\n      }\n\n      return builder;\n    }\n  };\n  /**\r\n   * Peeks char form the data.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.prototype.peek = function () {\n    var ch = '0';\n\n    if (!this.end) {\n      ch = this.text[this.currentPosition];\n    }\n\n    return ch;\n  };\n  /**\r\n   * Closes a reader.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.prototype.close = function () {\n    this.text = null;\n  };\n\n  StringTokenizer.prototype.readToEnd = function () {\n    var text;\n\n    if (this.currentPosition === 0) {\n      text = this.text;\n    } else {\n      text = this.text.substr(this.currentPosition, this.length - this.currentPosition);\n    }\n\n    this.currentPosition = this.length;\n    return text;\n  }; //Implementation\n\n  /**\r\n   * Checks whether array contains a symbol.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.contains = function (array, symbol) {\n    var contains = false;\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] === symbol) {\n        contains = true;\n        break;\n      }\n    }\n\n    return contains;\n  }; // Constants\n\n  /**\r\n   * `Whitespace` symbol.\r\n   * @private\r\n   */\n\n\n  StringTokenizer.whiteSpace = ' ';\n  /**\r\n   * `tab` symbol.\r\n   * @private\r\n   */\n\n  StringTokenizer.tab = '\\t';\n  /**\r\n   * Array of `spaces`.\r\n   * @private\r\n   */\n\n  StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\n  /**\r\n   * `Pattern` for WhiteSpace.\r\n   * @private\r\n   */\n\n  StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\n  return StringTokenizer;\n}();\n\nexport { StringTokenizer };","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/string-tokenizer.js"],"names":["StringTokenizer","textValue","currentPosition","Error","text","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","getCharsCount","symbols","numSymbols","curIndex","indexOf","count","i","len","ch","contains","readLine","pos","substr","text2","peekLine","line","readWord","peekWord","word","read","end","num","builder","peek","close","readToEnd","array","symbol","whiteSpace","tab","spaces","whiteSpacePattern"],"mappings":"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","sourcesContent":["/**\r\n * StringTokenizer.ts class for EJ2-PDF\r\n * Utility class for working with strings.\r\n * @private\r\n */\r\nvar StringTokenizer = /** @class */ (function () {\r\n    // Constructors\r\n    /**\r\n     * Initializes a new instance of the `StringTokenizer` class.\r\n     * @private\r\n     */\r\n    function StringTokenizer(textValue) {\r\n        /**\r\n         * Current `position`.\r\n         * @private\r\n         */\r\n        this.currentPosition = 0;\r\n        if (textValue == null) {\r\n            throw new Error('ArgumentNullException:text');\r\n        }\r\n        this.text = textValue;\r\n    }\r\n    Object.defineProperty(StringTokenizer.prototype, \"length\", {\r\n        // Properties\r\n        /**\r\n         * Gets text `length`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.text.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StringTokenizer.prototype, \"end\", {\r\n        get: function () {\r\n            return (this.currentPosition === this.text.length);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(StringTokenizer.prototype, \"position\", {\r\n        /**\r\n         * Gets or sets the position.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.currentPosition;\r\n        },\r\n        set: function (value) {\r\n            this.currentPosition = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    StringTokenizer.getCharsCount = function (text, symbols) {\r\n        if (typeof symbols === 'string') {\r\n            if (text == null) {\r\n                throw new Error('ArgumentNullException:wholeText');\r\n            }\r\n            var numSymbols = 0;\r\n            var curIndex = 0;\r\n            for (;;) {\r\n                curIndex = text.indexOf(symbols, curIndex);\r\n                if (curIndex === -1) {\r\n                    break;\r\n                }\r\n                else {\r\n                    numSymbols++;\r\n                    curIndex++;\r\n                }\r\n            }\r\n            return numSymbols;\r\n        }\r\n        else {\r\n            if (text == null) {\r\n                throw new Error('ArgumentNullException:text');\r\n            }\r\n            if (symbols == null) {\r\n                throw new Error('ArgumentNullException:symbols');\r\n            }\r\n            var count = 0;\r\n            for (var i = 0, len = text.length; i < len; i++) {\r\n                var ch = text[i];\r\n                if (this.contains(symbols, ch)) {\r\n                    count++;\r\n                }\r\n            }\r\n            return count;\r\n        }\r\n    };\r\n    /**\r\n     * Reads line of the text.\r\n     * @private\r\n     */\r\n    StringTokenizer.prototype.readLine = function () {\r\n        var pos = this.currentPosition;\r\n        while (pos < this.length) {\r\n            var ch = this.text[pos];\r\n            switch (ch) {\r\n                case '\\r':\r\n                case '\\n': {\r\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\r\n                    this.currentPosition = pos + 1;\r\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\r\n                        this.currentPosition++;\r\n                    }\r\n                    return text;\r\n                }\r\n            }\r\n            pos++;\r\n        }\r\n        // The remaining text.\r\n        if (pos > this.currentPosition) {\r\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\r\n            this.currentPosition = pos;\r\n            return text2;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Reads line of the text.\r\n     * @private\r\n     */\r\n    StringTokenizer.prototype.peekLine = function () {\r\n        var pos = this.currentPosition;\r\n        var line = this.readLine();\r\n        this.currentPosition = pos;\r\n        return line;\r\n    };\r\n    /**\r\n     * Reads a word from the text.\r\n     * @private\r\n     */\r\n    StringTokenizer.prototype.readWord = function () {\r\n        var pos = this.currentPosition;\r\n        while (pos < this.length) {\r\n            var ch = this.text[pos];\r\n            switch (ch) {\r\n                case '\\r':\r\n                case '\\n':\r\n                    var textValue = this.text.substr(this.currentPosition, pos - this.currentPosition);\r\n                    this.currentPosition = pos + 1;\r\n                    if (((ch === '\\r') && (this.currentPosition < this.length)) && (this.text[this.currentPosition] === '\\n')) {\r\n                        this.currentPosition++;\r\n                    }\r\n                    return textValue;\r\n                case ' ':\r\n                case '\\t': {\r\n                    if (pos === this.currentPosition) {\r\n                        pos++;\r\n                    }\r\n                    var text = this.text.substr(this.currentPosition, pos - this.currentPosition);\r\n                    this.currentPosition = pos;\r\n                    return text;\r\n                }\r\n            }\r\n            pos++;\r\n        }\r\n        // The remaining text.\r\n        if (pos > this.currentPosition) {\r\n            var text2 = this.text.substr(this.currentPosition, pos - this.currentPosition);\r\n            this.currentPosition = pos;\r\n            return text2;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Peeks a word from the text.\r\n     * @private\r\n     */\r\n    StringTokenizer.prototype.peekWord = function () {\r\n        var pos = this.currentPosition;\r\n        var word = this.readWord();\r\n        this.currentPosition = pos;\r\n        return word;\r\n    };\r\n    StringTokenizer.prototype.read = function (count) {\r\n        if (typeof count === 'undefined') {\r\n            var ch = '0';\r\n            if (!this.end) {\r\n                ch = this.text[this.currentPosition];\r\n                this.currentPosition++;\r\n            }\r\n            return ch;\r\n        }\r\n        else {\r\n            var num = 0;\r\n            var builder = '';\r\n            while (!this.end && num < count) {\r\n                var ch = this.read();\r\n                builder = builder + ch;\r\n                num++;\r\n            }\r\n            return builder;\r\n        }\r\n    };\r\n    /**\r\n     * Peeks char form the data.\r\n     * @private\r\n     */\r\n    StringTokenizer.prototype.peek = function () {\r\n        var ch = '0';\r\n        if (!this.end) {\r\n            ch = this.text[this.currentPosition];\r\n        }\r\n        return ch;\r\n    };\r\n    /**\r\n     * Closes a reader.\r\n     * @private\r\n     */\r\n    StringTokenizer.prototype.close = function () {\r\n        this.text = null;\r\n    };\r\n    StringTokenizer.prototype.readToEnd = function () {\r\n        var text;\r\n        if (this.currentPosition === 0) {\r\n            text = this.text;\r\n        }\r\n        else {\r\n            text = this.text.substr(this.currentPosition, this.length - this.currentPosition);\r\n        }\r\n        this.currentPosition = this.length;\r\n        return text;\r\n    };\r\n    //Implementation\r\n    /**\r\n     * Checks whether array contains a symbol.\r\n     * @private\r\n     */\r\n    StringTokenizer.contains = function (array, symbol) {\r\n        var contains = false;\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (array[i] === symbol) {\r\n                contains = true;\r\n                break;\r\n            }\r\n        }\r\n        return contains;\r\n    };\r\n    // Constants\r\n    /**\r\n     * `Whitespace` symbol.\r\n     * @private\r\n     */\r\n    StringTokenizer.whiteSpace = ' ';\r\n    /**\r\n     * `tab` symbol.\r\n     * @private\r\n     */\r\n    StringTokenizer.tab = '\\t';\r\n    /**\r\n     * Array of `spaces`.\r\n     * @private\r\n     */\r\n    StringTokenizer.spaces = [StringTokenizer.whiteSpace, StringTokenizer.tab];\r\n    /**\r\n     * `Pattern` for WhiteSpace.\r\n     * @private\r\n     */\r\n    StringTokenizer.whiteSpacePattern = '^[ \\t]+$';\r\n    return StringTokenizer;\r\n}());\r\nexport { StringTokenizer };\r\n"]},"metadata":{},"sourceType":"module"}