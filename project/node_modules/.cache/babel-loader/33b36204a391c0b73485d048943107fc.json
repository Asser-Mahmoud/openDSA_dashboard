{"ast":null,"code":"import { hasOwnProperty } from './object.js';\n/**\r\n * Get a property of a plain object\r\n * Throws an error in case the object is not a plain object or the\r\n * property is not defined on the object itself\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @return {*} Returns the property value when safe\r\n */\n\nfunction getSafeProperty(object, prop) {\n  // only allow getting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    return object[prop];\n  }\n\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n/**\r\n * Set a property on a plain object.\r\n * Throws an error in case the object is not a plain object or the\r\n * property would override an inherited property like .constructor or .toString\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @param {*} value\r\n * @return {*} Returns the value\r\n */\n// TODO: merge this function into access.js?\n\n\nfunction setSafeProperty(object, prop, value) {\n  // only allow setting safe properties of a plain object\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\n    object[prop] = value;\n    return value;\n  }\n\n  throw new Error('No access to property \"' + prop + '\"');\n}\n\nfunction getSafeProperties(object) {\n  return Object.keys(object).filter(prop => hasOwnProperty(object, prop));\n}\n\nfunction hasSafeProperty(object, prop) {\n  return prop in object;\n}\n/**\r\n * Test whether a property is safe to use for an object.\r\n * For example .toString and .constructor are not safe\r\n * @param {string} prop\r\n * @return {boolean} Returns true when safe\r\n */\n\n\nfunction isSafeProperty(object, prop) {\n  if (!object || typeof object !== 'object') {\n    return false;\n  } // SAFE: whitelisted\n  // e.g length\n\n\n  if (hasOwnProperty(safeNativeProperties, prop)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (prop in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (prop in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n/**\r\n * Validate whether a method is safe.\r\n * Throws an error when that's not the case.\r\n * @param {Object} object\r\n * @param {string} method\r\n */\n// TODO: merge this function into assign.js?\n\n\nfunction validateSafeMethod(object, method) {\n  if (!isSafeMethod(object, method)) {\n    throw new Error('No access to method \"' + method + '\"');\n  }\n}\n/**\r\n * Check whether a method is safe.\r\n * Throws an error when that's not the case (for example for `constructor`).\r\n * @param {Object} object\r\n * @param {string} method\r\n * @return {boolean} Returns true when safe, false otherwise\r\n */\n\n\nfunction isSafeMethod(object, method) {\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\n    return false;\n  } // UNSAFE: ghosted\n  // e.g overridden toString\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\n\n\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\n    return false;\n  } // SAFE: whitelisted\n  // e.g toString\n\n\n  if (hasOwnProperty(safeNativeMethods, method)) {\n    return true;\n  } // UNSAFE: inherited from Object prototype\n  // e.g constructor\n\n\n  if (method in Object.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Object.prototype is a root object\n    return false;\n  } // UNSAFE: inherited from Function prototype\n  // e.g call, apply\n\n\n  if (method in Function.prototype) {\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\n    // which is inconsistent on root prototypes. It is safe\n    // here because Function.prototype is a root object\n    return false;\n  }\n\n  return true;\n}\n\nfunction isPlainObject(object) {\n  return typeof object === 'object' && object && object.constructor === Object;\n}\n\nvar safeNativeProperties = {\n  length: true,\n  name: true\n};\nvar safeNativeMethods = {\n  toString: true,\n  valueOf: true,\n  toLocaleString: true\n};\nexport { getSafeProperty };\nexport { setSafeProperty };\nexport { isSafeProperty };\nexport { hasSafeProperty };\nexport { getSafeProperties };\nexport { validateSafeMethod };\nexport { isSafeMethod };\nexport { isPlainObject };","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/utils/customs.js"],"names":["hasOwnProperty","getSafeProperty","object","prop","isPlainObject","isSafeProperty","isSafeMethod","Error","setSafeProperty","value","getSafeProperties","Object","keys","filter","hasSafeProperty","safeNativeProperties","prototype","Function","validateSafeMethod","method","undefined","getPrototypeOf","safeNativeMethods","constructor","length","name","toString","valueOf","toLocaleString"],"mappings":"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","sourcesContent":["import { hasOwnProperty } from './object.js';\r\n\r\n/**\r\n * Get a property of a plain object\r\n * Throws an error in case the object is not a plain object or the\r\n * property is not defined on the object itself\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @return {*} Returns the property value when safe\r\n */\r\nfunction getSafeProperty(object, prop) {\r\n  // only allow getting safe properties of a plain object\r\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\r\n    return object[prop];\r\n  }\r\n  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {\r\n    throw new Error('Cannot access method \"' + prop + '\" as a property');\r\n  }\r\n  throw new Error('No access to property \"' + prop + '\"');\r\n}\r\n\r\n/**\r\n * Set a property on a plain object.\r\n * Throws an error in case the object is not a plain object or the\r\n * property would override an inherited property like .constructor or .toString\r\n * @param {Object} object\r\n * @param {string} prop\r\n * @param {*} value\r\n * @return {*} Returns the value\r\n */\r\n// TODO: merge this function into access.js?\r\nfunction setSafeProperty(object, prop, value) {\r\n  // only allow setting safe properties of a plain object\r\n  if (isPlainObject(object) && isSafeProperty(object, prop)) {\r\n    object[prop] = value;\r\n    return value;\r\n  }\r\n  throw new Error('No access to property \"' + prop + '\"');\r\n}\r\nfunction getSafeProperties(object) {\r\n  return Object.keys(object).filter(prop => hasOwnProperty(object, prop));\r\n}\r\nfunction hasSafeProperty(object, prop) {\r\n  return prop in object;\r\n}\r\n\r\n/**\r\n * Test whether a property is safe to use for an object.\r\n * For example .toString and .constructor are not safe\r\n * @param {string} prop\r\n * @return {boolean} Returns true when safe\r\n */\r\nfunction isSafeProperty(object, prop) {\r\n  if (!object || typeof object !== 'object') {\r\n    return false;\r\n  }\r\n  // SAFE: whitelisted\r\n  // e.g length\r\n  if (hasOwnProperty(safeNativeProperties, prop)) {\r\n    return true;\r\n  }\r\n  // UNSAFE: inherited from Object prototype\r\n  // e.g constructor\r\n  if (prop in Object.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Object.prototype is a root object\r\n    return false;\r\n  }\r\n  // UNSAFE: inherited from Function prototype\r\n  // e.g call, apply\r\n  if (prop in Function.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Function.prototype is a root object\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Validate whether a method is safe.\r\n * Throws an error when that's not the case.\r\n * @param {Object} object\r\n * @param {string} method\r\n */\r\n// TODO: merge this function into assign.js?\r\nfunction validateSafeMethod(object, method) {\r\n  if (!isSafeMethod(object, method)) {\r\n    throw new Error('No access to method \"' + method + '\"');\r\n  }\r\n}\r\n\r\n/**\r\n * Check whether a method is safe.\r\n * Throws an error when that's not the case (for example for `constructor`).\r\n * @param {Object} object\r\n * @param {string} method\r\n * @return {boolean} Returns true when safe, false otherwise\r\n */\r\nfunction isSafeMethod(object, method) {\r\n  if (object === null || object === undefined || typeof object[method] !== 'function') {\r\n    return false;\r\n  }\r\n  // UNSAFE: ghosted\r\n  // e.g overridden toString\r\n  // Note that IE10 doesn't support __proto__ and we can't do this check there.\r\n  if (hasOwnProperty(object, method) && Object.getPrototypeOf && method in Object.getPrototypeOf(object)) {\r\n    return false;\r\n  }\r\n  // SAFE: whitelisted\r\n  // e.g toString\r\n  if (hasOwnProperty(safeNativeMethods, method)) {\r\n    return true;\r\n  }\r\n  // UNSAFE: inherited from Object prototype\r\n  // e.g constructor\r\n  if (method in Object.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Object.prototype is a root object\r\n    return false;\r\n  }\r\n  // UNSAFE: inherited from Function prototype\r\n  // e.g call, apply\r\n  if (method in Function.prototype) {\r\n    // 'in' is used instead of hasOwnProperty for nodejs v0.10\r\n    // which is inconsistent on root prototypes. It is safe\r\n    // here because Function.prototype is a root object\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\nfunction isPlainObject(object) {\r\n  return typeof object === 'object' && object && object.constructor === Object;\r\n}\r\nvar safeNativeProperties = {\r\n  length: true,\r\n  name: true\r\n};\r\nvar safeNativeMethods = {\r\n  toString: true,\r\n  valueOf: true,\r\n  toLocaleString: true\r\n};\r\nexport { getSafeProperty };\r\nexport { setSafeProperty };\r\nexport { isSafeProperty };\r\nexport { hasSafeProperty };\r\nexport { getSafeProperties };\r\nexport { validateSafeMethod };\r\nexport { isSafeMethod };\r\nexport { isPlainObject };"]},"metadata":{},"sourceType":"module"}