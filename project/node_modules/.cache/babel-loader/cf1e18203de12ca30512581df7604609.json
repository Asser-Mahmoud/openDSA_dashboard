{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { unaryMinusNumber } from '../../plain/number/index.js';\nvar name = 'unaryMinus';\nvar dependencies = ['typed'];\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Inverse the sign of a value, apply a unary minus operation.\r\n   *\r\n   * For matrices, the function is evaluated element wise. Boolean values and\r\n   * strings will be converted to a number. For complex numbers, both real and\r\n   * complex value are inverted.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryMinus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryMinus(3.5)      // returns -3.5\r\n   *    math.unaryMinus(-4.2)     // returns 4.2\r\n   *\r\n   * See also:\r\n   *\r\n   *    add, subtract, unaryPlus\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\r\n   */\n\n  return typed(name, {\n    number: unaryMinusNumber,\n    'Complex | BigNumber | Fraction': x => x.neg(),\n    Unit: typed.referToSelf(self => x => {\n      var res = x.clone();\n      res.value = typed.find(self, res.valueType())(x.value);\n      return res;\n    }),\n    // deep map collection, skip zeros since unaryMinus(0) = 0\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true)) // TODO: add support for string\n\n  });\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/unaryMinus.js"],"names":["factory","deepMap","unaryMinusNumber","name","dependencies","createUnaryMinus","_ref","typed","number","x","neg","Unit","referToSelf","self","res","clone","value","find","valueType"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,IAAIC,IAAI,GAAG,YAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,gBAAgB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC/E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,gBADS;AAEjB,sCAAkCO,CAAC,IAAIA,CAAC,CAACC,GAAF,EAFtB;AAGjBC,IAAAA,IAAI,EAAEJ,KAAK,CAACK,WAAN,CAAkBC,IAAI,IAAIJ,CAAC,IAAI;AACnC,UAAIK,GAAG,GAAGL,CAAC,CAACM,KAAF,EAAV;AACAD,MAAAA,GAAG,CAACE,KAAJ,GAAYT,KAAK,CAACU,IAAN,CAAWJ,IAAX,EAAiBC,GAAG,CAACI,SAAJ,EAAjB,EAAkCT,CAAC,CAACO,KAApC,CAAZ;AACA,aAAOF,GAAP;AACD,KAJK,CAHW;AAQjB;AACA,sBAAkBP,KAAK,CAACK,WAAN,CAAkBC,IAAI,IAAIJ,CAAC,IAAIR,OAAO,CAACQ,CAAD,EAAII,IAAJ,EAAU,IAAV,CAAtC,CATD,CAWjB;;AAXiB,GAAP,CAAZ;AAaD,CAxCmD,CAA7C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { unaryMinusNumber } from '../../plain/number/index.js';\r\nvar name = 'unaryMinus';\r\nvar dependencies = ['typed'];\r\nexport var createUnaryMinus = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Inverse the sign of a value, apply a unary minus operation.\r\n   *\r\n   * For matrices, the function is evaluated element wise. Boolean values and\r\n   * strings will be converted to a number. For complex numbers, both real and\r\n   * complex value are inverted.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.unaryMinus(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.unaryMinus(3.5)      // returns -3.5\r\n   *    math.unaryMinus(-4.2)     // returns 4.2\r\n   *\r\n   * See also:\r\n   *\r\n   *    add, subtract, unaryPlus\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\r\n   */\r\n  return typed(name, {\r\n    number: unaryMinusNumber,\r\n    'Complex | BigNumber | Fraction': x => x.neg(),\r\n    Unit: typed.referToSelf(self => x => {\r\n      var res = x.clone();\r\n      res.value = typed.find(self, res.valueType())(x.value);\r\n      return res;\r\n    }),\r\n    // deep map collection, skip zeros since unaryMinus(0) = 0\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self, true))\r\n\r\n    // TODO: add support for string\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}