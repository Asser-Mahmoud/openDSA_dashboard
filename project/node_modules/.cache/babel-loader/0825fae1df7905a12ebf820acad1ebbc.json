{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { multiplyNumber } from '../../plain/number/index.js';\nvar name = 'multiplyScalar';\nvar dependencies = ['typed'];\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Multiply two scalar values, `x * y`.\r\n   * This function is meant for internal use: it is used by the public function\r\n   * `multiply`\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\r\n   * @private\r\n   */\n\n  return typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/multiplyScalar.js"],"names":["factory","multiplyNumber","name","dependencies","createMultiplyScalar","_ref","typed","ComplexComplex","x","y","mul","BigNumberBigNumber","times","FractionFraction","multiply"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,IAAIC,IAAI,GAAG,gBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACnF,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAAC,gBAAD,EAAmB;AAC7B,sBAAkBL,cADW;AAE7B,wBAAoB,SAASM,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AACD,KAJ4B;AAK7B,4BAAwB,SAASE,kBAAT,CAA4BH,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOD,CAAC,CAACI,KAAF,CAAQH,CAAR,CAAP;AACD,KAP4B;AAQ7B,0BAAsB,SAASI,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAOD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAAP;AACD,KAV4B;AAW7B,qDAAiD,CAACD,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACK,QAAF,CAAWN,CAAX,CAX9B;AAY7B,4DAAwD,CAACA,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACM,QAAF,CAAWL,CAAX;AAZrC,GAAnB,CAAZ;AAcD,CA9BuD,CAAjD","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { multiplyNumber } from '../../plain/number/index.js';\r\nvar name = 'multiplyScalar';\r\nvar dependencies = ['typed'];\r\nexport var createMultiplyScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Multiply two scalar values, `x * y`.\r\n   * This function is meant for internal use: it is used by the public function\r\n   * `multiply`\r\n   *\r\n   * This function does not support collections (Array or Matrix).\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\r\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\r\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\r\n   * @private\r\n   */\r\n  return typed('multiplyScalar', {\r\n    'number, number': multiplyNumber,\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return x.mul(y);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return x.times(y);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.mul(y);\r\n    },\r\n    'number | Fraction | BigNumber | Complex, Unit': (x, y) => y.multiply(x),\r\n    'Unit, number | Fraction | BigNumber | Complex | Unit': (x, y) => x.multiply(y)\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}