{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfFont } from './pdf-font';\nimport { PdfSubSuperScript } from './enum';\nimport { PdfArray } from './../../primitives/pdf-array';\n/**\r\n * `Metrics` of the font.\r\n * @private\r\n */\n\nvar PdfFontMetrics =\n/** @class */\nfunction () {\n  function PdfFontMetrics() {\n    /**\r\n     * `Line gap`.\r\n     * @private\r\n     */\n    this.lineGap = 0;\n  } //  Public methods\n\n  /**\r\n   * Returns `ascent` taking into consideration font`s size.\r\n   * @private\r\n   */\n\n\n  PdfFontMetrics.prototype.getAscent = function (format) {\n    var returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);\n    return returnValue;\n  };\n  /**\r\n   * Returns `descent` taking into consideration font`s size.\r\n   * @private\r\n   */\n\n\n  PdfFontMetrics.prototype.getDescent = function (format) {\n    var returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);\n    return returnValue;\n  };\n  /**\r\n   * Returns `Line gap` taking into consideration font`s size.\r\n   * @private\r\n   */\n\n\n  PdfFontMetrics.prototype.getLineGap = function (format) {\n    var returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);\n    return returnValue;\n  };\n  /**\r\n   * Returns `height` taking into consideration font`s size.\r\n   * @private\r\n   */\n\n\n  PdfFontMetrics.prototype.getHeight = function (format) {\n    var height;\n    var clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];\n    var clearTypeFontCollection = [];\n\n    for (var index = 0; index < clearTypeFonts.length; index++) {\n      var font = clearTypeFonts[index];\n      clearTypeFontCollection.push(font);\n    }\n\n    if (this.getDescent(format) < 0) {\n      // if ((clearTypeFontCollection.indexOf(this.name.toLowerCase()) !== -1) && !this.isUnicodeFont) {\n      //     height = (this.GetAscent(format) - this.GetDescent(format) - this.GetLineGap(format));\n      // } else {\n      height = this.getAscent(format) - this.getDescent(format) + this.getLineGap(format); // }\n    } else {\n      height = this.getAscent(format) + this.getDescent(format) + this.getLineGap(format);\n    }\n\n    return height;\n  };\n  /**\r\n   * Calculates `size` of the font depending on the subscript/superscript value.\r\n   * @private\r\n   */\n\n\n  PdfFontMetrics.prototype.getSize = function (format) {\n    var size = this.size;\n\n    if (format != null) {\n      switch (format.subSuperScript) {\n        case PdfSubSuperScript.SubScript:\n          size /= this.subScriptSizeFactor;\n          break;\n\n        case PdfSubSuperScript.SuperScript:\n          size /= this.superscriptSizeFactor;\n          break;\n      }\n    }\n\n    return size;\n  };\n  /**\r\n   * `Clones` the metrics.\r\n   * @private\r\n   */\n\n\n  PdfFontMetrics.prototype.clone = function () {\n    var metrics = this;\n    metrics.widthTable = WidthTable.clone();\n    return metrics;\n  };\n\n  Object.defineProperty(PdfFontMetrics.prototype, \"widthTable\", {\n    //  Properies\n\n    /**\r\n     * Gets or sets the `width table`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.internalWidthTable;\n    },\n    set: function (value) {\n      this.internalWidthTable = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfFontMetrics;\n}();\n\nexport { PdfFontMetrics };\n\nvar WidthTable =\n/** @class */\nfunction () {\n  function WidthTable() {}\n  /**\r\n   * Static `clones` this instance of the WidthTable class.\r\n   * @private\r\n   */\n\n\n  WidthTable.clone = function () {\n    return null;\n  };\n\n  return WidthTable;\n}();\n\nexport { WidthTable };\n\nvar StandardWidthTable =\n/** @class */\nfunction (_super) {\n  __extends(StandardWidthTable, _super); // Constructors\n\n  /**\r\n   * Initializes a new instance of the `StandardWidthTable` class.\r\n   * @private\r\n   */\n\n\n  function StandardWidthTable(widths) {\n    var _this = _super.call(this) || this;\n\n    if (widths == null) {\n      throw new Error('ArgumentNullException:widths');\n    }\n\n    _this.widths = widths;\n    return _this;\n  } //Properties\n\n  /**\r\n   * Gets the `32 bit number` at the specified index.\r\n   * @private\r\n   */\n\n\n  StandardWidthTable.prototype.items = function (index) {\n    if (index < 0 || index >= this.widths.length) {\n      throw new Error('ArgumentOutOfRangeException:index, The character is not supported by the font.');\n    }\n\n    var result = this.widths[index];\n    return result;\n  };\n\n  Object.defineProperty(StandardWidthTable.prototype, \"length\", {\n    /**\r\n     * Gets the `length` of the internal array.\r\n     * @private\r\n     */\n    get: function () {\n      return this.widths.length;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Overrides\n\n  /**\r\n   * `Clones` this instance of the WidthTable class.\r\n   * @private\r\n   */\n\n  StandardWidthTable.prototype.clone = function () {\n    var swt = this;\n    swt.widths = this.widths;\n    return swt;\n  };\n  /**\r\n   * Converts width table to a `PDF array`.\r\n   * @private\r\n   */\n\n\n  StandardWidthTable.prototype.toArray = function () {\n    var arr = new PdfArray(this.widths);\n    return arr;\n  };\n\n  return StandardWidthTable;\n}(WidthTable);\n\nexport { StandardWidthTable };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/fonts/pdf-font-metrics.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfFont","PdfSubSuperScript","PdfArray","PdfFontMetrics","lineGap","getAscent","format","returnValue","ascent","charSizeMultiplier","getSize","getDescent","descent","getLineGap","getHeight","height","clearTypeFonts","clearTypeFontCollection","index","length","font","push","size","subSuperScript","SubScript","subScriptSizeFactor","SuperScript","superscriptSizeFactor","clone","metrics","widthTable","WidthTable","defineProperty","get","internalWidthTable","set","value","enumerable","configurable","StandardWidthTable","_super","widths","_this","call","Error","items","result","swt","toArray","arr"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,SAASI,OAAT,QAAwB,YAAxB;AACA,SAASC,iBAAT,QAAkC,QAAlC;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,GAA0B;AACtB;AACR;AACA;AACA;AACQ,SAAKC,OAAL,GAAe,CAAf;AACH,GAP2C,CAQ5C;;AACA;AACJ;AACA;AACA;;;AACID,EAAAA,cAAc,CAACL,SAAf,CAAyBO,SAAzB,GAAqC,UAAUC,MAAV,EAAkB;AACnD,QAAIC,WAAW,GAAG,KAAKC,MAAL,GAAcR,OAAO,CAACS,kBAAtB,GAA2C,KAAKC,OAAL,CAAaJ,MAAb,CAA7D;AACA,WAAOC,WAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACIJ,EAAAA,cAAc,CAACL,SAAf,CAAyBa,UAAzB,GAAsC,UAAUL,MAAV,EAAkB;AACpD,QAAIC,WAAW,GAAG,KAAKK,OAAL,GAAeZ,OAAO,CAACS,kBAAvB,GAA4C,KAAKC,OAAL,CAAaJ,MAAb,CAA9D;AACA,WAAOC,WAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACIJ,EAAAA,cAAc,CAACL,SAAf,CAAyBe,UAAzB,GAAsC,UAAUP,MAAV,EAAkB;AACpD,QAAIC,WAAW,GAAG,KAAKH,OAAL,GAAeJ,OAAO,CAACS,kBAAvB,GAA4C,KAAKC,OAAL,CAAaJ,MAAb,CAA9D;AACA,WAAOC,WAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACIJ,EAAAA,cAAc,CAACL,SAAf,CAAyBgB,SAAzB,GAAqC,UAAUR,MAAV,EAAkB;AACnD,QAAIS,MAAJ;AACA,QAAIC,cAAc,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,YAAvB,EAAqC,QAArC,EAA+C,YAA/C,CAArB;AACA,QAAIC,uBAAuB,GAAG,EAA9B;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,cAAc,CAACG,MAA3C,EAAmDD,KAAK,EAAxD,EAA4D;AACxD,UAAIE,IAAI,GAAGJ,cAAc,CAACE,KAAD,CAAzB;AACAD,MAAAA,uBAAuB,CAACI,IAAxB,CAA6BD,IAA7B;AACH;;AACD,QAAI,KAAKT,UAAL,CAAgBL,MAAhB,IAA0B,CAA9B,EAAiC;AAC7B;AACA;AACA;AACAS,MAAAA,MAAM,GAAI,KAAKV,SAAL,CAAeC,MAAf,IAAyB,KAAKK,UAAL,CAAgBL,MAAhB,CAAzB,GAAmD,KAAKO,UAAL,CAAgBP,MAAhB,CAA7D,CAJ6B,CAK7B;AACH,KAND,MAOK;AACDS,MAAAA,MAAM,GAAI,KAAKV,SAAL,CAAeC,MAAf,IAAyB,KAAKK,UAAL,CAAgBL,MAAhB,CAAzB,GAAmD,KAAKO,UAAL,CAAgBP,MAAhB,CAA7D;AACH;;AACD,WAAOS,MAAP;AACH,GAnBD;AAoBA;AACJ;AACA;AACA;;;AACIZ,EAAAA,cAAc,CAACL,SAAf,CAAyBY,OAAzB,GAAmC,UAAUJ,MAAV,EAAkB;AACjD,QAAIgB,IAAI,GAAG,KAAKA,IAAhB;;AACA,QAAIhB,MAAM,IAAI,IAAd,EAAoB;AAChB,cAAQA,MAAM,CAACiB,cAAf;AACI,aAAKtB,iBAAiB,CAACuB,SAAvB;AACIF,UAAAA,IAAI,IAAI,KAAKG,mBAAb;AACA;;AACJ,aAAKxB,iBAAiB,CAACyB,WAAvB;AACIJ,UAAAA,IAAI,IAAI,KAAKK,qBAAb;AACA;AANR;AAQH;;AACD,WAAOL,IAAP;AACH,GAbD;AAcA;AACJ;AACA;AACA;;;AACInB,EAAAA,cAAc,CAACL,SAAf,CAAyB8B,KAAzB,GAAiC,YAAY;AACzC,QAAIC,OAAO,GAAG,IAAd;AACAA,IAAAA,OAAO,CAACC,UAAR,GAAqBC,UAAU,CAACH,KAAX,EAArB;AACA,WAAOC,OAAP;AACH,GAJD;;AAKAvC,EAAAA,MAAM,CAAC0C,cAAP,CAAsB7B,cAAc,CAACL,SAArC,EAAgD,YAAhD,EAA8D;AAC1D;;AACA;AACR;AACA;AACA;AACQmC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,kBAAZ;AACH,KARyD;AAS1DC,IAAAA,GAAG,EAAE,UAAUC,KAAV,EAAiB;AAClB,WAAKF,kBAAL,GAA0BE,KAA1B;AACH,KAXyD;AAY1DC,IAAAA,UAAU,EAAE,IAZ8C;AAa1DC,IAAAA,YAAY,EAAE;AAb4C,GAA9D;AAeA,SAAOnC,cAAP;AACH,CApGmC,EAApC;;AAqGA,SAASA,cAAT;;AACA,IAAI4B,UAAU;AAAG;AAAe,YAAY;AACxC,WAASA,UAAT,GAAsB,CACrB;AACD;AACJ;AACA;AACA;;;AACIA,EAAAA,UAAU,CAACH,KAAX,GAAmB,YAAY;AAC3B,WAAO,IAAP;AACH,GAFD;;AAGA,SAAOG,UAAP;AACH,CAX+B,EAAhC;;AAYA,SAASA,UAAT;;AACA,IAAIQ,kBAAkB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACtDtD,EAAAA,SAAS,CAACqD,kBAAD,EAAqBC,MAArB,CAAT,CADsD,CAEtD;;AACA;AACJ;AACA;AACA;;;AACI,WAASD,kBAAT,CAA4BE,MAA5B,EAAoC;AAChC,QAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;AACA,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAChB,YAAM,IAAIG,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACDF,IAAAA,KAAK,CAACD,MAAN,GAAeA,MAAf;AACA,WAAOC,KAAP;AACH,GAdqD,CAetD;;AACA;AACJ;AACA;AACA;;;AACIH,EAAAA,kBAAkB,CAACzC,SAAnB,CAA6B+C,KAA7B,GAAqC,UAAU3B,KAAV,EAAiB;AAClD,QAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,KAAKuB,MAAL,CAAYtB,MAAtC,EAA8C;AAC1C,YAAM,IAAIyB,KAAJ,CAAU,gFAAV,CAAN;AACH;;AACD,QAAIE,MAAM,GAAG,KAAKL,MAAL,CAAYvB,KAAZ,CAAb;AACA,WAAO4B,MAAP;AACH,GAND;;AAOAxD,EAAAA,MAAM,CAAC0C,cAAP,CAAsBO,kBAAkB,CAACzC,SAAzC,EAAoD,QAApD,EAA8D;AAC1D;AACR;AACA;AACA;AACQmC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKQ,MAAL,CAAYtB,MAAnB;AACH,KAPyD;AAQ1DkB,IAAAA,UAAU,EAAE,IAR8C;AAS1DC,IAAAA,YAAY,EAAE;AAT4C,GAA9D,EA3BsD,CAsCtD;;AACA;AACJ;AACA;AACA;;AACIC,EAAAA,kBAAkB,CAACzC,SAAnB,CAA6B8B,KAA7B,GAAqC,YAAY;AAC7C,QAAImB,GAAG,GAAG,IAAV;AACAA,IAAAA,GAAG,CAACN,MAAJ,GAAa,KAAKA,MAAlB;AACA,WAAOM,GAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;;;AACIR,EAAAA,kBAAkB,CAACzC,SAAnB,CAA6BkD,OAA7B,GAAuC,YAAY;AAC/C,QAAIC,GAAG,GAAG,IAAI/C,QAAJ,CAAa,KAAKuC,MAAlB,CAAV;AACA,WAAOQ,GAAP;AACH,GAHD;;AAIA,SAAOV,kBAAP;AACH,CAzDuC,CAyDtCR,UAzDsC,CAAxC;;AA0DA,SAASQ,kBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PdfFont } from './pdf-font';\r\nimport { PdfSubSuperScript } from './enum';\r\nimport { PdfArray } from './../../primitives/pdf-array';\r\n/**\r\n * `Metrics` of the font.\r\n * @private\r\n */\r\nvar PdfFontMetrics = /** @class */ (function () {\r\n    function PdfFontMetrics() {\r\n        /**\r\n         * `Line gap`.\r\n         * @private\r\n         */\r\n        this.lineGap = 0;\r\n    }\r\n    //  Public methods\r\n    /**\r\n     * Returns `ascent` taking into consideration font`s size.\r\n     * @private\r\n     */\r\n    PdfFontMetrics.prototype.getAscent = function (format) {\r\n        var returnValue = this.ascent * PdfFont.charSizeMultiplier * this.getSize(format);\r\n        return returnValue;\r\n    };\r\n    /**\r\n     * Returns `descent` taking into consideration font`s size.\r\n     * @private\r\n     */\r\n    PdfFontMetrics.prototype.getDescent = function (format) {\r\n        var returnValue = this.descent * PdfFont.charSizeMultiplier * this.getSize(format);\r\n        return returnValue;\r\n    };\r\n    /**\r\n     * Returns `Line gap` taking into consideration font`s size.\r\n     * @private\r\n     */\r\n    PdfFontMetrics.prototype.getLineGap = function (format) {\r\n        var returnValue = this.lineGap * PdfFont.charSizeMultiplier * this.getSize(format);\r\n        return returnValue;\r\n    };\r\n    /**\r\n     * Returns `height` taking into consideration font`s size.\r\n     * @private\r\n     */\r\n    PdfFontMetrics.prototype.getHeight = function (format) {\r\n        var height;\r\n        var clearTypeFonts = ['cambria', 'candara', 'constantia', 'corbel', 'cariadings'];\r\n        var clearTypeFontCollection = [];\r\n        for (var index = 0; index < clearTypeFonts.length; index++) {\r\n            var font = clearTypeFonts[index];\r\n            clearTypeFontCollection.push(font);\r\n        }\r\n        if (this.getDescent(format) < 0) {\r\n            // if ((clearTypeFontCollection.indexOf(this.name.toLowerCase()) !== -1) && !this.isUnicodeFont) {\r\n            //     height = (this.GetAscent(format) - this.GetDescent(format) - this.GetLineGap(format));\r\n            // } else {\r\n            height = (this.getAscent(format) - this.getDescent(format) + this.getLineGap(format));\r\n            // }\r\n        }\r\n        else {\r\n            height = (this.getAscent(format) + this.getDescent(format) + this.getLineGap(format));\r\n        }\r\n        return height;\r\n    };\r\n    /**\r\n     * Calculates `size` of the font depending on the subscript/superscript value.\r\n     * @private\r\n     */\r\n    PdfFontMetrics.prototype.getSize = function (format) {\r\n        var size = this.size;\r\n        if (format != null) {\r\n            switch (format.subSuperScript) {\r\n                case PdfSubSuperScript.SubScript:\r\n                    size /= this.subScriptSizeFactor;\r\n                    break;\r\n                case PdfSubSuperScript.SuperScript:\r\n                    size /= this.superscriptSizeFactor;\r\n                    break;\r\n            }\r\n        }\r\n        return size;\r\n    };\r\n    /**\r\n     * `Clones` the metrics.\r\n     * @private\r\n     */\r\n    PdfFontMetrics.prototype.clone = function () {\r\n        var metrics = this;\r\n        metrics.widthTable = WidthTable.clone();\r\n        return metrics;\r\n    };\r\n    Object.defineProperty(PdfFontMetrics.prototype, \"widthTable\", {\r\n        //  Properies\r\n        /**\r\n         * Gets or sets the `width table`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.internalWidthTable;\r\n        },\r\n        set: function (value) {\r\n            this.internalWidthTable = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PdfFontMetrics;\r\n}());\r\nexport { PdfFontMetrics };\r\nvar WidthTable = /** @class */ (function () {\r\n    function WidthTable() {\r\n    }\r\n    /**\r\n     * Static `clones` this instance of the WidthTable class.\r\n     * @private\r\n     */\r\n    WidthTable.clone = function () {\r\n        return null;\r\n    };\r\n    return WidthTable;\r\n}());\r\nexport { WidthTable };\r\nvar StandardWidthTable = /** @class */ (function (_super) {\r\n    __extends(StandardWidthTable, _super);\r\n    // Constructors\r\n    /**\r\n     * Initializes a new instance of the `StandardWidthTable` class.\r\n     * @private\r\n     */\r\n    function StandardWidthTable(widths) {\r\n        var _this = _super.call(this) || this;\r\n        if (widths == null) {\r\n            throw new Error('ArgumentNullException:widths');\r\n        }\r\n        _this.widths = widths;\r\n        return _this;\r\n    }\r\n    //Properties\r\n    /**\r\n     * Gets the `32 bit number` at the specified index.\r\n     * @private\r\n     */\r\n    StandardWidthTable.prototype.items = function (index) {\r\n        if (index < 0 || index >= this.widths.length) {\r\n            throw new Error('ArgumentOutOfRangeException:index, The character is not supported by the font.');\r\n        }\r\n        var result = this.widths[index];\r\n        return result;\r\n    };\r\n    Object.defineProperty(StandardWidthTable.prototype, \"length\", {\r\n        /**\r\n         * Gets the `length` of the internal array.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.widths.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Overrides\r\n    /**\r\n     * `Clones` this instance of the WidthTable class.\r\n     * @private\r\n     */\r\n    StandardWidthTable.prototype.clone = function () {\r\n        var swt = this;\r\n        swt.widths = this.widths;\r\n        return swt;\r\n    };\r\n    /**\r\n     * Converts width table to a `PDF array`.\r\n     * @private\r\n     */\r\n    StandardWidthTable.prototype.toArray = function () {\r\n        var arr = new PdfArray(this.widths);\r\n        return arr;\r\n    };\r\n    return StandardWidthTable;\r\n}(WidthTable));\r\nexport { StandardWidthTable };\r\n"]},"metadata":{},"sourceType":"module"}