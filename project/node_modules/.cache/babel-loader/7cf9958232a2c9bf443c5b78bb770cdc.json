{"ast":null,"code":"import { PdfPage } from './pdf-page';\nimport { Dictionary } from './../collections/dictionary';\n/**\r\n * Represents a virtual collection of all the pages in the document.\r\n * @private\r\n */\n\nvar PdfDocumentPageCollection =\n/** @class */\nfunction () {\n  //constructor\n\n  /**\r\n   * Initializes a new instance of the `PdfPageCollection` class.\r\n   * @private\r\n   */\n  function PdfDocumentPageCollection(document) {\n    /**\r\n     * It holds the page collection with the `index`.\r\n     * @private\r\n     */\n    this.pdfPageCollectionIndex = new Dictionary();\n    this.document = document;\n  }\n\n  Object.defineProperty(PdfDocumentPageCollection.prototype, \"count\", {\n    //Property\n\n    /**\r\n     * Gets the total `number of the pages`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.countPages();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentPageCollection.prototype, \"pageCollectionIndex\", {\n    /**\r\n     * Gets a `page index` from the document.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfPageCollectionIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfDocumentPageCollection.prototype.add = function (page) {\n    if (typeof page === 'undefined') {\n      var page_1 = new PdfPage();\n      this.add(page_1);\n      return page_1;\n    } else {\n      var section = this.getLastSection();\n      section.add(page);\n    }\n  };\n  /**\r\n   * Returns `last section` in the document.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.getLastSection = function () {\n    var sc = this.document.sections;\n\n    if (sc.section.length === 0) {\n      sc.add();\n    }\n\n    var section = sc.section[sc.section.length - 1];\n    return section;\n  };\n  /**\r\n   * Called when `new page has been added`.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.onPageAdded = function (args) {// if (PageAdded !== null)\n    // {\n    //     PageAdded(this, args);\n    // }\n  };\n  /**\r\n   * Gets the `total number of pages`.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.countPages = function () {\n    var sc = this.document.sections;\n    var count = 0;\n\n    for (var index = 0; index < sc.section.length; index++) {\n      count += sc.section[index].count;\n    }\n\n    return count;\n  };\n  /**\r\n   * Gets the `page object` from page index.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.getPageByIndex = function (index) {\n    return this.getPage(index);\n  };\n  /**\r\n   * Gets a page by its `index` in the document.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.getPage = function (index) {\n    if (index < 0 || index >= this.count) {\n      throw Error('ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\")');\n    }\n\n    var page = null;\n    var sectionStartIndex = 0;\n    var sectionCount = 0;\n    var pageIndex = 0;\n    var length = this.document.sections.count;\n\n    for (var i = 0; i < length; i++) {\n      var section = this.document.sections.section[i];\n      sectionCount = section.count;\n      pageIndex = index - sectionStartIndex; // We found a section containing the page.\n\n      if (index >= sectionStartIndex && pageIndex < sectionCount) {\n        page = section.getPages()[pageIndex];\n        break;\n      }\n\n      sectionStartIndex += sectionCount;\n    }\n\n    return page;\n  };\n  /**\r\n   * Gets the `index of` the page in the document.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.indexOf = function (page) {\n    var index = -1;\n\n    if (page == null) {\n      throw new Error('ArgumentNullException: page');\n    } else {\n      var numPages = 0;\n\n      for (var i = 0, len = this.document.sections.count; i < len; i++) {\n        var section = this.document.sections.pdfSectionCollection(i);\n        index = section.indexOf(page);\n\n        if (index >= 0) {\n          index += numPages;\n          break;\n        } else {\n          index = -1;\n        }\n\n        numPages += section.count;\n      }\n    }\n\n    return index;\n  };\n  /**\r\n   * `Removes` the specified page.\r\n   * @private\r\n   */\n\n\n  PdfDocumentPageCollection.prototype.remove = function (page) {\n    if (page == null) {\n      throw Error('ArgumentNullException(\"page\")');\n    }\n\n    var section = null;\n    var len;\n\n    for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {\n      section = this.document.sections.pdfSectionCollection(i);\n\n      if (section.pages.contains(page)) {\n        section.pages.remove(page);\n        break;\n      }\n    }\n\n    return section;\n  };\n\n  return PdfDocumentPageCollection;\n}();\n\nexport { PdfDocumentPageCollection };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-document-page-collection.js"],"names":["PdfPage","Dictionary","PdfDocumentPageCollection","document","pdfPageCollectionIndex","Object","defineProperty","prototype","get","countPages","enumerable","configurable","add","page","page_1","section","getLastSection","sc","sections","length","onPageAdded","args","count","index","getPageByIndex","getPage","Error","sectionStartIndex","sectionCount","pageIndex","i","getPages","indexOf","numPages","len","pdfSectionCollection","remove","len_1","pages","contains"],"mappings":"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","sourcesContent":["import { PdfPage } from './pdf-page';\r\nimport { Dictionary } from './../collections/dictionary';\r\n/**\r\n * Represents a virtual collection of all the pages in the document.\r\n * @private\r\n */\r\nvar PdfDocumentPageCollection = /** @class */ (function () {\r\n    //constructor\r\n    /**\r\n     * Initializes a new instance of the `PdfPageCollection` class.\r\n     * @private\r\n     */\r\n    function PdfDocumentPageCollection(document) {\r\n        /**\r\n         * It holds the page collection with the `index`.\r\n         * @private\r\n         */\r\n        this.pdfPageCollectionIndex = new Dictionary();\r\n        this.document = document;\r\n    }\r\n    Object.defineProperty(PdfDocumentPageCollection.prototype, \"count\", {\r\n        //Property\r\n        /**\r\n         * Gets the total `number of the pages`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.countPages();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfDocumentPageCollection.prototype, \"pageCollectionIndex\", {\r\n        /**\r\n         * Gets a `page index` from the document.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfPageCollectionIndex;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PdfDocumentPageCollection.prototype.add = function (page) {\r\n        if (typeof page === 'undefined') {\r\n            var page_1 = new PdfPage();\r\n            this.add(page_1);\r\n            return page_1;\r\n        }\r\n        else {\r\n            var section = this.getLastSection();\r\n            section.add(page);\r\n        }\r\n    };\r\n    /**\r\n     * Returns `last section` in the document.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.getLastSection = function () {\r\n        var sc = this.document.sections;\r\n        if (sc.section.length === 0) {\r\n            sc.add();\r\n        }\r\n        var section = sc.section[sc.section.length - 1];\r\n        return section;\r\n    };\r\n    /**\r\n     * Called when `new page has been added`.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.onPageAdded = function (args) {\r\n        // if (PageAdded !== null)\r\n        // {\r\n        //     PageAdded(this, args);\r\n        // }\r\n    };\r\n    /**\r\n     * Gets the `total number of pages`.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.countPages = function () {\r\n        var sc = this.document.sections;\r\n        var count = 0;\r\n        for (var index = 0; index < sc.section.length; index++) {\r\n            count += sc.section[index].count;\r\n        }\r\n        return count;\r\n    };\r\n    /**\r\n     * Gets the `page object` from page index.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.getPageByIndex = function (index) {\r\n        return this.getPage(index);\r\n    };\r\n    /**\r\n     * Gets a page by its `index` in the document.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.getPage = function (index) {\r\n        if ((index < 0) || (index >= this.count)) {\r\n            throw Error('ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\")');\r\n        }\r\n        var page = null;\r\n        var sectionStartIndex = 0;\r\n        var sectionCount = 0;\r\n        var pageIndex = 0;\r\n        var length = this.document.sections.count;\r\n        for (var i = 0; i < length; i++) {\r\n            var section = this.document.sections.section[i];\r\n            sectionCount = section.count;\r\n            pageIndex = index - sectionStartIndex;\r\n            // We found a section containing the page.\r\n            if ((index >= sectionStartIndex && pageIndex < sectionCount)) {\r\n                page = section.getPages()[pageIndex];\r\n                break;\r\n            }\r\n            sectionStartIndex += sectionCount;\r\n        }\r\n        return page;\r\n    };\r\n    /**\r\n     * Gets the `index of` the page in the document.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.indexOf = function (page) {\r\n        var index = -1;\r\n        if (page == null) {\r\n            throw new Error('ArgumentNullException: page');\r\n        }\r\n        else {\r\n            var numPages = 0;\r\n            for (var i = 0, len = this.document.sections.count; i < len; i++) {\r\n                var section = this.document.sections.pdfSectionCollection(i);\r\n                index = section.indexOf(page);\r\n                if (index >= 0) {\r\n                    index += numPages;\r\n                    break;\r\n                }\r\n                else {\r\n                    index = -1;\r\n                }\r\n                numPages += section.count;\r\n            }\r\n        }\r\n        return index;\r\n    };\r\n    /**\r\n     * `Removes` the specified page.\r\n     * @private\r\n     */\r\n    PdfDocumentPageCollection.prototype.remove = function (page) {\r\n        if (page == null) {\r\n            throw Error('ArgumentNullException(\"page\")');\r\n        }\r\n        var section = null;\r\n        var len;\r\n        for (var i = 0, len_1 = this.document.sections.count; i < len_1; i++) {\r\n            section = this.document.sections.pdfSectionCollection(i);\r\n            if (section.pages.contains(page)) {\r\n                section.pages.remove(page);\r\n                break;\r\n            }\r\n        }\r\n        return section;\r\n    };\r\n    return PdfDocumentPageCollection;\r\n}());\r\nexport { PdfDocumentPageCollection };\r\n"]},"metadata":{},"sourceType":"module"}