{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { cothNumber } from '../../plain/number/index.js';\nvar name = 'coth';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic cotangent of a value,\r\n   * defined as `coth(x) = 1 / tanh(x)`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic cotangent, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.coth(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // coth(x) = 1 / tanh(x)\r\n   *    math.coth(2)         // returns 1.0373147207275482\r\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh, cosh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic cotangent of x\r\n   */\n\n  return typed(name, {\n    number: cothNumber,\n    Complex: x => x.coth(),\n    BigNumber: x => new _BigNumber(1).div(x.tanh())\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/trigonometry/coth.js"],"names":["factory","cothNumber","name","dependencies","createCoth","_ref","typed","BigNumber","_BigNumber","number","Complex","x","coth","div","tanh"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,SAAS,EAAEC;AAFT,MAGAH,IAHJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAER,UADS;AAEjBS,IAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAFG;AAGjBL,IAAAA,SAAS,EAAEI,CAAC,IAAI,IAAIH,UAAJ,CAAe,CAAf,EAAkBK,GAAlB,CAAsBF,CAAC,CAACG,IAAF,EAAtB;AAHC,GAAP,CAAZ;AAKD,CAlC6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { cothNumber } from '../../plain/number/index.js';\r\nvar name = 'coth';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createCoth = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic cotangent of a value,\r\n   * defined as `coth(x) = 1 / tanh(x)`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic cotangent, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.coth(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // coth(x) = 1 / tanh(x)\r\n   *    math.coth(2)         // returns 1.0373147207275482\r\n   *    1 / math.tanh(2)     // returns 1.0373147207275482\r\n   *\r\n   * See also:\r\n   *\r\n   *    sinh, tanh, cosh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic cotangent of x\r\n   */\r\n  return typed(name, {\r\n    number: cothNumber,\r\n    Complex: x => x.coth(),\r\n    BigNumber: x => new _BigNumber(1).div(x.tanh())\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}