{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var gcdManySignature = {};\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n\n    return res;\n  });\n  /**\r\n   * Calculate the greatest common divisor for two or more values or arrays.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.gcd(a, b)\r\n   *    math.gcd(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.gcd(-4, 6)              // returns 2\r\n   *    math.gcd(25, 15, -10)        // returns 5\r\n   *\r\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    lcm, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\r\n   */\n\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), gcdManySignature);\n  /**\r\n   * Calculate gcd for BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns greatest common denominator of a and b\r\n   * @private\r\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","gcdNumber","name","dependencies","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","concat","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","gcdTypes","gcdManySignature","referToSelf","self","a","b","args","res","i","length","_gcdBigNumber","x","y","gcd","SS","DS","Ss","isInt","Error","zero","isZero","r","mod","lt","neg"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\r\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\r\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nimport { gcdNumber } from '../../plain/number/index.js';\r\nvar name = 'gcd';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\r\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    BigNumber,\r\n    DenseMatrix,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo01xDSid = createMatAlgo01xDSid({\r\n    typed\r\n  });\r\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo10xSids = createMatAlgo10xSids({\r\n    typed,\r\n    DenseMatrix\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n  var gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\r\n  var gcdManySignature = {};\r\n  gcdManySignature[\"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes)] = typed.referToSelf(self => (a, b, args) => {\r\n    var res = self(a, b);\r\n    for (var i = 0; i < args.length; i++) {\r\n      res = self(res, args[i]);\r\n    }\r\n    return res;\r\n  });\r\n\r\n  /**\r\n   * Calculate the greatest common divisor for two or more values or arrays.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.gcd(a, b)\r\n   *    math.gcd(a, b, c, ...)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.gcd(8, 12)              // returns 4\r\n   *    math.gcd(-4, 6)              // returns 2\r\n   *    math.gcd(25, 15, -10)        // returns 5\r\n   *\r\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\r\n   *\r\n   * See also:\r\n   *\r\n   *    lcm, xgcd\r\n   *\r\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\r\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\r\n   */\r\n  return typed(name, {\r\n    'number, number': gcdNumber,\r\n    'BigNumber, BigNumber': _gcdBigNumber,\r\n    'Fraction, Fraction': (x, y) => x.gcd(y)\r\n  }, matrixAlgorithmSuite({\r\n    SS: matAlgo04xSidSid,\r\n    DS: matAlgo01xDSid,\r\n    Ss: matAlgo10xSids\r\n  }), gcdManySignature);\r\n\r\n  /**\r\n   * Calculate gcd for BigNumbers\r\n   * @param {BigNumber} a\r\n   * @param {BigNumber} b\r\n   * @returns {BigNumber} Returns greatest common denominator of a and b\r\n   * @private\r\n   */\r\n  function _gcdBigNumber(a, b) {\r\n    if (!a.isInt() || !b.isInt()) {\r\n      throw new Error('Parameters in function gcd must be integer numbers');\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\r\n    var zero = new BigNumber(0);\r\n    while (!b.isZero()) {\r\n      var r = a.mod(b);\r\n      a = b;\r\n      b = r;\r\n    }\r\n    return a.lt(zero) ? a.neg() : a;\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}