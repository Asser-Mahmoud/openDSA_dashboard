{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo07xSSf';\nvar dependencies = ['typed', 'DenseMatrix'];\nexport var createMatAlgo07xSSf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    DenseMatrix\n  } = _ref;\n  /**\r\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\r\n   * Callback function invoked MxN times.\r\n   *\r\n   * C(i,j) = f(Aij, Bij)\r\n   *\r\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\r\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\r\n   *\r\n   * @return {Matrix}                    DenseMatrix (C)\r\n   *\r\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\r\n   */\n\n  return function matAlgo07xSSf(a, b, callback) {\n    // sparse matrix arrays\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    var i, j; // result arrays\n\n    var cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // workspaces\n\n\n    var xa = [];\n    var xb = []; // marks indicating we have a value in x for a given column\n\n    var wa = [];\n    var wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        var va = wa[i] === mark ? xa[i] : zero;\n        var vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return dense matrix\n\n\n    return new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    var values = m._values;\n    var index = m._index;\n    var ptr = m._ptr; // loop values in column j\n\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      var i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo07xSSf.js"],"names":["factory","DimensionError","name","dependencies","createMatAlgo07xSSf","_ref","typed","DenseMatrix","matAlgo07xSSf","a","b","callback","asize","_size","adt","_datatype","bsize","bdt","length","RangeError","rows","columns","dt","zero","cf","convert","find","i","j","cdata","xa","xb","wa","wb","mark","_scatter","va","vb","data","size","datatype","m","w","x","values","_values","index","_index","ptr","_ptr","k","k1"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { DimensionError } from '../../../error/DimensionError.js';\r\nvar name = 'matAlgo07xSSf';\r\nvar dependencies = ['typed', 'DenseMatrix'];\r\nexport var createMatAlgo07xSSf = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    DenseMatrix\r\n  } = _ref;\r\n  /**\r\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\r\n   * Callback function invoked MxN times.\r\n   *\r\n   * C(i,j) = f(Aij, Bij)\r\n   *\r\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\r\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\r\n   *\r\n   * @return {Matrix}                    DenseMatrix (C)\r\n   *\r\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\r\n   */\r\n  return function matAlgo07xSSf(a, b, callback) {\r\n    // sparse matrix arrays\r\n    var asize = a._size;\r\n    var adt = a._datatype;\r\n    // sparse matrix arrays\r\n    var bsize = b._size;\r\n    var bdt = b._datatype;\r\n\r\n    // validate dimensions\r\n    if (asize.length !== bsize.length) {\r\n      throw new DimensionError(asize.length, bsize.length);\r\n    }\r\n\r\n    // check rows & columns\r\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\r\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\r\n    }\r\n\r\n    // rows & columns\r\n    var rows = asize[0];\r\n    var columns = asize[1];\r\n\r\n    // datatype\r\n    var dt;\r\n    // zero value\r\n    var zero = 0;\r\n    // callback signature to use\r\n    var cf = callback;\r\n\r\n    // process data types\r\n    if (typeof adt === 'string' && adt === bdt) {\r\n      // datatype\r\n      dt = adt;\r\n      // convert 0 to the same datatype\r\n      zero = typed.convert(0, dt);\r\n      // callback\r\n      cf = typed.find(callback, [dt, dt]);\r\n    }\r\n\r\n    // vars\r\n    var i, j;\r\n\r\n    // result arrays\r\n    var cdata = [];\r\n    // initialize c\r\n    for (i = 0; i < rows; i++) {\r\n      cdata[i] = [];\r\n    }\r\n\r\n    // workspaces\r\n    var xa = [];\r\n    var xb = [];\r\n    // marks indicating we have a value in x for a given column\r\n    var wa = [];\r\n    var wb = [];\r\n\r\n    // loop columns\r\n    for (j = 0; j < columns; j++) {\r\n      // columns mark\r\n      var mark = j + 1;\r\n      // scatter the values of A(:,j) into workspace\r\n      _scatter(a, j, wa, xa, mark);\r\n      // scatter the values of B(:,j) into workspace\r\n      _scatter(b, j, wb, xb, mark);\r\n      // loop rows\r\n      for (i = 0; i < rows; i++) {\r\n        // matrix values @ i,j\r\n        var va = wa[i] === mark ? xa[i] : zero;\r\n        var vb = wb[i] === mark ? xb[i] : zero;\r\n        // invoke callback\r\n        cdata[i][j] = cf(va, vb);\r\n      }\r\n    }\r\n\r\n    // return dense matrix\r\n    return new DenseMatrix({\r\n      data: cdata,\r\n      size: [rows, columns],\r\n      datatype: dt\r\n    });\r\n  };\r\n  function _scatter(m, j, w, x, mark) {\r\n    // a arrays\r\n    var values = m._values;\r\n    var index = m._index;\r\n    var ptr = m._ptr;\r\n    // loop values in column j\r\n    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\r\n      // row\r\n      var i = index[k];\r\n      // update workspace\r\n      w[i] = mark;\r\n      x[i] = values[k];\r\n    }\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}