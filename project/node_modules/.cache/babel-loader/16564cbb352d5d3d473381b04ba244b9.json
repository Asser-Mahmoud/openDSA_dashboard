{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { asinhNumber } from '../../plain/number/index.js';\nvar name = 'asinh';\nvar dependencies = ['typed'];\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\r\n   */\n\n  return typed('asinh', {\n    number: asinhNumber,\n    Complex: function Complex(x) {\n      return x.asinh();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.asinh();\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/trigonometry/asinh.js"],"names":["factory","asinhNumber","name","dependencies","createAsinh","_ref","typed","number","Complex","x","asinh","BigNumber"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC1E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAAC,OAAD,EAAU;AACpBC,IAAAA,MAAM,EAAEN,WADY;AAEpBO,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAC3B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KAJmB;AAKpBC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD;AAPmB,GAAV,CAAZ;AASD,CAnC8C,CAAxC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { asinhNumber } from '../../plain/number/index.js';\r\nvar name = 'asinh';\r\nvar dependencies = ['typed'];\r\nexport var createAsinh = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic arcsine of a value,\r\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic arcsine, this function\r\n   * does not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.asinh(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.asinh(0.5)       // returns 0.48121182505960347\r\n   *\r\n   * See also:\r\n   *\r\n   *    acosh, atanh\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic arcsine of x\r\n   */\r\n  return typed('asinh', {\r\n    number: asinhNumber,\r\n    Complex: function Complex(x) {\r\n      return x.asinh();\r\n    },\r\n    BigNumber: function BigNumber(x) {\r\n      return x.asinh();\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}