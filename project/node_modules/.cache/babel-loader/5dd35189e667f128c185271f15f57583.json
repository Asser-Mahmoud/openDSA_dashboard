{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nvar name = 're';\nvar dependencies = ['typed'];\nexport var createRe = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Get the real part of a complex number.\r\n   * For a complex number `a + bi`, the function returns `a`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.re(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    math.re(a)                     // returns number 2\r\n   *    math.im(a)                     // returns number 3\r\n   *\r\n   *    math.re(math.complex('-5.2i')) // returns number 0\r\n   *    math.re(math.complex(2.4))     // returns number 2.4\r\n   *\r\n   * See also:\r\n   *\r\n   *    im, conj, abs, arg\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The real part of x\r\n   */\n\n  return typed(name, {\n    'number | BigNumber | Fraction': x => x,\n    Complex: x => x.re,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/complex/re.js"],"names":["factory","deepMap","name","dependencies","createRe","_ref","typed","x","Complex","re","referToSelf","self"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACvE,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,qCAAiCK,CAAC,IAAIA,CADrB;AAEjBC,IAAAA,OAAO,EAAED,CAAC,IAAIA,CAAC,CAACE,EAFC;AAGjB,sBAAkBH,KAAK,CAACI,WAAN,CAAkBC,IAAI,IAAIJ,CAAC,IAAIN,OAAO,CAACM,CAAD,EAAII,IAAJ,CAAtC;AAHD,GAAP,CAAZ;AAKD,CApC2C,CAArC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nvar name = 're';\r\nvar dependencies = ['typed'];\r\nexport var createRe = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Get the real part of a complex number.\r\n   * For a complex number `a + bi`, the function returns `a`.\r\n   *\r\n   * For matrices, the function is evaluated element wise.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.re(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    const a = math.complex(2, 3)\r\n   *    math.re(a)                     // returns number 2\r\n   *    math.im(a)                     // returns number 3\r\n   *\r\n   *    math.re(math.complex('-5.2i')) // returns number 0\r\n   *    math.re(math.complex(2.4))     // returns number 2.4\r\n   *\r\n   * See also:\r\n   *\r\n   *    im, conj, abs, arg\r\n   *\r\n   * @param {number | BigNumber | Complex | Array | Matrix} x\r\n   *            A complex number or array with complex numbers\r\n   * @return {number | BigNumber | Array | Matrix} The real part of x\r\n   */\r\n  return typed(name, {\r\n    'number | BigNumber | Fraction': x => x,\r\n    Complex: x => x.re,\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}