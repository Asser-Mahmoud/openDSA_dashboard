{"ast":null,"code":"/**\r\n * Used to perform `convertion between pixels and points`.\r\n * @private\r\n */\nvar PdfUnitConverter =\n/** @class */\nfunction () {\n  //constructors\n\n  /**\r\n   * Initializes a new instance of the `UnitConvertor` class with DPI value.\r\n   * @private\r\n   */\n  function PdfUnitConverter(dpi) {\n    this.updateProportionsHelper(dpi);\n  }\n  /**\r\n   * `Converts` the value, from one graphics unit to another graphics unit.\r\n   * @private\r\n   */\n\n\n  PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\n    return this.convertFromPixels(this.convertToPixels(value, from), to);\n  };\n  /**\r\n   * Converts the value `to pixel` from specified graphics unit.\r\n   * @private\r\n   */\n\n\n  PdfUnitConverter.prototype.convertToPixels = function (value, from) {\n    var index = from;\n    var result = value * this.proportions[index];\n    return result;\n  };\n  /**\r\n   * Converts value, to specified graphics unit `from Pixel`.\r\n   * @private\r\n   */\n\n\n  PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\n    var index = to;\n    var result = value / this.proportions[index];\n    return result;\n  };\n  /**\r\n   * `Update proportions` matrix according to Graphics settings.\r\n   * @private\r\n   */\n\n\n  PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\n    this.proportions = [pixelPerInch / 2.54, pixelPerInch / 6.0, 1, pixelPerInch / 72.0, pixelPerInch, pixelPerInch / 300.0, pixelPerInch / 25.4 // Millimeter\n    ];\n  }; //Fields\n\n  /**\r\n   * Indicates default `horizontal resolution`.\r\n   * @default 96\r\n   * @private\r\n   */\n\n\n  PdfUnitConverter.horizontalResolution = 96;\n  /**\r\n   * Indicates default `vertical resolution`.\r\n   * @default 96\r\n   * @private\r\n   */\n\n  PdfUnitConverter.verticalResolution = 96;\n  return PdfUnitConverter;\n}();\n\nexport { PdfUnitConverter };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/unit-convertor.js"],"names":["PdfUnitConverter","dpi","updateProportionsHelper","prototype","convertUnits","value","from","to","convertFromPixels","convertToPixels","index","result","proportions","pixelPerInch","horizontalResolution","verticalResolution"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,gBAAgB;AAAG;AAAe,YAAY;AAC9C;;AACA;AACJ;AACA;AACA;AACI,WAASA,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,SAAKC,uBAAL,CAA6BD,GAA7B;AACH;AACD;AACJ;AACA;AACA;;;AACID,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,YAA3B,GAA0C,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,EAAvB,EAA2B;AACjE,WAAO,KAAKC,iBAAL,CAAuB,KAAKC,eAAL,CAAqBJ,KAArB,EAA4BC,IAA5B,CAAvB,EAA0DC,EAA1D,CAAP;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACIP,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BM,eAA3B,GAA6C,UAAUJ,KAAV,EAAiBC,IAAjB,EAAuB;AAChE,QAAII,KAAK,GAAGJ,IAAZ;AACA,QAAIK,MAAM,GAAIN,KAAK,GAAG,KAAKO,WAAL,CAAiBF,KAAjB,CAAtB;AACA,WAAOC,MAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;;;AACIX,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BK,iBAA3B,GAA+C,UAAUH,KAAV,EAAiBE,EAAjB,EAAqB;AAChE,QAAIG,KAAK,GAAGH,EAAZ;AACA,QAAII,MAAM,GAAIN,KAAK,GAAG,KAAKO,WAAL,CAAiBF,KAAjB,CAAtB;AACA,WAAOC,MAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;;;AACIX,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BD,uBAA3B,GAAqD,UAAUW,YAAV,EAAwB;AACzE,SAAKD,WAAL,GAAmB,CACfC,YAAY,GAAG,IADA,EAEfA,YAAY,GAAG,GAFA,EAGf,CAHe,EAIfA,YAAY,GAAG,IAJA,EAKfA,YALe,EAMfA,YAAY,GAAG,KANA,EAOfA,YAAY,GAAG,IAPA,CAOK;AAPL,KAAnB;AASH,GAVD,CAtC8C,CAiD9C;;AACA;AACJ;AACA;AACA;AACA;;;AACIb,EAAAA,gBAAgB,CAACc,oBAAjB,GAAwC,EAAxC;AACA;AACJ;AACA;AACA;AACA;;AACId,EAAAA,gBAAgB,CAACe,kBAAjB,GAAsC,EAAtC;AACA,SAAOf,gBAAP;AACH,CA/DqC,EAAtC;;AAgEA,SAASA,gBAAT","sourcesContent":["/**\r\n * Used to perform `convertion between pixels and points`.\r\n * @private\r\n */\r\nvar PdfUnitConverter = /** @class */ (function () {\r\n    //constructors\r\n    /**\r\n     * Initializes a new instance of the `UnitConvertor` class with DPI value.\r\n     * @private\r\n     */\r\n    function PdfUnitConverter(dpi) {\r\n        this.updateProportionsHelper(dpi);\r\n    }\r\n    /**\r\n     * `Converts` the value, from one graphics unit to another graphics unit.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.convertUnits = function (value, from, to) {\r\n        return this.convertFromPixels(this.convertToPixels(value, from), to);\r\n    };\r\n    /**\r\n     * Converts the value `to pixel` from specified graphics unit.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.convertToPixels = function (value, from) {\r\n        var index = from;\r\n        var result = (value * this.proportions[index]);\r\n        return result;\r\n    };\r\n    /**\r\n     * Converts value, to specified graphics unit `from Pixel`.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.convertFromPixels = function (value, to) {\r\n        var index = to;\r\n        var result = (value / this.proportions[index]);\r\n        return result;\r\n    };\r\n    /**\r\n     * `Update proportions` matrix according to Graphics settings.\r\n     * @private\r\n     */\r\n    PdfUnitConverter.prototype.updateProportionsHelper = function (pixelPerInch) {\r\n        this.proportions = [\r\n            pixelPerInch / 2.54,\r\n            pixelPerInch / 6.0,\r\n            1,\r\n            pixelPerInch / 72.0,\r\n            pixelPerInch,\r\n            pixelPerInch / 300.0,\r\n            pixelPerInch / 25.4 // Millimeter\r\n        ];\r\n    };\r\n    //Fields\r\n    /**\r\n     * Indicates default `horizontal resolution`.\r\n     * @default 96\r\n     * @private\r\n     */\r\n    PdfUnitConverter.horizontalResolution = 96;\r\n    /**\r\n     * Indicates default `vertical resolution`.\r\n     * @default 96\r\n     * @private\r\n     */\r\n    PdfUnitConverter.verticalResolution = 96;\r\n    return PdfUnitConverter;\r\n}());\r\nexport { PdfUnitConverter };\r\n"]},"metadata":{},"sourceType":"module"}