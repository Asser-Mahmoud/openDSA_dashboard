{"ast":null,"code":"import { typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    number: _number,\n    bignumber,\n    fraction\n  } = _ref;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: x => _number(x),\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\n    Fraction: fraction ? x => fraction(x) : noFraction\n  };\n  /**\r\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.numeric(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.numeric('4')                           // returns 4\r\n   *    math.numeric('4', 'number')                 // returns 4\r\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\r\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\r\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\r\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\r\n   *\r\n   * See also:\r\n   *\r\n   *    number, fraction, bignumber, string, format\r\n   *\r\n   * @param {string | number | BigNumber | Fraction } value\r\n   *              A numeric value or a string containing a numeric value\r\n   * @param {string} outputType\r\n   *              Desired numeric output type.\r\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\r\n   * @return {number | BigNumber | Fraction}\r\n   *              Returns an instance of the numeric in the requested type\r\n   */\n\n  return function numeric(value) {\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\n    var check = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (check !== undefined) {\n      throw new SyntaxError('numeric() takes one or two arguments');\n    }\n\n    var inputType = typeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/utils/numeric.js"],"names":["typeOf","factory","noBignumber","noFraction","name","dependencies","createNumeric","_ref","number","_number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","numeric","value","outputType","arguments","length","undefined","check","SyntaxError","inputType","TypeError","Object","keys","join"],"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,qBAAxC;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,YAAX,EAAyB,WAAzB,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC5E,MAAI;AACFC,IAAAA,MAAM,EAAEC,OADN;AAEFC,IAAAA,SAFE;AAGFC,IAAAA;AAHE,MAIAJ,IAJJ;AAKA,MAAIK,eAAe,GAAG;AACpBC,IAAAA,MAAM,EAAE,IADY;AAEpBL,IAAAA,MAAM,EAAE,IAFY;AAGpBM,IAAAA,SAAS,EAAE,IAHS;AAIpBC,IAAAA,QAAQ,EAAE;AAJU,GAAtB,CAN4E,CAa5E;;AACA,MAAIC,gBAAgB,GAAG;AACrBR,IAAAA,MAAM,EAAES,CAAC,IAAIR,OAAO,CAACQ,CAAD,CADC;AAErBH,IAAAA,SAAS,EAAEJ,SAAS,GAAGO,CAAC,IAAIP,SAAS,CAACO,CAAD,CAAjB,GAAuBf,WAFtB;AAGrBa,IAAAA,QAAQ,EAAEJ,QAAQ,GAAGM,CAAC,IAAIN,QAAQ,CAACM,CAAD,CAAhB,GAAsBd;AAHnB,GAAvB;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAO,SAASe,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,QAAIC,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,QAArF;AACA,QAAIG,KAAK,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAlD;;AACA,QAAIC,KAAK,KAAKD,SAAd,EAAyB;AACvB,YAAM,IAAIE,WAAJ,CAAgB,sCAAhB,CAAN;AACD;;AACD,QAAIC,SAAS,GAAG1B,MAAM,CAACmB,KAAD,CAAtB;;AACA,QAAI,EAAEO,SAAS,IAAId,eAAf,CAAJ,EAAqC;AACnC,YAAM,IAAIe,SAAJ,CAAc,oBAAoBR,KAApB,GAA4B,YAA5B,GAA2CO,SAA3C,GAAuD,2BAAvD,GAAqFE,MAAM,CAACC,IAAP,CAAYjB,eAAZ,EAA6BkB,IAA7B,CAAkC,IAAlC,CAAnG,CAAN;AACD;;AACD,QAAI,EAAEV,UAAU,IAAIJ,gBAAhB,CAAJ,EAAuC;AACrC,YAAM,IAAIW,SAAJ,CAAc,oBAAoBR,KAApB,GAA4B,YAA5B,GAA2CC,UAA3C,GAAwD,4BAAxD,GAAuFQ,MAAM,CAACC,IAAP,CAAYb,gBAAZ,EAA8Bc,IAA9B,CAAmC,IAAnC,CAArG,CAAN;AACD;;AACD,QAAIV,UAAU,KAAKM,SAAnB,EAA8B;AAC5B,aAAOP,KAAP;AACD,KAFD,MAEO;AACL,aAAOH,gBAAgB,CAACI,UAAD,CAAhB,CAA6BD,KAA7B,CAAP;AACD;AACF,GAlBD;AAmBD,CAnEgD,CAA1C","sourcesContent":["import { typeOf } from '../../utils/is.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { noBignumber, noFraction } from '../../utils/noop.js';\r\nvar name = 'numeric';\r\nvar dependencies = ['number', '?bignumber', '?fraction'];\r\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    number: _number,\r\n    bignumber,\r\n    fraction\r\n  } = _ref;\r\n  var validInputTypes = {\r\n    string: true,\r\n    number: true,\r\n    BigNumber: true,\r\n    Fraction: true\r\n  };\r\n\r\n  // Load the conversion functions for each output type\r\n  var validOutputTypes = {\r\n    number: x => _number(x),\r\n    BigNumber: bignumber ? x => bignumber(x) : noBignumber,\r\n    Fraction: fraction ? x => fraction(x) : noFraction\r\n  };\r\n\r\n  /**\r\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.numeric(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.numeric('4')                           // returns 4\r\n   *    math.numeric('4', 'number')                 // returns 4\r\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\r\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\r\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\r\n   *    math.numeric(math.fraction(2, 5), 'number') // returns 0.4\r\n   *\r\n   * See also:\r\n   *\r\n   *    number, fraction, bignumber, string, format\r\n   *\r\n   * @param {string | number | BigNumber | Fraction } value\r\n   *              A numeric value or a string containing a numeric value\r\n   * @param {string} outputType\r\n   *              Desired numeric output type.\r\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\r\n   * @return {number | BigNumber | Fraction}\r\n   *              Returns an instance of the numeric in the requested type\r\n   */\r\n  return function numeric(value) {\r\n    var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'number';\r\n    var check = arguments.length > 2 ? arguments[2] : undefined;\r\n    if (check !== undefined) {\r\n      throw new SyntaxError('numeric() takes one or two arguments');\r\n    }\r\n    var inputType = typeOf(value);\r\n    if (!(inputType in validInputTypes)) {\r\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\r\n    }\r\n    if (!(outputType in validOutputTypes)) {\r\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\r\n    }\r\n    if (outputType === inputType) {\r\n      return value;\r\n    } else {\r\n      return validOutputTypes[outputType](value);\r\n    }\r\n  };\r\n});"]},"metadata":{},"sourceType":"module"}