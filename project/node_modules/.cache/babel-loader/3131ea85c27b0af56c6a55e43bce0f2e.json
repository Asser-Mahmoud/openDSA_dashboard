{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo09xS0Sf';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo09xS0Sf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\r\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\r\n   * Callback function invoked NZA times, number of nonzero elements in A.\r\n   *\r\n   *\r\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\r\n   * C(i,j) = ┤\r\n   *          └  0            ; otherwise\r\n   *\r\n   *\r\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\r\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\r\n   *\r\n   * @return {Matrix}                    SparseMatrix (C)\r\n   *\r\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\r\n   */\n\n  return function matAlgo09xS0Sf(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var i, j, k, k0, k1; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // column mark\n\n      var mark = j + 1; // check we need to process values\n\n      if (x) {\n        // loop B(:,j)\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n          // row\n          i = bindex[k]; // update workspace\n\n          w[i] = mark;\n          x[i] = bvalues[k];\n        }\n      } // loop A(:,j)\n\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // check we need to process values\n\n        if (x) {\n          // b value @ i,j\n          var vb = w[i] === mark ? x[i] : zero; // invoke f\n\n          var vc = cf(avalues[k], vb); // check zero value\n\n          if (!eq(vc, zero)) {\n            // push index\n            cindex.push(i); // push value\n\n            cvalues.push(vc);\n          }\n        } else {\n          // push index\n          cindex.push(i);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo09xS0Sf.js"],"names":["factory","DimensionError","name","dependencies","createMatAlgo09xS0Sf","_ref","typed","equalScalar","matAlgo09xS0Sf","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","x","w","i","j","k","k0","k1","mark","vb","vc","push","createSparseMatrix","values","index","ptr","size","datatype"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\r\nimport { DimensionError } from '../../../error/DimensionError.js';\r\nvar name = 'matAlgo09xS0Sf';\r\nvar dependencies = ['typed', 'equalScalar'];\r\nexport var createMatAlgo09xS0Sf = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    equalScalar\r\n  } = _ref;\r\n  /**\r\n   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij).\r\n   * Callback function invoked NZA times, number of nonzero elements in A.\r\n   *\r\n   *\r\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0\r\n   * C(i,j) = ┤\r\n   *          └  0            ; otherwise\r\n   *\r\n   *\r\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\r\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\r\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\r\n   *\r\n   * @return {Matrix}                    SparseMatrix (C)\r\n   *\r\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\r\n   */\r\n  return function matAlgo09xS0Sf(a, b, callback) {\r\n    // sparse matrix arrays\r\n    var avalues = a._values;\r\n    var aindex = a._index;\r\n    var aptr = a._ptr;\r\n    var asize = a._size;\r\n    var adt = a._datatype;\r\n    // sparse matrix arrays\r\n    var bvalues = b._values;\r\n    var bindex = b._index;\r\n    var bptr = b._ptr;\r\n    var bsize = b._size;\r\n    var bdt = b._datatype;\r\n\r\n    // validate dimensions\r\n    if (asize.length !== bsize.length) {\r\n      throw new DimensionError(asize.length, bsize.length);\r\n    }\r\n\r\n    // check rows & columns\r\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\r\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\r\n    }\r\n\r\n    // rows & columns\r\n    var rows = asize[0];\r\n    var columns = asize[1];\r\n\r\n    // datatype\r\n    var dt;\r\n    // equal signature to use\r\n    var eq = equalScalar;\r\n    // zero value\r\n    var zero = 0;\r\n    // callback signature to use\r\n    var cf = callback;\r\n\r\n    // process data types\r\n    if (typeof adt === 'string' && adt === bdt) {\r\n      // datatype\r\n      dt = adt;\r\n      // find signature that matches (dt, dt)\r\n      eq = typed.find(equalScalar, [dt, dt]);\r\n      // convert 0 to the same datatype\r\n      zero = typed.convert(0, dt);\r\n      // callback\r\n      cf = typed.find(callback, [dt, dt]);\r\n    }\r\n\r\n    // result arrays\r\n    var cvalues = avalues && bvalues ? [] : undefined;\r\n    var cindex = [];\r\n    var cptr = [];\r\n\r\n    // workspaces\r\n    var x = cvalues ? [] : undefined;\r\n    // marks indicating we have a value in x for a given column\r\n    var w = [];\r\n\r\n    // vars\r\n    var i, j, k, k0, k1;\r\n\r\n    // loop columns\r\n    for (j = 0; j < columns; j++) {\r\n      // update cptr\r\n      cptr[j] = cindex.length;\r\n      // column mark\r\n      var mark = j + 1;\r\n      // check we need to process values\r\n      if (x) {\r\n        // loop B(:,j)\r\n        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\r\n          // row\r\n          i = bindex[k];\r\n          // update workspace\r\n          w[i] = mark;\r\n          x[i] = bvalues[k];\r\n        }\r\n      }\r\n      // loop A(:,j)\r\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\r\n        // row\r\n        i = aindex[k];\r\n        // check we need to process values\r\n        if (x) {\r\n          // b value @ i,j\r\n          var vb = w[i] === mark ? x[i] : zero;\r\n          // invoke f\r\n          var vc = cf(avalues[k], vb);\r\n          // check zero value\r\n          if (!eq(vc, zero)) {\r\n            // push index\r\n            cindex.push(i);\r\n            // push value\r\n            cvalues.push(vc);\r\n          }\r\n        } else {\r\n          // push index\r\n          cindex.push(i);\r\n        }\r\n      }\r\n    }\r\n    // update cptr\r\n    cptr[columns] = cindex.length;\r\n\r\n    // return sparse matrix\r\n    return a.createSparseMatrix({\r\n      values: cvalues,\r\n      index: cindex,\r\n      ptr: cptr,\r\n      size: [rows, columns],\r\n      datatype: dt\r\n    });\r\n  };\r\n});"]},"metadata":{},"sourceType":"module"}