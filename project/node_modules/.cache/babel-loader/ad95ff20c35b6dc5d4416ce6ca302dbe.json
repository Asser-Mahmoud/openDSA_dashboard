{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotMultiply';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar', 'concat'];\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    multiplyScalar,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\r\n   * Multiply two matrices element wise. The function accepts both matrices and\r\n   * scalar values.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.dotMultiply(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.dotMultiply(2, 4) // returns 8\r\n   *\r\n   *    a = [[9, 5], [6, 1]]\r\n   *    b = [[3, 2], [5, 2]]\r\n   *\r\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\r\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply, divide, dotDivide\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\r\n   */\n\n  return typed(name, matrixAlgorithmSuite({\n    elop: multiplyScalar,\n    SS: matAlgo09xS0Sf,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }));\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/arithmetic/dotMultiply.js"],"names":["factory","createMatAlgo02xDS0","createMatAlgo09xS0Sf","createMatAlgo11xS0s","createMatrixAlgorithmSuite","name","dependencies","createDotMultiply","_ref","typed","matrix","equalScalar","multiplyScalar","concat","matAlgo02xDS0","matAlgo09xS0Sf","matAlgo11xS0s","matrixAlgorithmSuite","elop","SS","DS","Ss"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,gBAAnC,EAAqD,QAArD,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAChF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA;AALE,MAMAL,IANJ;AAOA,MAAIM,aAAa,GAAGb,mBAAmB,CAAC;AACtCQ,IAAAA,KADsC;AAEtCE,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAII,cAAc,GAAGb,oBAAoB,CAAC;AACxCO,IAAAA,KADwC;AAExCE,IAAAA;AAFwC,GAAD,CAAzC;AAIA,MAAIK,aAAa,GAAGb,mBAAmB,CAAC;AACtCM,IAAAA,KADsC;AAEtCE,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAIM,oBAAoB,GAAGb,0BAA0B,CAAC;AACpDK,IAAAA,KADoD;AAEpDC,IAAAA,MAFoD;AAGpDG,IAAAA;AAHoD,GAAD,CAArD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOJ,KAAK,CAACJ,IAAD,EAAOY,oBAAoB,CAAC;AACtCC,IAAAA,IAAI,EAAEN,cADgC;AAEtCO,IAAAA,EAAE,EAAEJ,cAFkC;AAGtCK,IAAAA,EAAE,EAAEN,aAHkC;AAItCO,IAAAA,EAAE,EAAEL;AAJkC,GAAD,CAA3B,CAAZ;AAMD,CA1DoD,CAA9C","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\r\nimport { createMatAlgo09xS0Sf } from '../../type/matrix/utils/matAlgo09xS0Sf.js';\r\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\r\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\r\nvar name = 'dotMultiply';\r\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar', 'concat'];\r\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix,\r\n    equalScalar,\r\n    multiplyScalar,\r\n    concat\r\n  } = _ref;\r\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo09xS0Sf = createMatAlgo09xS0Sf({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matAlgo11xS0s = createMatAlgo11xS0s({\r\n    typed,\r\n    equalScalar\r\n  });\r\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\r\n    typed,\r\n    matrix,\r\n    concat\r\n  });\r\n\r\n  /**\r\n   * Multiply two matrices element wise. The function accepts both matrices and\r\n   * scalar values.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.dotMultiply(x, y)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.dotMultiply(2, 4) // returns 8\r\n   *\r\n   *    a = [[9, 5], [6, 1]]\r\n   *    b = [[3, 2], [5, 2]]\r\n   *\r\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\r\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\r\n   *\r\n   * See also:\r\n   *\r\n   *    multiply, divide, dotDivide\r\n   *\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\r\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\r\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\r\n   */\r\n  return typed(name, matrixAlgorithmSuite({\r\n    elop: multiplyScalar,\r\n    SS: matAlgo09xS0Sf,\r\n    DS: matAlgo02xDS0,\r\n    Ss: matAlgo11xS0s\r\n  }));\r\n});"]},"metadata":{},"sourceType":"module"}