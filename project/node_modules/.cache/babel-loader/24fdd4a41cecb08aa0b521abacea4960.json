{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * PdfPageLayerCollection.ts class for EJ2-PDF\r\n */\n\n\nimport { PdfPageBase } from './pdf-page-base';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfPageLayer } from './pdf-page-layer';\nimport { PdfCollection } from './../general/pdf-collection';\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\nimport { PdfStream } from './../primitives/pdf-stream';\n/**\r\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\r\n */\n\nvar PdfPageLayerCollection =\n/** @class */\nfunction (_super) {\n  __extends(PdfPageLayerCollection, _super);\n\n  function PdfPageLayerCollection(page) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Stores the `number of first level layers` in the document.\r\n     * @default 0\r\n     * @private\r\n     */\n\n\n    _this.parentLayerCount = 0;\n    /**\r\n     * Indicates if `Sublayer` is present.\r\n     * @default false\r\n     * @private\r\n     */\n\n    _this.sublayer = false;\n    /**\r\n     * Stores the `optional content dictionary`.\r\n     * @private\r\n     */\n\n    _this.optionalContent = new PdfDictionary();\n\n    if (page instanceof PdfPageBase) {\n      // if (page == null) {\n      //     throw new Error('ArgumentNullException:page');\n      // }\n      _this.page = page;\n      var lPage = page; // if (lPage != null) {\n\n      _this.parseLayers(lPage); // }\n\n    }\n\n    return _this;\n  }\n\n  PdfPageLayerCollection.prototype.items = function (index, value) {\n    if (typeof index === 'number' && typeof value === 'undefined') {\n      var obj = this.list[index];\n      return obj;\n    } else {\n      if (value == null) {\n        throw new Error('ArgumentNullException: layer');\n      }\n\n      if (value.page !== this.page) {\n        throw new Error('ArgumentException: The layer belongs to another page');\n      } // // Add/remove the layer.\n      // let layer : PdfPageLayer = this.items(index);\n      // if (layer != null) {\n      //     this.RemoveLayer(layer);\n      // }\n      // this.List[index] = value;\n      // this.InsertLayer(index, value);\n\n    }\n  };\n\n  PdfPageLayerCollection.prototype.add = function (firstArgument, secondArgument) {\n    if (typeof firstArgument === 'undefined') {\n      var layer = new PdfPageLayer(this.page);\n      layer.name = '';\n      this.add(layer);\n      return layer;\n    } else if (firstArgument instanceof PdfPageLayer) {\n      // if (layer == null)\n      //     throw new ArgumentNullException(\"layer\");\n      // if (layer.Page != m_page)\n      //     throw new ArgumentException(\"The layer belongs to another page\");\n      var index = this.list.push(firstArgument); // Register layer.\n\n      this.addLayer(index, firstArgument);\n      return index;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Registers `layer` at the page.\r\n   * @private\r\n   */\n\n\n  PdfPageLayerCollection.prototype.addLayer = function (index, layer) {\n    var reference = new PdfReferenceHolder(layer);\n    this.page.contents.add(reference);\n  }; // private RemoveLayer(layer : PdfPageLayer) : void {\n  //     if (layer == null) {\n  //         throw new Error('ArgumentNullException:layer');\n  //     }\n  //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\n  //     if (this.page != null) {\n  //         this.page.Contents.Remove(reference);\n  //     }\n  // }\n\n  /**\r\n   * Inserts `PdfPageLayer` into the collection at specified index.\r\n   * @private\r\n   */\n\n\n  PdfPageLayerCollection.prototype.insert = function (index, layer) {\n    // if (index < 0)\n    //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\n    // if (layer == null)\n    //     throw new ArgumentNullException(\"layer\");\n    // if (layer.Page != m_page)\n    //     throw new ArgumentException(\"The layer belongs to another page\");\n    var list = [];\n    var length = this.list.length;\n\n    for (var i = index; i < length; i++) {\n      list.push(this.list.pop());\n    }\n\n    this.list.push(layer);\n\n    for (var i = 0; i < list.length; i++) {\n      this.list.push(list[i]);\n    } // Register layer.\n\n\n    this.insertLayer(index, layer);\n  };\n  /**\r\n   * Registers layer at the page.\r\n   * @private\r\n   */\n\n\n  PdfPageLayerCollection.prototype.insertLayer = function (index, layer) {\n    if (layer == null) {\n      throw new Error('ArgumentNullException:layer');\n    }\n\n    var reference = new PdfReferenceHolder(layer);\n    this.page.contents.insert(index, reference);\n  }; // tslint:disable\n\n  /**\r\n   * `Parses the layers`.\r\n   * @private\r\n   */\n\n\n  PdfPageLayerCollection.prototype.parseLayers = function (loadedPage) {\n    // if (loadedPage == null) {\n    //     throw new Error('ArgumentNullException:loadedPage');\n    // }\n    var contents = this.page.contents;\n    var resource = this.page.getResources();\n    var crossTable = null;\n    var ocproperties = null;\n    var propertie = null;\n    var isLayerAdded = false; // if (loadedPage instanceof PdfPage) {\n\n    crossTable = loadedPage.crossTable; // } else {\n    //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\n    //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\n    //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\n    //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\n    // }\n\n    var saveStream = new PdfStream();\n    var restoreStream = new PdfStream();\n    var saveState = 'q';\n    var newLine = '\\n';\n    var restoreState = 'Q'; // for (let index : number = 0; index < contents.Items.length; index++) {\n    //     let obj : IPdfPrimitive = contents[index];\n    //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\n    //     if (stream == null)\n    //         throw new PdfDocumentException(\"Invalid contents array.\");\n    //     // if (stream.Compress)\n    //     {\n    //         if (!loadedPage.Imported)\n    //             stream.Decompress();\n    //     }\n    //     byte[] contentId = stream.Data;\n    //     string str = PdfString.ByteToString(contentId);\n    //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\n    //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\n    //     {\n    //         byte[] content = stream.Data;\n    //         byte[] data = new byte[content.Length + 4];\n    //         data[0] = SaveState;\n    //         data[1] = NewLine;\n    //         content.CopyTo(data, 2);\n    //         data[data.Length - 2] = NewLine;\n    //         data[data.Length - 1] = RestoreState;\n    //         stream.Data = data;\n    //     }\n    //     if (ocproperties != null)\n    //     {\n    //         if (Propertie != null)\n    //         {\n    //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\n    //             {\n    //                 String Key = prop.Key.ToString();\n    //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\n    //                 PdfDictionary Dict = null;\n    //                 if (refh != null)\n    //                 {\n    //                     Dict = refh.Object as PdfDictionary;\n    //                 }\n    //                 else\n    //                 {\n    //                     Dict = prop.Value as PdfDictionary;\n    //                 }\n    //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\n    //                 if (m_usage != null)\n    //                 {\n    //                     if (str.Contains(Key))\n    //                     {\n    //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\n    //                         as PdfDictionary;\n    //                         if (printoption != null)\n    //                         {\n    //                             layer.m_printOption = printoption;\n    //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\n    //                             {\n    //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\n    //                                 {\n    //                                     string printState = (value.Value as PdfName).Value;\n    //                                     if (printState.Equals(DictionaryProperties.OCGON))\n    //                                     {\n    //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\n    //                                         break;\n    //                                     }\n    //                                     else\n    //                                     {\n    //                                         layer.PrintState = PdfPrintState.NeverPrint;\n    //                                         break;\n    //                                     }\n    //                                 }\n    //                             }\n    //                         }\n    //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n    //                         layer.Name = layerName.Value;\n    //                         List.add(layer);\n    //                         isLayerAdded = true;\n    //                         if(!str.Contains(\"EMC\"))\n    //                         break;\n    //                     }\n    //                 }\n    //                 else\n    //                 {\n    //                     if (str.Contains(Key))\n    //                     {\n    //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //                         List.add(layer);\n    //                         if(Dict.ContainsKey(DictionaryProperties.Name))\n    //                         {\n    //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\n    //                         layer.Name = layerName.Value;\n    //                         }\n    //                         isLayerAdded = true;\n    //                         break;\n    //                     }\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     if (!isLayerAdded)\n    //     {\n    //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\n    //         List.add(layer);\n    //     }\n    //     else\n    //         isLayerAdded = false;\n    // }\n\n    var saveData = [];\n    saveData.push(saveState);\n    saveStream.data = saveData;\n    contents.insert(0, new PdfReferenceHolder(saveStream));\n    saveData = [];\n    saveData.push(restoreState);\n    restoreStream.data = saveData;\n    contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\n  };\n  /**\r\n   * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\r\n   * @private\r\n   */\n\n\n  PdfPageLayerCollection.prototype.indexOf = function (layer) {\n    if (layer == null) {\n      throw new Error('ArgumentNullException: layer');\n    }\n\n    var index = this.list.indexOf(layer);\n    return index;\n  };\n\n  return PdfPageLayerCollection;\n}(PdfCollection);\n\nexport { PdfPageLayerCollection };","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/pages/pdf-page-layer-collection.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfPageBase","PdfDictionary","PdfPageLayer","PdfCollection","PdfReferenceHolder","PdfStream","PdfPageLayerCollection","_super","page","_this","call","parentLayerCount","sublayer","optionalContent","lPage","parseLayers","items","index","value","obj","list","Error","add","firstArgument","secondArgument","layer","name","push","addLayer","reference","contents","insert","length","i","pop","insertLayer","loadedPage","resource","getResources","crossTable","ocproperties","propertie","isLayerAdded","saveStream","restoreStream","saveState","newLine","restoreState","saveData","data","count","indexOf"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;AAaA;AACA;AACA;;;AACA,SAASI,WAAT,QAA4B,iBAA5B;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA;AACA;AACA;;AACA,IAAIC,sBAAsB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC1DrB,EAAAA,SAAS,CAACoB,sBAAD,EAAyBC,MAAzB,CAAT;;AACA,WAASD,sBAAT,CAAgCE,IAAhC,EAAsC;AAClC,QAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAAjC;AACA;AACR;AACA;AACA;AACA;;;AACQD,IAAAA,KAAK,CAACE,gBAAN,GAAyB,CAAzB;AACA;AACR;AACA;AACA;AACA;;AACQF,IAAAA,KAAK,CAACG,QAAN,GAAiB,KAAjB;AACA;AACR;AACA;AACA;;AACQH,IAAAA,KAAK,CAACI,eAAN,GAAwB,IAAIZ,aAAJ,EAAxB;;AACA,QAAIO,IAAI,YAAYR,WAApB,EAAiC;AAC7B;AACA;AACA;AACAS,MAAAA,KAAK,CAACD,IAAN,GAAaA,IAAb;AACA,UAAIM,KAAK,GAAGN,IAAZ,CAL6B,CAM7B;;AACAC,MAAAA,KAAK,CAACM,WAAN,CAAkBD,KAAlB,EAP6B,CAQ7B;;AACH;;AACD,WAAOL,KAAP;AACH;;AACDH,EAAAA,sBAAsB,CAACR,SAAvB,CAAiCkB,KAAjC,GAAyC,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC7D,QAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOC,KAAP,KAAiB,WAAlD,EAA+D;AAC3D,UAAIC,GAAG,GAAG,KAAKC,IAAL,CAAUH,KAAV,CAAV;AACA,aAAOE,GAAP;AACH,KAHD,MAIK;AACD,UAAID,KAAK,IAAI,IAAb,EAAmB;AACf,cAAM,IAAIG,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACD,UAAIH,KAAK,CAACV,IAAN,KAAe,KAAKA,IAAxB,EAA8B;AAC1B,cAAM,IAAIa,KAAJ,CAAU,sDAAV,CAAN;AACH,OANA,CAOD;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AACJ,GApBD;;AAqBAf,EAAAA,sBAAsB,CAACR,SAAvB,CAAiCwB,GAAjC,GAAuC,UAAUC,aAAV,EAAyBC,cAAzB,EAAyC;AAC5E,QAAI,OAAOD,aAAP,KAAyB,WAA7B,EAA0C;AACtC,UAAIE,KAAK,GAAG,IAAIvB,YAAJ,CAAiB,KAAKM,IAAtB,CAAZ;AACAiB,MAAAA,KAAK,CAACC,IAAN,GAAa,EAAb;AACA,WAAKJ,GAAL,CAASG,KAAT;AACA,aAAOA,KAAP;AACH,KALD,MAMK,IAAIF,aAAa,YAAYrB,YAA7B,EAA2C;AAC5C;AACA;AACA;AACA;AACA,UAAIe,KAAK,GAAG,KAAKG,IAAL,CAAUO,IAAV,CAAeJ,aAAf,CAAZ,CAL4C,CAM5C;;AACA,WAAKK,QAAL,CAAcX,KAAd,EAAqBM,aAArB;AACA,aAAON,KAAP;AACH,KATI,MAUA;AACD,aAAO,CAAP;AACH;AACJ,GApBD;AAqBA;AACJ;AACA;AACA;;;AACIX,EAAAA,sBAAsB,CAACR,SAAvB,CAAiC8B,QAAjC,GAA4C,UAAUX,KAAV,EAAiBQ,KAAjB,EAAwB;AAChE,QAAII,SAAS,GAAG,IAAIzB,kBAAJ,CAAuBqB,KAAvB,CAAhB;AACA,SAAKjB,IAAL,CAAUsB,QAAV,CAAmBR,GAAnB,CAAuBO,SAAvB;AACH,GAHD,CA/E0D,CAmF1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACJ;AACA;AACA;;;AACIvB,EAAAA,sBAAsB,CAACR,SAAvB,CAAiCiC,MAAjC,GAA0C,UAAUd,KAAV,EAAiBQ,KAAjB,EAAwB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,QAAIL,IAAI,GAAG,EAAX;AACA,QAAIY,MAAM,GAAG,KAAKZ,IAAL,CAAUY,MAAvB;;AACA,SAAK,IAAIC,CAAC,GAAGhB,KAAb,EAAoBgB,CAAC,GAAGD,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACjCb,MAAAA,IAAI,CAACO,IAAL,CAAU,KAAKP,IAAL,CAAUc,GAAV,EAAV;AACH;;AACD,SAAKd,IAAL,CAAUO,IAAV,CAAeF,KAAf;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACY,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AAClC,WAAKb,IAAL,CAAUO,IAAV,CAAeP,IAAI,CAACa,CAAD,CAAnB;AACH,KAf6D,CAgB9D;;;AACA,SAAKE,WAAL,CAAiBlB,KAAjB,EAAwBQ,KAAxB;AACH,GAlBD;AAmBA;AACJ;AACA;AACA;;;AACInB,EAAAA,sBAAsB,CAACR,SAAvB,CAAiCqC,WAAjC,GAA+C,UAAUlB,KAAV,EAAiBQ,KAAjB,EAAwB;AACnE,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,YAAM,IAAIJ,KAAJ,CAAU,6BAAV,CAAN;AACH;;AACD,QAAIQ,SAAS,GAAG,IAAIzB,kBAAJ,CAAuBqB,KAAvB,CAAhB;AACA,SAAKjB,IAAL,CAAUsB,QAAV,CAAmBC,MAAnB,CAA0Bd,KAA1B,EAAiCY,SAAjC;AACH,GAND,CAvH0D,CA8H1D;;AACA;AACJ;AACA;AACA;;;AACIvB,EAAAA,sBAAsB,CAACR,SAAvB,CAAiCiB,WAAjC,GAA+C,UAAUqB,UAAV,EAAsB;AACjE;AACA;AACA;AACA,QAAIN,QAAQ,GAAG,KAAKtB,IAAL,CAAUsB,QAAzB;AACA,QAAIO,QAAQ,GAAG,KAAK7B,IAAL,CAAU8B,YAAV,EAAf;AACA,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,YAAY,GAAG,IAAnB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,YAAY,GAAG,KAAnB,CATiE,CAUjE;;AACAH,IAAAA,UAAU,GAAGH,UAAU,CAACG,UAAxB,CAXiE,CAYjE;AACA;AACA;AACA;AACA;AACA;;AACA,QAAII,UAAU,GAAG,IAAItC,SAAJ,EAAjB;AACA,QAAIuC,aAAa,GAAG,IAAIvC,SAAJ,EAApB;AACA,QAAIwC,SAAS,GAAG,GAAhB;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,QAAIC,YAAY,GAAG,GAAnB,CAtBiE,CAuBjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAIC,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACrB,IAAT,CAAckB,SAAd;AACAF,IAAAA,UAAU,CAACM,IAAX,GAAkBD,QAAlB;AACAlB,IAAAA,QAAQ,CAACC,MAAT,CAAgB,CAAhB,EAAmB,IAAI3B,kBAAJ,CAAuBuC,UAAvB,CAAnB;AACAK,IAAAA,QAAQ,GAAG,EAAX;AACAA,IAAAA,QAAQ,CAACrB,IAAT,CAAcoB,YAAd;AACAH,IAAAA,aAAa,CAACK,IAAd,GAAqBD,QAArB;AACAlB,IAAAA,QAAQ,CAACC,MAAT,CAAgBD,QAAQ,CAACoB,KAAzB,EAAgC,IAAI9C,kBAAJ,CAAuBwC,aAAvB,CAAhC;AACH,GAvID;AAwIA;AACJ;AACA;AACA;;;AACItC,EAAAA,sBAAsB,CAACR,SAAvB,CAAiCqD,OAAjC,GAA2C,UAAU1B,KAAV,EAAiB;AACxD,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACf,YAAM,IAAIJ,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACD,QAAIJ,KAAK,GAAG,KAAKG,IAAL,CAAU+B,OAAV,CAAkB1B,KAAlB,CAAZ;AACA,WAAOR,KAAP;AACH,GAND;;AAOA,SAAOX,sBAAP;AACH,CAvR2C,CAuR1CH,aAvR0C,CAA5C;;AAwRA,SAASG,sBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * PdfPageLayerCollection.ts class for EJ2-PDF\r\n */\r\nimport { PdfPageBase } from './pdf-page-base';\r\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\r\nimport { PdfPageLayer } from './pdf-page-layer';\r\nimport { PdfCollection } from './../general/pdf-collection';\r\nimport { PdfReferenceHolder } from './../primitives/pdf-reference';\r\nimport { PdfStream } from './../primitives/pdf-stream';\r\n/**\r\n * The class provides methods and properties to handle the collections of `PdfPageLayer`.\r\n */\r\nvar PdfPageLayerCollection = /** @class */ (function (_super) {\r\n    __extends(PdfPageLayerCollection, _super);\r\n    function PdfPageLayerCollection(page) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Stores the `number of first level layers` in the document.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        _this.parentLayerCount = 0;\r\n        /**\r\n         * Indicates if `Sublayer` is present.\r\n         * @default false\r\n         * @private\r\n         */\r\n        _this.sublayer = false;\r\n        /**\r\n         * Stores the `optional content dictionary`.\r\n         * @private\r\n         */\r\n        _this.optionalContent = new PdfDictionary();\r\n        if (page instanceof PdfPageBase) {\r\n            // if (page == null) {\r\n            //     throw new Error('ArgumentNullException:page');\r\n            // }\r\n            _this.page = page;\r\n            var lPage = page;\r\n            // if (lPage != null) {\r\n            _this.parseLayers(lPage);\r\n            // }\r\n        }\r\n        return _this;\r\n    }\r\n    PdfPageLayerCollection.prototype.items = function (index, value) {\r\n        if (typeof index === 'number' && typeof value === 'undefined') {\r\n            var obj = this.list[index];\r\n            return obj;\r\n        }\r\n        else {\r\n            if (value == null) {\r\n                throw new Error('ArgumentNullException: layer');\r\n            }\r\n            if (value.page !== this.page) {\r\n                throw new Error('ArgumentException: The layer belongs to another page');\r\n            }\r\n            // // Add/remove the layer.\r\n            // let layer : PdfPageLayer = this.items(index);\r\n            // if (layer != null) {\r\n            //     this.RemoveLayer(layer);\r\n            // }\r\n            // this.List[index] = value;\r\n            // this.InsertLayer(index, value);\r\n        }\r\n    };\r\n    PdfPageLayerCollection.prototype.add = function (firstArgument, secondArgument) {\r\n        if (typeof firstArgument === 'undefined') {\r\n            var layer = new PdfPageLayer(this.page);\r\n            layer.name = '';\r\n            this.add(layer);\r\n            return layer;\r\n        }\r\n        else if (firstArgument instanceof PdfPageLayer) {\r\n            // if (layer == null)\r\n            //     throw new ArgumentNullException(\"layer\");\r\n            // if (layer.Page != m_page)\r\n            //     throw new ArgumentException(\"The layer belongs to another page\");\r\n            var index = this.list.push(firstArgument);\r\n            // Register layer.\r\n            this.addLayer(index, firstArgument);\r\n            return index;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * Registers `layer` at the page.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.addLayer = function (index, layer) {\r\n        var reference = new PdfReferenceHolder(layer);\r\n        this.page.contents.add(reference);\r\n    };\r\n    // private RemoveLayer(layer : PdfPageLayer) : void {\r\n    //     if (layer == null) {\r\n    //         throw new Error('ArgumentNullException:layer');\r\n    //     }\r\n    //     let reference : PdfReferenceHolder = new PdfReferenceHolder(layer);\r\n    //     if (this.page != null) {\r\n    //         this.page.Contents.Remove(reference);\r\n    //     }\r\n    // }\r\n    /**\r\n     * Inserts `PdfPageLayer` into the collection at specified index.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.insert = function (index, layer) {\r\n        // if (index < 0)\r\n        //     throw new ArgumentOutOfRangeException(\"index\", \"Value can not be less 0\");\r\n        // if (layer == null)\r\n        //     throw new ArgumentNullException(\"layer\");\r\n        // if (layer.Page != m_page)\r\n        //     throw new ArgumentException(\"The layer belongs to another page\");\r\n        var list = [];\r\n        var length = this.list.length;\r\n        for (var i = index; i < length; i++) {\r\n            list.push(this.list.pop());\r\n        }\r\n        this.list.push(layer);\r\n        for (var i = 0; i < list.length; i++) {\r\n            this.list.push(list[i]);\r\n        }\r\n        // Register layer.\r\n        this.insertLayer(index, layer);\r\n    };\r\n    /**\r\n     * Registers layer at the page.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.insertLayer = function (index, layer) {\r\n        if (layer == null) {\r\n            throw new Error('ArgumentNullException:layer');\r\n        }\r\n        var reference = new PdfReferenceHolder(layer);\r\n        this.page.contents.insert(index, reference);\r\n    };\r\n    // tslint:disable\r\n    /**\r\n     * `Parses the layers`.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.parseLayers = function (loadedPage) {\r\n        // if (loadedPage == null) {\r\n        //     throw new Error('ArgumentNullException:loadedPage');\r\n        // }\r\n        var contents = this.page.contents;\r\n        var resource = this.page.getResources();\r\n        var crossTable = null;\r\n        var ocproperties = null;\r\n        var propertie = null;\r\n        var isLayerAdded = false;\r\n        // if (loadedPage instanceof PdfPage) {\r\n        crossTable = loadedPage.crossTable;\r\n        // } else {\r\n        //     crossTable = (loadedPage as PdfLoadedPage).CrossTable;\r\n        //     Propertie = PdfCrossTable.Dereference(Resource[DictionaryProperties.Properties]) as PdfDictionary;\r\n        //     ocproperties = PdfCrossTable.Dereference((loadedPage as PdfLoadedPage).\r\n        //     Document.Catalog[DictionaryProperties.OCProperties]) as PdfDictionary;\r\n        // }\r\n        var saveStream = new PdfStream();\r\n        var restoreStream = new PdfStream();\r\n        var saveState = 'q';\r\n        var newLine = '\\n';\r\n        var restoreState = 'Q';\r\n        // for (let index : number = 0; index < contents.Items.length; index++) {\r\n        //     let obj : IPdfPrimitive = contents[index];\r\n        //     let stream : PdfStream = crossTable.GetObject(obj) as PdfStream;\r\n        //     if (stream == null)\r\n        //         throw new PdfDocumentException(\"Invalid contents array.\");\r\n        //     // if (stream.Compress)\r\n        //     {\r\n        //         if (!loadedPage.Imported)\r\n        //             stream.Decompress();\r\n        //     }\r\n        //     byte[] contentId = stream.Data;\r\n        //     string str = PdfString.ByteToString(contentId);\r\n        //     if (!loadedPage.Imported && (contents.Count == 1) && ((stream.Data[stream.Data.Length - 2] ==\r\n        //     RestoreState) || (stream.Data[stream.Data.Length - 1] == RestoreState)))\r\n        //     {\r\n        //         byte[] content = stream.Data;\r\n        //         byte[] data = new byte[content.Length + 4];\r\n        //         data[0] = SaveState;\r\n        //         data[1] = NewLine;\r\n        //         content.CopyTo(data, 2);\r\n        //         data[data.Length - 2] = NewLine;\r\n        //         data[data.Length - 1] = RestoreState;\r\n        //         stream.Data = data;\r\n        //     }\r\n        //     if (ocproperties != null)\r\n        //     {\r\n        //         if (Propertie != null)\r\n        //         {\r\n        //             foreach (KeyValuePair<PdfName, IPdfPrimitive> prop in Propertie.Items)\r\n        //             {\r\n        //                 String Key = prop.Key.ToString();\r\n        //                 PdfReferenceHolder refh = prop.Value as PdfReferenceHolder;\r\n        //                 PdfDictionary Dict = null;\r\n        //                 if (refh != null)\r\n        //                 {\r\n        //                     Dict = refh.Object as PdfDictionary;\r\n        //                 }\r\n        //                 else\r\n        //                 {\r\n        //                     Dict = prop.Value as PdfDictionary;\r\n        //                 }\r\n        //                 PdfDictionary m_usage = PdfCrossTable.Dereference(Dict[DictionaryProperties.Usage]) as PdfDictionary;\r\n        //                 if (m_usage != null)\r\n        //                 {\r\n        //                     if (str.Contains(Key))\r\n        //                     {\r\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\r\n        //                         PdfDictionary printoption = PdfCrossTable.Dereference(m_usage[DictionaryProperties.Print])\r\n        //                         as PdfDictionary;\r\n        //                         if (printoption != null)\r\n        //                         {\r\n        //                             layer.m_printOption = printoption;\r\n        //                             foreach (KeyValuePair<PdfName, IPdfPrimitive> value in printoption.Items)\r\n        //                             {\r\n        //                                 if (value.Key.Value.Equals(DictionaryProperties.PrintState))\r\n        //                                 {\r\n        //                                     string printState = (value.Value as PdfName).Value;\r\n        //                                     if (printState.Equals(DictionaryProperties.OCGON))\r\n        //                                     {\r\n        //                                         layer.PrintState = PdfPrintState.AlwaysPrint;\r\n        //                                         break;\r\n        //                                     }\r\n        //                                     else\r\n        //                                     {\r\n        //                                         layer.PrintState = PdfPrintState.NeverPrint;\r\n        //                                         break;\r\n        //                                     }\r\n        //                                 }\r\n        //                             }\r\n        //                         }\r\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\r\n        //                         layer.Name = layerName.Value;\r\n        //                         List.add(layer);\r\n        //                         isLayerAdded = true;\r\n        //                         if(!str.Contains(\"EMC\"))\r\n        //                         break;\r\n        //                     }\r\n        //                 }\r\n        //                 else\r\n        //                 {\r\n        //                     if (str.Contains(Key))\r\n        //                     {\r\n        //                         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\r\n        //                         List.add(layer);\r\n        //                         if(Dict.ContainsKey(DictionaryProperties.Name))\r\n        //                         {\r\n        //                         PdfString layerName = PdfCrossTable.Dereference(Dict[DictionaryProperties.Name]) as PdfString;\r\n        //                         layer.Name = layerName.Value;\r\n        //                         }\r\n        //                         isLayerAdded = true;\r\n        //                         break;\r\n        //                     }\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }\r\n        //     if (!isLayerAdded)\r\n        //     {\r\n        //         PdfPageLayer layer = new PdfPageLayer(loadedPage, stream);\r\n        //         List.add(layer);\r\n        //     }\r\n        //     else\r\n        //         isLayerAdded = false;\r\n        // }\r\n        var saveData = [];\r\n        saveData.push(saveState);\r\n        saveStream.data = saveData;\r\n        contents.insert(0, new PdfReferenceHolder(saveStream));\r\n        saveData = [];\r\n        saveData.push(restoreState);\r\n        restoreStream.data = saveData;\r\n        contents.insert(contents.count, new PdfReferenceHolder(restoreStream));\r\n    };\r\n    /**\r\n     * Returns `index of` the `PdfPageLayer` in the collection if exists, -1 otherwise.\r\n     * @private\r\n     */\r\n    PdfPageLayerCollection.prototype.indexOf = function (layer) {\r\n        if (layer == null) {\r\n            throw new Error('ArgumentNullException: layer');\r\n        }\r\n        var index = this.list.indexOf(layer);\r\n        return index;\r\n    };\r\n    return PdfPageLayerCollection;\r\n}(PdfCollection));\r\nexport { PdfPageLayerCollection };\r\n"]},"metadata":{},"sourceType":"module"}