{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { complexEquals } from '../../utils/complex.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'equalScalar';\nvar dependencies = ['typed', 'config'];\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config\n  } = _ref;\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\r\n   * Test whether two scalar values are nearly equal.\r\n   *\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\r\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\r\n   * @private\r\n   */\n\n  return typed(name, {\n    'boolean, boolean': function booleanBoolean(x, y) {\n      return x === y;\n    },\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return complexEquals(x, y, config.epsilon);\n    }\n  }, compareUnits);\n});\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/relational/equalScalar.js"],"names":["nearlyEqual","bigNearlyEqual","factory","complexEquals","createCompareUnits","name","dependencies","createEqualScalar","_ref","typed","config","compareUnits","booleanBoolean","x","y","numberNumber","epsilon","BigNumberBigNumber","eq","FractionFraction","equals","ComplexComplex","createEqualScalarNumber","_ref2"],"mappings":"AAAA,SAASA,WAAW,IAAIC,cAAxB,QAA8C,sCAA9C;AACA,SAASD,WAAT,QAA4B,uBAA5B;AACA,SAASE,OAAT,QAAwB,wBAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,iBAAiB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAChF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA,MAAIG,YAAY,GAAGP,kBAAkB,CAAC;AACpCK,IAAAA;AADoC,GAAD,CAArC;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjB,wBAAoB,SAASO,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,KAAKC,CAAb;AACD,KAHgB;AAIjB,sBAAkB,SAASC,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOd,WAAW,CAACa,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAlB;AACD,KANgB;AAOjB,4BAAwB,SAASC,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAOD,CAAC,CAACK,EAAF,CAAKJ,CAAL,KAAWb,cAAc,CAACY,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAhC;AACD,KATgB;AAUjB,0BAAsB,SAASG,gBAAT,CAA0BN,CAA1B,EAA6BC,CAA7B,EAAgC;AACpD,aAAOD,CAAC,CAACO,MAAF,CAASN,CAAT,CAAP;AACD,KAZgB;AAajB,wBAAoB,SAASO,cAAT,CAAwBR,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOX,aAAa,CAACU,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAApB;AACD;AAfgB,GAAP,EAgBTL,YAhBS,CAAZ;AAiBD,CAlCoD,CAA9C;AAmCP,OAAO,IAAIW,uBAAuB,GAAGpB,OAAO,CAACG,IAAD,EAAO,CAAC,OAAD,EAAU,QAAV,CAAP,EAA4BkB,KAAK,IAAI;AAC/E,MAAI;AACFd,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAa,KAHJ;AAIA,SAAOd,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASU,YAAT,CAAsBF,CAAtB,EAAyBC,CAAzB,EAA4B;AAC5C,aAAOd,WAAW,CAACa,CAAD,EAAIC,CAAJ,EAAOJ,MAAM,CAACM,OAAd,CAAlB;AACD;AAHgB,GAAP,CAAZ;AAKD,CAV2C,CAArC","sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\r\nimport { nearlyEqual } from '../../utils/number.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { complexEquals } from '../../utils/complex.js';\r\nimport { createCompareUnits } from './compareUnits.js';\r\nvar name = 'equalScalar';\r\nvar dependencies = ['typed', 'config'];\r\nexport var createEqualScalar = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    config\r\n  } = _ref;\r\n  var compareUnits = createCompareUnits({\r\n    typed\r\n  });\r\n\r\n  /**\r\n   * Test whether two scalar values are nearly equal.\r\n   *\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\r\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\r\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\r\n   * @private\r\n   */\r\n  return typed(name, {\r\n    'boolean, boolean': function booleanBoolean(x, y) {\r\n      return x === y;\r\n    },\r\n    'number, number': function numberNumber(x, y) {\r\n      return nearlyEqual(x, y, config.epsilon);\r\n    },\r\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\r\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\r\n    },\r\n    'Fraction, Fraction': function FractionFraction(x, y) {\r\n      return x.equals(y);\r\n    },\r\n    'Complex, Complex': function ComplexComplex(x, y) {\r\n      return complexEquals(x, y, config.epsilon);\r\n    }\r\n  }, compareUnits);\r\n});\r\nexport var createEqualScalarNumber = factory(name, ['typed', 'config'], _ref2 => {\r\n  var {\r\n    typed,\r\n    config\r\n  } = _ref2;\r\n  return typed(name, {\r\n    'number, number': function numberNumber(x, y) {\r\n      return nearlyEqual(x, y, config.epsilon);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}