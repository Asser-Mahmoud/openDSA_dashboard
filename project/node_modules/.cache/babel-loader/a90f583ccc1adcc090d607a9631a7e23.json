{"ast":null,"code":"/* eslint-disable @typescript-eslint/ban-types */\nimport { Query, DataManager, Deferred } from '@syncfusion/ej2-data';\n/**\r\n * data module is used to generate query and dataSource\r\n */\n\nvar Data =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for data module\r\n   *\r\n   * @param dataSource\r\n   * @param query\r\n   * @param dataSource\r\n   * @param query\r\n   * @private\r\n   */\n  function Data(dataSource, query) {\n    this.initDataManager(dataSource, query);\n  }\n  /**\r\n   * The function used to initialize dataManager and query\r\n   *\r\n   * @param dataSource\r\n   * @param query\r\n   * @param dataSource\r\n   * @param query\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n  };\n  /**\r\n   * The function used to generate updated Query from chart model\r\n   *\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.generateQuery = function () {\n    var query = this.query.clone();\n    return query;\n  };\n  /**\r\n   * The function used to get dataSource by executing given Query\r\n   *\r\n   * @param  {Query} query - A Query that specifies to generate dataSource\r\n   * @returns {void}\r\n   * @private\r\n   */\n\n\n  Data.prototype.getData = function (dataQuery) {\n    var _this = this;\n\n    if (this.dataManager.ready) {\n      var dataManagerDeferred_1 = new Deferred();\n      var ready = this.dataManager.ready;\n      ready.then(function () {\n        _this.dataManager.executeQuery(dataQuery).then(function (result) {\n          dataManagerDeferred_1.resolve(result);\n        });\n      }).catch(function (e) {\n        dataManagerDeferred_1.reject(e);\n      });\n      return dataManagerDeferred_1.promise;\n    } else {\n      return this.dataManager.executeQuery(dataQuery);\n    }\n  };\n\n  return Data;\n}();\n\nexport { Data };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-charts/src/common/model/data.js"],"names":["Query","DataManager","Deferred","Data","dataSource","query","initDataManager","prototype","dataManager","generateQuery","clone","getData","dataQuery","_this","ready","dataManagerDeferred_1","then","executeQuery","result","resolve","catch","e","reject","promise"],"mappings":"AAAA;AACA,SAASA,KAAT,EAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,sBAA7C;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;AAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,WAASA,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;AAC7B,SAAKC,eAAL,CAAqBF,UAArB,EAAiCC,KAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeD,eAAf,GAAiC,UAAUF,UAAV,EAAsBC,KAAtB,EAA6B;AAC1D,SAAKG,WAAL,GAAmBJ,UAAU,YAAYH,WAAtB,GAAoCG,UAApC,GAAiD,IAAIH,WAAJ,CAAgBG,UAAhB,CAApE;AACA,SAAKC,KAAL,GAAaA,KAAK,YAAYL,KAAjB,GAAyBK,KAAzB,GAAiC,IAAIL,KAAJ,EAA9C;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,IAAI,CAACI,SAAL,CAAeE,aAAf,GAA+B,YAAY;AACvC,QAAIJ,KAAK,GAAG,KAAKA,KAAL,CAAWK,KAAX,EAAZ;AACA,WAAOL,KAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIF,EAAAA,IAAI,CAACI,SAAL,CAAeI,OAAf,GAAyB,UAAUC,SAAV,EAAqB;AAC1C,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,KAAKL,WAAL,CAAiBM,KAArB,EAA4B;AACxB,UAAIC,qBAAqB,GAAG,IAAIb,QAAJ,EAA5B;AACA,UAAIY,KAAK,GAAG,KAAKN,WAAL,CAAiBM,KAA7B;AACAA,MAAAA,KAAK,CAACE,IAAN,CAAW,YAAY;AACnBH,QAAAA,KAAK,CAACL,WAAN,CAAkBS,YAAlB,CAA+BL,SAA/B,EAA0CI,IAA1C,CAA+C,UAAUE,MAAV,EAAkB;AAC7DH,UAAAA,qBAAqB,CAACI,OAAtB,CAA8BD,MAA9B;AACH,SAFD;AAGH,OAJD,EAIGE,KAJH,CAIS,UAAUC,CAAV,EAAa;AAAEN,QAAAA,qBAAqB,CAACO,MAAtB,CAA6BD,CAA7B;AAAkC,OAJ1D;AAKA,aAAON,qBAAqB,CAACQ,OAA7B;AACH,KATD,MAUK;AACD,aAAO,KAAKf,WAAL,CAAiBS,YAAjB,CAA8BL,SAA9B,CAAP;AACH;AACJ,GAfD;;AAgBA,SAAOT,IAAP;AACH,CA7DyB,EAA1B;;AA8DA,SAASA,IAAT","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\r\nimport { Query, DataManager, Deferred } from '@syncfusion/ej2-data';\r\n/**\r\n * data module is used to generate query and dataSource\r\n */\r\nvar Data = /** @class */ (function () {\r\n    /**\r\n     * Constructor for data module\r\n     *\r\n     * @param dataSource\r\n     * @param query\r\n     * @param dataSource\r\n     * @param query\r\n     * @private\r\n     */\r\n    function Data(dataSource, query) {\r\n        this.initDataManager(dataSource, query);\r\n    }\r\n    /**\r\n     * The function used to initialize dataManager and query\r\n     *\r\n     * @param dataSource\r\n     * @param query\r\n     * @param dataSource\r\n     * @param query\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.initDataManager = function (dataSource, query) {\r\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\r\n        this.query = query instanceof Query ? query : new Query();\r\n    };\r\n    /**\r\n     * The function used to generate updated Query from chart model\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.generateQuery = function () {\r\n        var query = this.query.clone();\r\n        return query;\r\n    };\r\n    /**\r\n     * The function used to get dataSource by executing given Query\r\n     *\r\n     * @param  {Query} query - A Query that specifies to generate dataSource\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    Data.prototype.getData = function (dataQuery) {\r\n        var _this = this;\r\n        if (this.dataManager.ready) {\r\n            var dataManagerDeferred_1 = new Deferred();\r\n            var ready = this.dataManager.ready;\r\n            ready.then(function () {\r\n                _this.dataManager.executeQuery(dataQuery).then(function (result) {\r\n                    dataManagerDeferred_1.resolve(result);\r\n                });\r\n            }).catch(function (e) { dataManagerDeferred_1.reject(e); });\r\n            return dataManagerDeferred_1.promise;\r\n        }\r\n        else {\r\n            return this.dataManager.executeQuery(dataQuery);\r\n        }\r\n    };\r\n    return Data;\r\n}());\r\nexport { Data };\r\n"]},"metadata":{},"sourceType":"module"}