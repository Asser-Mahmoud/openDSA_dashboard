{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/* eslint-disable valid-jsdoc */\nimport { print as smithchartPrint, createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { getElement } from '../utils/helper';\nimport { smithchartBeforePrint } from '../utils/enum';\nimport { PdfPageOrientation, PdfDocument, PdfBitmap } from '@syncfusion/ej2-pdf-export';\n/**\r\n * Annotation Module handles the Annotation for Maps\r\n */\n\nvar ExportUtils =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor for Maps\r\n   *\r\n   * @param {Smithchart} control smithchart instance\r\n   */\n  function ExportUtils(control) {\n    this.control = control;\n  }\n  /**\r\n   * To print the Maps\r\n   *\r\n   * @param {string} elements html element\r\n   * @returns {void}\r\n   */\n\n\n  ExportUtils.prototype.print = function (elements) {\n    this.smithchartPrint = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n    this.smithchartPrint.moveTo(0, 0);\n    this.smithchartPrint.resizeTo(screen.availWidth, screen.availHeight);\n    var argsData = {\n      cancel: false,\n      htmlContent: this.getHTMLContent(elements),\n      name: smithchartBeforePrint\n    };\n    this.control.trigger(smithchartBeforePrint, argsData);\n\n    if (!argsData.cancel) {\n      smithchartPrint(argsData.htmlContent, this.smithchartPrint);\n    }\n  };\n  /**\r\n   * To get the html string of the Maps\r\n   *\r\n   * @param {string} svgElements svg element\r\n   * @private\r\n   * @returns {Element} content of the html element\r\n   */\n\n\n  ExportUtils.prototype.getHTMLContent = function (svgElements) {\n    var div = createElement('div');\n\n    if (svgElements) {\n      if (svgElements instanceof Array) {\n        svgElements.forEach(function (value) {\n          div.appendChild(getElement(value).cloneNode(true));\n        });\n      } else if (svgElements instanceof Element) {\n        div.appendChild(svgElements.cloneNode(true));\n      } else {\n        div.appendChild(getElement(svgElements).cloneNode(true));\n      }\n    } else {\n      div.appendChild(this.control.element.cloneNode(true));\n    }\n\n    return div;\n  };\n  /**\r\n   * To export the file as image/svg format\r\n   *\r\n   * @param {SmithchartExportType} exportType export type\r\n   * @param {string} fileName export file name\r\n   * @param {PdfPageOrientation} orientation orientation of the page\r\n   * @returns {void}\r\n   */\n\n\n  ExportUtils.prototype.export = function (exportType, fileName, orientation) {\n    var _this = this;\n\n    var canvas = createElement('canvas', {\n      id: 'ej2-canvas',\n      attrs: {\n        'width': this.control.availableSize.width.toString(),\n        'height': this.control.availableSize.height.toString()\n      }\n    });\n    var isDownload = !(Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);\n    orientation = isNullOrUndefined(orientation) ? PdfPageOrientation.Landscape : orientation;\n    var svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' + this.control.svgObject.outerHTML + '</svg>';\n    var url = window.URL.createObjectURL(new Blob(exportType === 'SVG' ? [svgData] : [new XMLSerializer().serializeToString(this.control.svgObject)], {\n      type: 'image/svg+xml'\n    }));\n\n    if (exportType === 'SVG') {\n      this.triggerDownload(fileName, exportType, url, isDownload);\n    } else {\n      var image_1 = new Image();\n      var ctx_1 = canvas.getContext('2d');\n\n      image_1.onload = function () {\n        ctx_1.drawImage(image_1, 0, 0);\n        window.URL.revokeObjectURL(url);\n\n        if (exportType === 'PDF') {\n          var document_1 = new PdfDocument();\n          var imageString = canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');\n          document_1.pageSettings.orientation = orientation;\n          imageString = imageString.slice(imageString.indexOf(',') + 1);\n          document_1.pages.add().graphics.drawImage(new PdfBitmap(imageString), 0, 0, _this.control.availableSize.width - 60, _this.control.availableSize.height);\n\n          if (isDownload) {\n            document_1.save(fileName + '.pdf');\n            document_1.destroy();\n          }\n        } else {\n          _this.triggerDownload(fileName, exportType, canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);\n        }\n      };\n\n      image_1.src = url;\n    }\n  };\n  /**\r\n   * To trigger the download element\r\n   *\r\n   * @param {string} fileName export file name\r\n   * @param {SmithchartExportType} exportType export type\r\n   * @param {string} url file url\r\n   * @param {boolean} isDownload download\r\n   */\n\n\n  ExportUtils.prototype.triggerDownload = function (fileName, exportType, url, isDownload) {\n    createElement('a', {\n      attrs: {\n        'download': fileName + '.' + exportType.toLocaleLowerCase(),\n        'href': url\n      }\n    }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {\n      view: window,\n      bubbles: false,\n      cancelable: true\n    }));\n  };\n\n  return ExportUtils;\n}();\n\nexport { ExportUtils };","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-charts/src/smithchart/utils/export.js"],"names":["print","smithchartPrint","createElement","isNullOrUndefined","Browser","getElement","smithchartBeforePrint","PdfPageOrientation","PdfDocument","PdfBitmap","ExportUtils","control","prototype","elements","window","open","outerHeight","outerWidth","moveTo","resizeTo","screen","availWidth","availHeight","argsData","cancel","htmlContent","getHTMLContent","name","trigger","svgElements","div","Array","forEach","value","appendChild","cloneNode","Element","element","export","exportType","fileName","orientation","_this","canvas","id","attrs","availableSize","width","toString","height","isDownload","userAgent","indexOf","Landscape","svgData","svgObject","outerHTML","url","URL","createObjectURL","Blob","XMLSerializer","serializeToString","type","triggerDownload","image_1","Image","ctx_1","getContext","onload","drawImage","revokeObjectURL","document_1","imageString","toDataURL","replace","pageSettings","slice","pages","add","graphics","save","destroy","src","toLocaleLowerCase","dispatchEvent","MouseEvent","view","bubbles","cancelable"],"mappings":"AAAA;;AACA;AACA,SAASA,KAAK,IAAIC,eAAlB,EAAmCC,aAAnC,EAAkDC,iBAAlD,EAAqEC,OAArE,QAAoF,sBAApF;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,qBAAT,QAAsC,eAAtC;AACA,SAASC,kBAAT,EAA6BC,WAA7B,EAA0CC,SAA1C,QAA2D,4BAA3D;AACA;AACA;AACA;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;AACzC;AACJ;AACA;AACA;AACA;AACI,WAASA,WAAT,CAAqBC,OAArB,EAA8B;AAC1B,SAAKA,OAAL,GAAeA,OAAf;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACID,EAAAA,WAAW,CAACE,SAAZ,CAAsBZ,KAAtB,GAA8B,UAAUa,QAAV,EAAoB;AAC9C,SAAKZ,eAAL,GAAuBa,MAAM,CAACC,IAAP,CAAY,EAAZ,EAAgB,OAAhB,EAAyB,YAAYD,MAAM,CAACE,WAAnB,GAAiC,SAAjC,GAA6CF,MAAM,CAACG,UAApD,GAAiE,YAA1F,CAAvB;AACA,SAAKhB,eAAL,CAAqBiB,MAArB,CAA4B,CAA5B,EAA+B,CAA/B;AACA,SAAKjB,eAAL,CAAqBkB,QAArB,CAA8BC,MAAM,CAACC,UAArC,EAAiDD,MAAM,CAACE,WAAxD;AACA,QAAIC,QAAQ,GAAG;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,WAAW,EAAE,KAAKC,cAAL,CAAoBb,QAApB,CAFF;AAGXc,MAAAA,IAAI,EAAErB;AAHK,KAAf;AAKA,SAAKK,OAAL,CAAaiB,OAAb,CAAqBtB,qBAArB,EAA4CiB,QAA5C;;AACA,QAAI,CAACA,QAAQ,CAACC,MAAd,EAAsB;AAClBvB,MAAAA,eAAe,CAACsB,QAAQ,CAACE,WAAV,EAAuB,KAAKxB,eAA5B,CAAf;AACH;AACJ,GAbD;AAcA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,WAAW,CAACE,SAAZ,CAAsBc,cAAtB,GAAuC,UAAUG,WAAV,EAAuB;AAC1D,QAAIC,GAAG,GAAG5B,aAAa,CAAC,KAAD,CAAvB;;AACA,QAAI2B,WAAJ,EAAiB;AACb,UAAIA,WAAW,YAAYE,KAA3B,EAAkC;AAC9BF,QAAAA,WAAW,CAACG,OAAZ,CAAoB,UAAUC,KAAV,EAAiB;AACjCH,UAAAA,GAAG,CAACI,WAAJ,CAAgB7B,UAAU,CAAC4B,KAAD,CAAV,CAAkBE,SAAlB,CAA4B,IAA5B,CAAhB;AACH,SAFD;AAGH,OAJD,MAKK,IAAIN,WAAW,YAAYO,OAA3B,EAAoC;AACrCN,QAAAA,GAAG,CAACI,WAAJ,CAAgBL,WAAW,CAACM,SAAZ,CAAsB,IAAtB,CAAhB;AACH,OAFI,MAGA;AACDL,QAAAA,GAAG,CAACI,WAAJ,CAAgB7B,UAAU,CAACwB,WAAD,CAAV,CAAwBM,SAAxB,CAAkC,IAAlC,CAAhB;AACH;AACJ,KAZD,MAaK;AACDL,MAAAA,GAAG,CAACI,WAAJ,CAAgB,KAAKvB,OAAL,CAAa0B,OAAb,CAAqBF,SAArB,CAA+B,IAA/B,CAAhB;AACH;;AACD,WAAOL,GAAP;AACH,GAnBD;AAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIpB,EAAAA,WAAW,CAACE,SAAZ,CAAsB0B,MAAtB,GAA+B,UAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6C;AACxE,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAIC,MAAM,GAAGzC,aAAa,CAAC,QAAD,EAAW;AACjC0C,MAAAA,EAAE,EAAE,YAD6B;AAEjCC,MAAAA,KAAK,EAAE;AACH,iBAAS,KAAKlC,OAAL,CAAamC,aAAb,CAA2BC,KAA3B,CAAiCC,QAAjC,EADN;AAEH,kBAAU,KAAKrC,OAAL,CAAamC,aAAb,CAA2BG,MAA3B,CAAkCD,QAAlC;AAFP;AAF0B,KAAX,CAA1B;AAOA,QAAIE,UAAU,GAAG,EAAE9C,OAAO,CAAC+C,SAAR,CAAkBH,QAAlB,GAA6BI,OAA7B,CAAqC,gBAArC,IAAyD,CAAC,CAA5D,CAAjB;AACAX,IAAAA,WAAW,GAAGtC,iBAAiB,CAACsC,WAAD,CAAjB,GAAiClC,kBAAkB,CAAC8C,SAApD,GAAgEZ,WAA9E;AACA,QAAIa,OAAO,GAAG,wFACV,KAAK3C,OAAL,CAAa4C,SAAb,CAAuBC,SADb,GAEV,QAFJ;AAGA,QAAIC,GAAG,GAAG3C,MAAM,CAAC4C,GAAP,CAAWC,eAAX,CAA2B,IAAIC,IAAJ,CAASrB,UAAU,KAAK,KAAf,GAAuB,CAACe,OAAD,CAAvB,GAC1C,CAAE,IAAIO,aAAJ,EAAD,CAAsBC,iBAAtB,CAAwC,KAAKnD,OAAL,CAAa4C,SAArD,CAAD,CADiC,EACkC;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KADlC,CAA3B,CAAV;;AAEA,QAAIxB,UAAU,KAAK,KAAnB,EAA0B;AACtB,WAAKyB,eAAL,CAAqBxB,QAArB,EAA+BD,UAA/B,EAA2CkB,GAA3C,EAAgDP,UAAhD;AACH,KAFD,MAGK;AACD,UAAIe,OAAO,GAAG,IAAIC,KAAJ,EAAd;AACA,UAAIC,KAAK,GAAGxB,MAAM,CAACyB,UAAP,CAAkB,IAAlB,CAAZ;;AACAH,MAAAA,OAAO,CAACI,MAAR,GAAkB,YAAY;AAC1BF,QAAAA,KAAK,CAACG,SAAN,CAAgBL,OAAhB,EAAyB,CAAzB,EAA4B,CAA5B;AACAnD,QAAAA,MAAM,CAAC4C,GAAP,CAAWa,eAAX,CAA2Bd,GAA3B;;AACA,YAAIlB,UAAU,KAAK,KAAnB,EAA0B;AACtB,cAAIiC,UAAU,GAAG,IAAIhE,WAAJ,EAAjB;AACA,cAAIiE,WAAW,GAAG9B,MAAM,CAAC+B,SAAP,CAAiB,YAAjB,EAA+BC,OAA/B,CAAuC,YAAvC,EAAqD,oBAArD,CAAlB;AACAH,UAAAA,UAAU,CAACI,YAAX,CAAwBnC,WAAxB,GAAsCA,WAAtC;AACAgC,UAAAA,WAAW,GAAGA,WAAW,CAACI,KAAZ,CAAkBJ,WAAW,CAACrB,OAAZ,CAAoB,GAApB,IAA2B,CAA7C,CAAd;AACAoB,UAAAA,UAAU,CAACM,KAAX,CAAiBC,GAAjB,GAAuBC,QAAvB,CAAgCV,SAAhC,CAA0C,IAAI7D,SAAJ,CAAcgE,WAAd,CAA1C,EAAsE,CAAtE,EAAyE,CAAzE,EAA6E/B,KAAK,CAAC/B,OAAN,CAAcmC,aAAd,CAA4BC,KAA5B,GAAoC,EAAjH,EAAsHL,KAAK,CAAC/B,OAAN,CAAcmC,aAAd,CAA4BG,MAAlJ;;AACA,cAAIC,UAAJ,EAAgB;AACZsB,YAAAA,UAAU,CAACS,IAAX,CAAgBzC,QAAQ,GAAG,MAA3B;AACAgC,YAAAA,UAAU,CAACU,OAAX;AACH;AACJ,SAVD,MAWK;AACDxC,UAAAA,KAAK,CAACsB,eAAN,CAAsBxB,QAAtB,EAAgCD,UAAhC,EAA4CI,MAAM,CAAC+B,SAAP,CAAiB,WAAjB,EAA8BC,OAA9B,CAAsC,WAAtC,EAAmD,oBAAnD,CAA5C,EAAsHzB,UAAtH;AACH;AACJ,OAjBD;;AAkBAe,MAAAA,OAAO,CAACkB,GAAR,GAAc1B,GAAd;AACH;AACJ,GA1CD;AA2CA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI/C,EAAAA,WAAW,CAACE,SAAZ,CAAsBoD,eAAtB,GAAwC,UAAUxB,QAAV,EAAoBD,UAApB,EAAgCkB,GAAhC,EAAqCP,UAArC,EAAiD;AACrFhD,IAAAA,aAAa,CAAC,GAAD,EAAM;AACf2C,MAAAA,KAAK,EAAE;AACH,oBAAYL,QAAQ,GAAG,GAAX,GAAiBD,UAAU,CAAC6C,iBAAX,EAD1B;AAEH,gBAAQ3B;AAFL;AADQ,KAAN,CAAb,CAKG4B,aALH,CAKiB,IAAIC,UAAJ,CAAepC,UAAU,GAAG,OAAH,GAAa,MAAtC,EAA8C;AAC3DqC,MAAAA,IAAI,EAAEzE,MADqD;AAE3D0E,MAAAA,OAAO,EAAE,KAFkD;AAG3DC,MAAAA,UAAU,EAAE;AAH+C,KAA9C,CALjB;AAUH,GAXD;;AAYA,SAAO/E,WAAP;AACH,CAhIgC,EAAjC;;AAiIA,SAASA,WAAT","sourcesContent":["/* eslint-disable @typescript-eslint/no-inferrable-types */\r\n/* eslint-disable valid-jsdoc */\r\nimport { print as smithchartPrint, createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\r\nimport { getElement } from '../utils/helper';\r\nimport { smithchartBeforePrint } from '../utils/enum';\r\nimport { PdfPageOrientation, PdfDocument, PdfBitmap } from '@syncfusion/ej2-pdf-export';\r\n/**\r\n * Annotation Module handles the Annotation for Maps\r\n */\r\nvar ExportUtils = /** @class */ (function () {\r\n    /**\r\n     * Constructor for Maps\r\n     *\r\n     * @param {Smithchart} control smithchart instance\r\n     */\r\n    function ExportUtils(control) {\r\n        this.control = control;\r\n    }\r\n    /**\r\n     * To print the Maps\r\n     *\r\n     * @param {string} elements html element\r\n     * @returns {void}\r\n     */\r\n    ExportUtils.prototype.print = function (elements) {\r\n        this.smithchartPrint = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\r\n        this.smithchartPrint.moveTo(0, 0);\r\n        this.smithchartPrint.resizeTo(screen.availWidth, screen.availHeight);\r\n        var argsData = {\r\n            cancel: false,\r\n            htmlContent: this.getHTMLContent(elements),\r\n            name: smithchartBeforePrint\r\n        };\r\n        this.control.trigger(smithchartBeforePrint, argsData);\r\n        if (!argsData.cancel) {\r\n            smithchartPrint(argsData.htmlContent, this.smithchartPrint);\r\n        }\r\n    };\r\n    /**\r\n     * To get the html string of the Maps\r\n     *\r\n     * @param {string} svgElements svg element\r\n     * @private\r\n     * @returns {Element} content of the html element\r\n     */\r\n    ExportUtils.prototype.getHTMLContent = function (svgElements) {\r\n        var div = createElement('div');\r\n        if (svgElements) {\r\n            if (svgElements instanceof Array) {\r\n                svgElements.forEach(function (value) {\r\n                    div.appendChild(getElement(value).cloneNode(true));\r\n                });\r\n            }\r\n            else if (svgElements instanceof Element) {\r\n                div.appendChild(svgElements.cloneNode(true));\r\n            }\r\n            else {\r\n                div.appendChild(getElement(svgElements).cloneNode(true));\r\n            }\r\n        }\r\n        else {\r\n            div.appendChild(this.control.element.cloneNode(true));\r\n        }\r\n        return div;\r\n    };\r\n    /**\r\n     * To export the file as image/svg format\r\n     *\r\n     * @param {SmithchartExportType} exportType export type\r\n     * @param {string} fileName export file name\r\n     * @param {PdfPageOrientation} orientation orientation of the page\r\n     * @returns {void}\r\n     */\r\n    ExportUtils.prototype.export = function (exportType, fileName, orientation) {\r\n        var _this = this;\r\n        var canvas = createElement('canvas', {\r\n            id: 'ej2-canvas',\r\n            attrs: {\r\n                'width': this.control.availableSize.width.toString(),\r\n                'height': this.control.availableSize.height.toString()\r\n            }\r\n        });\r\n        var isDownload = !(Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);\r\n        orientation = isNullOrUndefined(orientation) ? PdfPageOrientation.Landscape : orientation;\r\n        var svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' +\r\n            this.control.svgObject.outerHTML +\r\n            '</svg>';\r\n        var url = window.URL.createObjectURL(new Blob(exportType === 'SVG' ? [svgData] :\r\n            [(new XMLSerializer()).serializeToString(this.control.svgObject)], { type: 'image/svg+xml' }));\r\n        if (exportType === 'SVG') {\r\n            this.triggerDownload(fileName, exportType, url, isDownload);\r\n        }\r\n        else {\r\n            var image_1 = new Image();\r\n            var ctx_1 = canvas.getContext('2d');\r\n            image_1.onload = (function () {\r\n                ctx_1.drawImage(image_1, 0, 0);\r\n                window.URL.revokeObjectURL(url);\r\n                if (exportType === 'PDF') {\r\n                    var document_1 = new PdfDocument();\r\n                    var imageString = canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');\r\n                    document_1.pageSettings.orientation = orientation;\r\n                    imageString = imageString.slice(imageString.indexOf(',') + 1);\r\n                    document_1.pages.add().graphics.drawImage(new PdfBitmap(imageString), 0, 0, (_this.control.availableSize.width - 60), _this.control.availableSize.height);\r\n                    if (isDownload) {\r\n                        document_1.save(fileName + '.pdf');\r\n                        document_1.destroy();\r\n                    }\r\n                }\r\n                else {\r\n                    _this.triggerDownload(fileName, exportType, canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);\r\n                }\r\n            });\r\n            image_1.src = url;\r\n        }\r\n    };\r\n    /**\r\n     * To trigger the download element\r\n     *\r\n     * @param {string} fileName export file name\r\n     * @param {SmithchartExportType} exportType export type\r\n     * @param {string} url file url\r\n     * @param {boolean} isDownload download\r\n     */\r\n    ExportUtils.prototype.triggerDownload = function (fileName, exportType, url, isDownload) {\r\n        createElement('a', {\r\n            attrs: {\r\n                'download': fileName + '.' + exportType.toLocaleLowerCase(),\r\n                'href': url\r\n            }\r\n        }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {\r\n            view: window,\r\n            bubbles: false,\r\n            cancelable: true\r\n        }));\r\n    };\r\n    return ExportUtils;\r\n}());\r\nexport { ExportUtils };\r\n"]},"metadata":{},"sourceType":"module"}