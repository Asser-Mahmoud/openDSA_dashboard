{"ast":null,"code":"import { arraySize } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nvar name = 'ifft';\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    fft,\n    dotDivide,\n    conj\n  } = _ref;\n  /**\r\n   * Calculate N-dimensional inverse fourier transform\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.ifft(arr)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\r\n   *\r\n   * See Also:\r\n   *\r\n   *      fft\r\n   *\r\n   * @param {Array | Matrix} arr    An array or matrix\r\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\r\n   */\n\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(arr) {\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/matrix/ifft.js"],"names":["arraySize","factory","isMatrix","name","dependencies","createIfft","_ref","typed","fft","dotDivide","conj","ArrayMatrix","arr","size","reduce","acc","curr"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,WAAjB,EAA8B,MAA9B,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,GAFE;AAGFC,IAAAA,SAHE;AAIFC,IAAAA;AAJE,MAKAJ,IALJ;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkB,SAASQ,WAAT,CAAqBC,GAArB,EAA0B;AAC1C,UAAIC,IAAI,GAAGX,QAAQ,CAACU,GAAD,CAAR,GAAgBA,GAAG,CAACC,IAAJ,EAAhB,GAA6Bb,SAAS,CAACY,GAAD,CAAjD;AACA,aAAOH,SAAS,CAACC,IAAI,CAACF,GAAG,CAACE,IAAI,CAACE,GAAD,CAAL,CAAJ,CAAL,EAAuBC,IAAI,CAACC,MAAL,CAAY,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAjC,EAAuC,CAAvC,CAAvB,CAAhB;AACD;AAJgB,GAAP,CAAZ;AAMD,CA/B6C,CAAvC","sourcesContent":["import { arraySize } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { isMatrix } from '../../utils/is.js';\r\nvar name = 'ifft';\r\nvar dependencies = ['typed', 'fft', 'dotDivide', 'conj'];\r\nexport var createIfft = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    fft,\r\n    dotDivide,\r\n    conj\r\n  } = _ref;\r\n  /**\r\n   * Calculate N-dimensional inverse fourier transform\r\n   *\r\n   * Syntax:\r\n   *\r\n   *     math.ifft(arr)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.ifft([[2, 2], [0, 0]]) // returns [[{re:1, im:0}, {re:0, im:0}], [{re:1, im:0}, {re:0, im:0}]]\r\n   *\r\n   * See Also:\r\n   *\r\n   *      fft\r\n   *\r\n   * @param {Array | Matrix} arr    An array or matrix\r\n   * @return {Array | Matrix}       N-dimensional fourier transformation of the array\r\n   */\r\n  return typed(name, {\r\n    'Array | Matrix': function ArrayMatrix(arr) {\r\n      var size = isMatrix(arr) ? arr.size() : arraySize(arr);\r\n      return dotDivide(conj(fft(conj(arr))), size.reduce((acc, curr) => acc * curr, 1));\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}