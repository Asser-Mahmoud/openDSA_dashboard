{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport math from 'mathjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IRT = () => {\n  _s();\n\n  const [selectedExercise, setSelectedExercise] = useState('');\n  const [plotData, setPlotData] = useState({\n    icc: {},\n    tcc: {}\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _response$data$Abilit, _response$data$Discri, _response$data$Diffic;\n\n        const response = await axios.post(`http://localhost:4000/estimate/attemps_test.csv`);\n        const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n        const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : [];\n        const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n        console.log(x, a[0], b[0]);\n\n        const sigmoid = (x, a, b) => {\n          const denominator = 1 + math.exp(-a * (x - b));\n          return denominator === 0 ? NaN : 1 / denominator;\n        };\n\n        const y = x.map(val => sigmoid(val, a[0], b[0]));\n        console.log(y);\n        const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n        const sortedX = sortedData.map(pair => pair[0]);\n        const sortedY = sortedData.map(pair => pair[1]);\n        const meanA = a[0];\n        const meanB = b[0];\n        const minAbility = math.min(...x);\n        const maxAbility = math.max(...x);\n        const range = maxAbility - minAbility;\n        const step = range / 100;\n        const abilityValues = Array.from({\n          length: 100\n        }, (_, i) => minAbility + step * i);\n        const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB));\n        setPlotData({\n          icc: { ...plotData.icc,\n            [selectedExercise]: {\n              x: sortedX,\n              y: sortedY\n            }\n          },\n          tcc: { ...plotData.tcc,\n            [selectedExercise]: {\n              x: abilityValues,\n              y: y2\n            }\n          }\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    if (selectedExercise) {\n      fetchData();\n    }\n  }, [selectedExercise]);\n  const exerciseOptions = ['Exercise 1', 'Exercise 2', 'Exercise 3'];\n\n  const handleExerciseChange = event => {\n    setSelectedExercise(event.target.value);\n  };\n\n  const plotOptions = {\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Ability'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Probability'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exercise Plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedExercise,\n      onChange: handleExerciseChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an exercise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), exerciseOptions.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: exercise,\n        children: exercise\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), selectedExercise && plotData.icc[selectedExercise] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item Characteristic Curve (ICC) - \", selectedExercise]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: plotData.icc[selectedExercise].x,\n          datasets: [{\n            label: 'ICC',\n            data: plotData.icc[selectedExercise].y,\n            borderColor: 'blue',\n            fill: false\n          }]\n        },\n        options: plotOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), selectedExercise && plotData.tcc[selectedExercise] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Test Characteristic Curve (TCC) - \", selectedExercise]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: plotData.tcc[selectedExercise].x,\n          datasets: [{\n            label: 'TCC',\n            data: plotData.tcc[selectedExercise].y,\n            borderColor: 'green',\n            fill: false\n          }]\n        },\n        options: plotOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IRT, \"jeKIdxPweKMilCev9pravVa3/z4=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","useEffect","axios","Line","math","IRT","selectedExercise","setSelectedExercise","plotData","setPlotData","icc","tcc","fetchData","response","post","x","data","Ability","a","Discrimination","b","Difficulty","console","log","sigmoid","denominator","exp","NaN","y","map","val","sortedData","value","index","sort","sortedX","pair","sortedY","meanA","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","Array","from","length","_","i","y2","error","exerciseOptions","handleExerciseChange","event","target","plotOptions","scales","title","display","text","exercise","labels","datasets","label","borderColor","fill"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport math from 'mathjs';\r\n\r\nconst IRT = () => {\r\n  const [selectedExercise, setSelectedExercise] = useState('');\r\n  const [plotData, setPlotData] = useState({ icc: {}, tcc: {} });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.post(`http://localhost:4000/estimate/attemps_test.csv`);\r\n        const x = response.data.Ability ?? [];\r\n        const a = response.data.Discrimination ?? [];\r\n        const b = response.data.Difficulty ?? [];\r\n        console.log(x, a[0], b[0]);\r\n        const sigmoid = (x, a, b) => {\r\n          const denominator = 1 + math.exp(-a * (x - b));\r\n          return denominator === 0 ? NaN : 1 / denominator;\r\n        };\r\n        const y = x.map((val) => sigmoid(val, a[0], b[0]));\r\n        console.log(y);\r\n        const sortedData = x\r\n          .map((value, index) => [value, y[index]])\r\n          .sort((a, b) => a[0] - b[0]);\r\n        const sortedX = sortedData.map((pair) => pair[0]);\r\n        const sortedY = sortedData.map((pair) => pair[1]);\r\n        const meanA = a[0];\r\n        const meanB = b[0];\r\n\r\n        const minAbility = math.min(...x);\r\n        const maxAbility = math.max(...x);\r\n        const range = maxAbility - minAbility;\r\n        const step = range / 100;\r\n        const abilityValues = Array.from({ length: 100 }, (_, i) => minAbility + step * i);\r\n        const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n        setPlotData({\r\n          icc: { ...plotData.icc, [selectedExercise]: { x: sortedX, y: sortedY } },\r\n          tcc: { ...plotData.tcc, [selectedExercise]: { x: abilityValues, y: y2 } },\r\n        });\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    if (selectedExercise) {\r\n      fetchData();\r\n    }\r\n  }, [selectedExercise]);\r\n\r\n  const exerciseOptions = ['Exercise 1', 'Exercise 2', 'Exercise 3'];\r\n\r\n  const handleExerciseChange = (event) => {\r\n    setSelectedExercise(event.target.value);\r\n  };\r\n\r\n  const plotOptions = {\r\n    scales: {\r\n      x: {\r\n        title: {\r\n          display: true,\r\n          text: 'Ability',\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Probability',\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Exercise Plot</h2>\r\n      <select value={selectedExercise} onChange={handleExerciseChange}>\r\n        <option value=\"\">Select an exercise</option>\r\n        {exerciseOptions.map((exercise, index) => (\r\n          <option key={index} value={exercise}>\r\n            {exercise}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {selectedExercise && plotData.icc[selectedExercise] && (\r\n        <div>\r\n          <h3>Item Characteristic Curve (ICC) - {selectedExercise}</h3>\r\n          <Line\r\n            data={{\r\n              labels: plotData.icc[selectedExercise].x,\r\n              datasets: [\r\n                {\r\n                  label: 'ICC',\r\n                  data: plotData.icc[selectedExercise].y,\r\n                  borderColor: 'blue',\r\n                  fill: false,\r\n                },\r\n              ],\r\n            }}\r\n            options={plotOptions}\r\n          />\r\n        </div>\r\n      )}\r\n      {selectedExercise && plotData.tcc[selectedExercise] && (\r\n        <div>\r\n          <h3>Test Characteristic Curve (TCC) - {selectedExercise}</h3>\r\n          <Line\r\n            data={{\r\n              labels: plotData.tcc[selectedExercise].x,\r\n              datasets: [\r\n                {\r\n                  label: 'TCC',\r\n                  data: plotData.tcc[selectedExercise].y,\r\n                  borderColor: 'green',\r\n                  fill: false,\r\n                },\r\n              ],\r\n            }}\r\n            options={plotOptions}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}