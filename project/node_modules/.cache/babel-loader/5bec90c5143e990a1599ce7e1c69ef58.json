{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n  const [selectedExercise, setSelectedExercise] = useState(0);\n  const [discrimination, setDiscrimination] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    const data = 'attempts_test.csv';\n    axios.post(`http://localhost:4000/estimate/${data}`).then(response => {\n      var _response$data$Discri, _response$data, _response$data2;\n\n      setDiscrimination((_response$data$Discri = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : []);\n      updatePlotData(selectedExercise, {\n        Ability: (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.Ability,\n        Discrimination: a,\n        Difficulty: b\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleExerciseChange = event => {\n    const exerciseIndex = parseInt(event.target.value);\n    setSelectedExercise(exerciseIndex);\n    updatePlotData(exerciseIndex);\n  };\n\n  const updatePlotData = (exerciseIndex, data) => {\n    const {\n      Ability,\n      Discrimination,\n      Difficulty\n    } = data;\n    const x = Ability || [];\n    const a = Discrimination || [];\n    const b = Difficulty || [];\n\n    if (!Ability || !Discrimination || !Difficulty || Ability.length === 0) {\n      setPlotData({\n        icc: {\n          x: [],\n          y: []\n        },\n        tcc: {\n          x: [],\n          y: []\n        }\n      });\n      return;\n    }\n\n    const selectedDiscrimination = a[exerciseIndex];\n    const selectedDifficulty = b[exerciseIndex];\n\n    const sigmoid = (x, a, b) => {\n      const denominator = 1 + Math.exp(-a * (x - b));\n      return denominator === 0 ? NaN : 1 / denominator;\n    };\n\n    const y = x.map(val => sigmoid(val, selectedDiscrimination, selectedDifficulty));\n    const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n    const sortedX = sortedData.map(pair => pair[0]);\n    const sortedY = sortedData.map(pair => pair[1]);\n    const meanA = math.mean(a);\n    const meanB = math.mean(b);\n    const minAbility = math.min(...Ability);\n    const maxAbility = math.max(...Ability);\n    const range = maxAbility - minAbility;\n    const step = range / 100;\n    const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n    const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB));\n    setPlotData({\n      icc: {\n        x: sortedX,\n        y: sortedY\n      },\n      tcc: {\n        x: abilityValues,\n        y: y2\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedExercise,\n      onChange: handleExerciseChange,\n      children: discrimination.map((_, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index,\n        children: [\"Exercise \", index]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Item Response Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.icc.x,\n            y: plotData.icc.y,\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Item Response Curve',\n            xaxis: {\n              title: 'Latent Trait'\n            },\n            yaxis: {\n              title: 'Item Response'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Test Characteristic Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.tcc.x,\n            y: plotData.tcc.y,\n            type: 'scatter',\n            mode: 'lines',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Test Characteristic Curve'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IRT, \"bHyi4BLPVcqtyWtEsqFDS0Ic2go=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","useEffect","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","selectedExercise","setSelectedExercise","discrimination","setDiscrimination","fetchData","data","post","then","response","Discrimination","updatePlotData","Ability","a","Difficulty","b","catch","error","console","handleExerciseChange","event","exerciseIndex","parseInt","target","value","length","selectedDiscrimination","selectedDifficulty","sigmoid","denominator","Math","exp","NaN","map","val","sortedData","index","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","_","display","flex","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,MAAT,EAAiBC,GAAjB,QAA4B,QAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,IAAI,GAAGH,MAAM,CAACC,GAAD,CAAnB;;AAEA,SAASG,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC;AAAEa,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAE;AAAZ,KAAP;AAAyBC,IAAAA,GAAG,EAAE;AAAEF,MAAAA,CAAC,EAAE,EAAL;AAASC,MAAAA,CAAC,EAAE;AAAZ;AAA9B,GAAD,CAAxC;AACA,QAAM,CAACE,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,CAAD,CAAxD;AACA,QAAM,CAACmB,cAAD,EAAiBC,iBAAjB,IAAsCpB,QAAQ,CAAC,EAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,SAAS,GAAG,MAAM;AACtB,UAAMC,IAAI,GAAG,mBAAb;AACApB,IAAAA,KAAK,CACFqB,IADH,CACS,kCAAiCD,IAAK,EAD/C,EAEGE,IAFH,CAEQC,QAAQ,IAAI;AAAA;;AAChBL,MAAAA,iBAAiB,4CAACK,QAAQ,CAACH,IAAV,mDAAC,eAAeI,cAAhB,yEAAkC,EAAlC,CAAjB;AACAC,MAAAA,cAAc,CAACV,gBAAD,EAAmB;AAAEW,QAAAA,OAAO,qBAAEH,QAAQ,CAACH,IAAX,oDAAE,gBAAeM,OAA1B;AAAmCF,QAAAA,cAAc,EAAEG,CAAnD;AAAsDC,QAAAA,UAAU,EAAEC;AAAlE,OAAnB,CAAd;AACD,KALH,EAMGC,KANH,CAMSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KARH;AASD,GAXD;;AAaA,QAAME,oBAAoB,GAAIC,KAAD,IAAW;AACtC,UAAMC,aAAa,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAN,CAAaC,KAAd,CAA9B;AACAtB,IAAAA,mBAAmB,CAACmB,aAAD,CAAnB;AACAV,IAAAA,cAAc,CAACU,aAAD,CAAd;AACD,GAJD;;AAMA,QAAMV,cAAc,GAAG,CAACU,aAAD,EAAgBf,IAAhB,KAAyB;AAC9C,UAAM;AAAEM,MAAAA,OAAF;AAAWF,MAAAA,cAAX;AAA2BI,MAAAA;AAA3B,QAA0CR,IAAhD;AACA,UAAMR,CAAC,GAAGc,OAAO,IAAI,EAArB;AACA,UAAMC,CAAC,GAAGH,cAAc,IAAI,EAA5B;AACA,UAAMK,CAAC,GAAGD,UAAU,IAAI,EAAxB;;AACA,QAAI,CAACF,OAAD,IAAY,CAACF,cAAb,IAA+B,CAACI,UAAhC,IAA8CF,OAAO,CAACa,MAAR,KAAmB,CAArE,EAAwE;AACtE7B,MAAAA,WAAW,CAAC;AAAEC,QAAAA,GAAG,EAAE;AAAEC,UAAAA,CAAC,EAAE,EAAL;AAASC,UAAAA,CAAC,EAAE;AAAZ,SAAP;AAAyBC,QAAAA,GAAG,EAAE;AAAEF,UAAAA,CAAC,EAAE,EAAL;AAASC,UAAAA,CAAC,EAAE;AAAZ;AAA9B,OAAD,CAAX;AACA;AACD;;AACD,UAAM2B,sBAAsB,GAAGb,CAAC,CAACQ,aAAD,CAAhC;AACA,UAAMM,kBAAkB,GAAGZ,CAAC,CAACM,aAAD,CAA5B;;AAEA,UAAMO,OAAO,GAAG,CAAC9B,CAAD,EAAIe,CAAJ,EAAOE,CAAP,KAAa;AAC3B,YAAMc,WAAW,GAAG,IAAIC,IAAI,CAACC,GAAL,CAAS,CAAClB,CAAD,IAAMf,CAAC,GAAGiB,CAAV,CAAT,CAAxB;AACA,aAAOc,WAAW,KAAK,CAAhB,GAAoBG,GAApB,GAA0B,IAAIH,WAArC;AACD,KAHD;;AAKA,UAAM9B,CAAC,GAAGD,CAAC,CAACmC,GAAF,CAAOC,GAAD,IAASN,OAAO,CAACM,GAAD,EAAMR,sBAAN,EAA8BC,kBAA9B,CAAtB,CAAV;AACA,UAAMQ,UAAU,GAAGrC,CAAC,CAACmC,GAAF,CAAM,CAACT,KAAD,EAAQY,KAAR,KAAkB,CAACZ,KAAD,EAAQzB,CAAC,CAACqC,KAAD,CAAT,CAAxB,EAA2CC,IAA3C,CAAgD,CAACxB,CAAD,EAAIE,CAAJ,KAAUF,CAAC,CAAC,CAAD,CAAD,GAAOE,CAAC,CAAC,CAAD,CAAlE,CAAnB;AACA,UAAMuB,OAAO,GAAGH,UAAU,CAACF,GAAX,CAAeM,IAAI,IAAIA,IAAI,CAAC,CAAD,CAA3B,CAAhB;AACA,UAAMC,OAAO,GAAGL,UAAU,CAACF,GAAX,CAAeM,IAAI,IAAIA,IAAI,CAAC,CAAD,CAA3B,CAAhB;AAEA,UAAME,KAAK,GAAGlD,IAAI,CAACmD,IAAL,CAAU7B,CAAV,CAAd;AACA,UAAM8B,KAAK,GAAGpD,IAAI,CAACmD,IAAL,CAAU3B,CAAV,CAAd;AACA,UAAM6B,UAAU,GAAGrD,IAAI,CAACsD,GAAL,CAAS,GAAGjC,OAAZ,CAAnB;AACA,UAAMkC,UAAU,GAAGvD,IAAI,CAACwD,GAAL,CAAS,GAAGnC,OAAZ,CAAnB;AACA,UAAMoC,KAAK,GAAGF,UAAU,GAAGF,UAA3B;AACA,UAAMK,IAAI,GAAGD,KAAK,GAAG,GAArB;AACA,UAAME,aAAa,GAAG3D,IAAI,CAACyD,KAAL,CAAWJ,UAAX,EAAuBE,UAAvB,EAAmCG,IAAnC,EAAyCE,OAAzC,EAAtB;AACA,UAAMC,EAAE,GAAGF,aAAa,CAACjB,GAAd,CAAmBC,GAAD,IAASN,OAAO,CAACM,GAAD,EAAMO,KAAN,EAAaE,KAAb,CAAlC,CAAX;AAEA/C,IAAAA,WAAW,CAAC;AACVC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEwC,OAAL;AAAcvC,QAAAA,CAAC,EAAEyC;AAAjB,OADK;AAEVxC,MAAAA,GAAG,EAAE;AAAEF,QAAAA,CAAC,EAAEoD,aAAL;AAAoBnD,QAAAA,CAAC,EAAEqD;AAAvB;AAFK,KAAD,CAAX;AAID,GAnCD;;AAqCA,sBACE;AAAA,4BACE;AAAQ,MAAA,KAAK,EAAEnD,gBAAf;AAAiC,MAAA,QAAQ,EAAEkB,oBAA3C;AAAA,gBACGhB,cAAc,CAAC8B,GAAf,CAAmB,CAACoB,CAAD,EAAIjB,KAAJ,kBAClB;AAAoB,QAAA,KAAK,EAAEA,KAA3B;AAAA,gCACYA,KADZ;AAAA,SAAaA,KAAb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAQA;AAAK,MAAA,KAAK,EAAE;AAAEkB,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA,8BACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,CACJ;AACEzD,YAAAA,CAAC,EAAEH,QAAQ,CAACE,GAAT,CAAaC,CADlB;AAEEC,YAAAA,CAAC,EAAEJ,QAAQ,CAACE,GAAT,CAAaE,CAFlB;AAGEyD,YAAAA,IAAI,EAAE,SAHR;AAIEC,YAAAA,IAAI,EAAE,eAJR;AAKEC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aALR;AAMEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,MAAM,EAAE,QAAV;AAAoBC,cAAAA,IAAI,EAAE;AAA1B;AANV,WADI,CADR;AAWE,UAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE,GADD;AAENC,YAAAA,MAAM,EAAE,GAFF;AAGNC,YAAAA,KAAK,EAAE,iCAHD;AAINC,YAAAA,KAAK,EAAE;AAAED,cAAAA,KAAK,EAAE;AAAT,aAJD;AAKNE,YAAAA,KAAK,EAAE;AAAEF,cAAAA,KAAK,EAAE;AAAT;AALD;AAXV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAuBE;AAAK,QAAA,KAAK,EAAE;AAAEV,UAAAA,IAAI,EAAE;AAAR,SAAZ;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AACE,UAAA,IAAI,EAAE,CACJ;AACEzD,YAAAA,CAAC,EAAEH,QAAQ,CAACK,GAAT,CAAaF,CADlB;AAEEC,YAAAA,CAAC,EAAEJ,QAAQ,CAACK,GAAT,CAAaD,CAFlB;AAGEyD,YAAAA,IAAI,EAAE,SAHR;AAIEC,YAAAA,IAAI,EAAE,OAJR;AAKEC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT,aALR;AAMEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,MAAM,EAAE,QAAV;AAAoBC,cAAAA,IAAI,EAAE;AAA1B;AANV,WADI,CADR;AAWE,UAAA,MAAM,EAAE;AAAEC,YAAAA,KAAK,EAAE,GAAT;AAAcC,YAAAA,MAAM,EAAE,GAAtB;AAA2BC,YAAAA,KAAK,EAAE;AAAlC;AAXV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,YARA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAtHQzE,G;;KAAAA,G;AAwHT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all);\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] }});\r\n  const [selectedExercise, setSelectedExercise] = useState(0);\r\n  const [discrimination, setDiscrimination] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = () => {\r\n    const data = 'attempts_test.csv';\r\n    axios\r\n      .post(`http://localhost:4000/estimate/${data}`)\r\n      .then(response => {\r\n        setDiscrimination(response.data?.Discrimination ?? []);\r\n        updatePlotData(selectedExercise, { Ability: response.data?.Ability, Discrimination: a, Difficulty: b });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const handleExerciseChange = (event) => {\r\n    const exerciseIndex = parseInt(event.target.value);\r\n    setSelectedExercise(exerciseIndex);\r\n    updatePlotData(exerciseIndex);\r\n  };\r\n\r\n  const updatePlotData = (exerciseIndex, data) => {\r\n    const { Ability, Discrimination, Difficulty } = data;\r\n    const x = Ability || [];\r\n    const a = Discrimination || [];\r\n    const b = Difficulty || [];\r\n    if (!Ability || !Discrimination || !Difficulty || Ability.length === 0) {\r\n      setPlotData({ icc: { x: [], y: [] }, tcc: { x: [], y: [] } });\r\n      return;\r\n    }\r\n    const selectedDiscrimination = a[exerciseIndex];\r\n    const selectedDifficulty = b[exerciseIndex];\r\n\r\n    const sigmoid = (x, a, b) => {\r\n      const denominator = 1 + Math.exp(-a * (x - b));\r\n      return denominator === 0 ? NaN : 1 / denominator;\r\n    };\r\n\r\n    const y = x.map((val) => sigmoid(val, selectedDiscrimination, selectedDifficulty));\r\n    const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\r\n    const sortedX = sortedData.map(pair => pair[0]);\r\n    const sortedY = sortedData.map(pair => pair[1]);\r\n\r\n    const meanA = math.mean(a);\r\n    const meanB = math.mean(b);\r\n    const minAbility = math.min(...Ability);\r\n    const maxAbility = math.max(...Ability);\r\n    const range = maxAbility - minAbility;\r\n    const step = range / 100;\r\n    const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n    const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n    setPlotData({\r\n      icc: { x: sortedX, y: sortedY },\r\n      tcc: { x: abilityValues, y: y2 }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <select value={selectedExercise} onChange={handleExerciseChange}>\r\n        {discrimination.map((_, index) => (\r\n          <option key={index} value={index}>\r\n            Exercise {index}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    <div style={{ display: 'flex' }}>\r\n      <div style={{ flex: 1 }}>\r\n        <div>Item Response Curve</div>\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: plotData.icc.x,\r\n              y: plotData.icc.y,\r\n              type: 'scatter',\r\n              mode: 'lines+markers',\r\n              line: { color: 'black' },\r\n              marker: { symbol: 'circle', size: 8 }\r\n            }\r\n          ]}\r\n          layout={{\r\n            width: 550,\r\n            height: 600,\r\n            title: 'IRT Model - Item Response Curve',\r\n            xaxis: { title: 'Latent Trait' },\r\n            yaxis: { title: 'Item Response' }\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ flex: 1 }}>\r\n        <div>Test Characteristic Curve</div>\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: plotData.tcc.x,\r\n              y: plotData.tcc.y,\r\n              type: 'scatter',\r\n              mode: 'lines',\r\n              line: { color: 'black' },\r\n              marker: { symbol: 'circle', size: 8 }\r\n            },\r\n          ]}\r\n          layout={{ width: 550, height: 600, title: 'IRT Model - Test Characteristic Curve' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}