{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n  const [selectedExercise, setSelectedExercise] = useState(0);\n  const [exercises, setExercises] = useState([]);\n  const [discrimination, setDiscrimination] = useState([]);\n  const [difficulty, setDifficulty] = useState([]);\n  useEffect(() => {\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\n\n    axios.post(`http://localhost:4000/estimate/${data}`).then(response => {\n      setExercises(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n\n  const fetchData = exerciseIndex => {\n    const selectedExercise = exercises[exerciseIndex];\n    const data = selectedExercise.dataFileName; // Replace with the actual file name\n\n    axios.post(`http://localhost:4000/estimate/${data}`).then(response => {\n      var _response$data$Abilit, _response$data$Discri, _response$data$Diffic;\n\n      const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n      const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : []; // use the first element for all items\n\n      const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n      console.log(x, a[0], b[0]);\n\n      const sigmoid = (x, a, b) => {\n        const denominator = 1 + Math.exp(-a * (x - b));\n        return denominator === 0 ? NaN : 1 / denominator;\n      };\n\n      const y = x.map(val => sigmoid(val, a[18], b[18]));\n      console.log(y);\n      const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n      const sortedX = sortedData.map(pair => pair[0]);\n      const sortedY = sortedData.map(pair => pair[1]); // Calculate mean discrimination and difficulty for all exercises\n\n      const meanA = math.mean(response.data.Discrimination);\n      const meanB = math.mean(response.data.Difficulty); // Calculate item response probabilities for a range of ability values\n\n      const minAbility = Math.min(...response.data.Ability);\n      const maxAbility = Math.max(...response.data.Ability);\n      const range = maxAbility - minAbility;\n      const step = range / 100;\n      const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n      const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB)); // Plot the test characteristic curve\n\n      setPlotData({\n        icc: {\n          x: sortedX,\n          y: sortedY\n        },\n        tcc: {\n          x: abilityValues,\n          y: y2\n        }\n      });\n      setSelectedExercise(exerciseIndex);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  const handleExerciseChange = event => {\n    const selectedIndex = event.target.value;\n    fetchData(selectedIndex);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedExercise,\n      onChange: handleExerciseChange,\n      children: exercises.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index,\n        children: exercise.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Item Response Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.icc.x,\n            y: plotData.icc.y,\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Item Response Curve',\n            xaxis: {\n              title: 'Latent Trait'\n            },\n            yaxis: {\n              title: 'Item Response'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Test Characteristic Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.tcc.x,\n            y: plotData.tcc.y,\n            type: 'scatter',\n            mode: 'lines',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Test Characteristic Curve'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IRT, \"+XtcVlnn+klihrRGi85m/rTuZkA=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","useEffect","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","selectedExercise","setSelectedExercise","exercises","setExercises","discrimination","setDiscrimination","difficulty","setDifficulty","data","post","then","response","catch","error","console","fetchData","exerciseIndex","dataFileName","Ability","a","Discrimination","b","Difficulty","log","sigmoid","denominator","Math","exp","NaN","map","val","sortedData","value","index","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","handleExerciseChange","event","selectedIndex","target","exercise","name","display","flex","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all);\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] } });\r\n  const [selectedExercise, setSelectedExercise] = useState(0);\r\n  const [exercises, setExercises] = useState([]);\r\n  const [discrimination, setDiscrimination] = useState([]);\r\n  const [difficulty, setDifficulty] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\r\n        axios\r\n          .post(`http://localhost:4000/estimate/${data}`)\r\n      .then(response => {\r\n        setExercises(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  const fetchData = (exerciseIndex) => {\r\n    const selectedExercise = exercises[exerciseIndex];\r\n    const data = selectedExercise.dataFileName; // Replace with the actual file name\r\n    axios\r\n      .post(`http://localhost:4000/estimate/${data}`)\r\n      .then(response => {\r\n        const x = response.data.Ability ?? [];\r\n        const a = response.data.Discrimination ?? []; // use the first element for all items\r\n        const b = response.data.Difficulty ?? [];\r\n        console.log(x, a[0], b[0]);\r\n        const sigmoid = (x, a, b) => {\r\n          const denominator = 1 + Math.exp(-a * (x - b));\r\n          return denominator === 0 ? NaN : 1 / denominator;\r\n        };\r\n        const y = x.map((val) => sigmoid(val, a[18], b[18]));\r\n        console.log(y);\r\n        const sortedData = x.map((value, index) => [value, y[index]])\r\n          .sort((a, b) => a[0] - b[0]);\r\n        const sortedX = sortedData.map(pair => pair[0]);\r\n        const sortedY = sortedData.map(pair => pair[1]);\r\n        // Calculate mean discrimination and difficulty for all exercises\r\n        const meanA = math.mean(response.data.Discrimination);\r\n        const meanB = math.mean(response.data.Difficulty);\r\n\r\n        // Calculate item response probabilities for a range of ability values\r\n        const minAbility = Math.min(...response.data.Ability);\r\n        const maxAbility = Math.max(...response.data.Ability);\r\n        const range = maxAbility - minAbility;\r\n        const step = range / 100;\r\n        const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n        const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n        // Plot the test characteristic curve\r\n        setPlotData({\r\n          icc: { x: sortedX, y: sortedY },\r\n          tcc: { x: abilityValues, y: y2 }\r\n        });\r\n        setSelectedExercise(exerciseIndex);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const handleExerciseChange = (event) => {\r\n    const selectedIndex = event.target.value;\r\n    fetchData(selectedIndex);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <select value={selectedExercise} onChange={handleExerciseChange}>\r\n        {exercises.map((exercise, index) => (\r\n          <option value={index} key={index}>{exercise.name}</option>\r\n        ))}\r\n      </select>\r\n      <div style={{ display: 'flex' }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div>Item Response Curve</div>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.icc.x,\r\n                y: plotData.icc.y,\r\n                type: 'scatter',\r\n                mode: 'lines+markers',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              }\r\n            ]}\r\n            layout={{\r\n              width: 550,\r\n              height: 600,\r\n              title: 'IRT Model - Item Response Curve',\r\n              xaxis: { title: 'Latent Trait' },\r\n              yaxis: { title: 'Item Response' }\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ flex: 1 }}>\r\n          <div>Test Characteristic Curve</div>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.tcc.x,\r\n                y: plotData.tcc.y,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              },\r\n            ]}\r\n            layout={{ width: 550, height: 600, title: 'IRT Model - Test Characteristic Curve' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}