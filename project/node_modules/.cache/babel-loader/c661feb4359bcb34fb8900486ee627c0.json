{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfColor } from './../pdf-color';\nimport { PdfColorSpace } from './../enum';\nimport { PdfBrush } from './pdf-brush';\n/**\r\n * Represents a brush that fills any object with a solid color.\r\n * ```typescript\r\n * // create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // add a pages to the document\r\n * let page1 : PdfPage = document.pages.add();\r\n * // set font\r\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\r\n * // set brush\r\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\r\n * // draw the text\r\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\r\n * // save the document\r\n * document.save('output.pdf');\r\n * // destroy the document\r\n * document.destroy();\r\n * ```\r\n */\n\nvar PdfSolidBrush =\n/** @class */\nfunction (_super) {\n  __extends(PdfSolidBrush, _super); //Constructors\n\n  /**\r\n   * Initializes a new instance of the `PdfSolidBrush` class.\r\n   * ```typescript\r\n   * // create a new PDF document\r\n   * let document : PdfDocument = new PdfDocument();\r\n   * // add a pages to the document\r\n   * let page1 : PdfPage = document.pages.add();\r\n   * // set font\r\n   * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\r\n   * // set brush\r\n   * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\r\n   * // draw the text\r\n   * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\r\n   * // save the document\r\n   * document.save('output.pdf');\r\n   * // destroy the document\r\n   * document.destroy();\r\n   * ```\r\n   * @param color color of the brush\r\n   */\n\n\n  function PdfSolidBrush(color) {\n    var _this = _super.call(this) || this;\n\n    _this.pdfColor = color;\n    return _this;\n  }\n\n  Object.defineProperty(PdfSolidBrush.prototype, \"color\", {\n    //Properties\n\n    /**\r\n     * Gets or sets the `color` of the brush.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\r\n   * `Monitors` the changes of the brush and modify PDF state respectively.\r\n   * @private\r\n   */\n\n  PdfSolidBrush.prototype.monitorChanges = function (brush, streamWriter, getResources, saveChanges, currentColorSpace) {\n    if (streamWriter == null) {\n      throw new Error('ArgumentNullException:streamWriter');\n    }\n\n    var diff = false;\n\n    if (brush == null) {\n      diff = true;\n      streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n      return diff;\n    } else {\n      var sBrush = brush;\n      diff = true;\n      streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\n      return diff;\n    }\n  };\n  /**\r\n   * `Resets` the changes, which were made by the brush.\r\n   * @private\r\n   */\n\n\n  PdfSolidBrush.prototype.resetChanges = function (streamWriter) {\n    streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);\n  };\n\n  return PdfSolidBrush;\n}(PdfBrush);\n\nexport { PdfSolidBrush };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-solid-brush.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfColor","PdfColorSpace","PdfBrush","PdfSolidBrush","_super","color","_this","call","pdfColor","defineProperty","get","set","value","enumerable","configurable","monitorChanges","brush","streamWriter","getResources","saveChanges","currentColorSpace","Error","diff","setColorAndSpace","sBrush","resetChanges","Rgb"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PdfColor } from './../pdf-color';\r\nimport { PdfColorSpace } from './../enum';\r\nimport { PdfBrush } from './pdf-brush';\r\n/**\r\n * Represents a brush that fills any object with a solid color.\r\n * ```typescript\r\n * // create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // add a pages to the document\r\n * let page1 : PdfPage = document.pages.add();\r\n * // set font\r\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\r\n * // set brush\r\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\r\n * // draw the text\r\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\r\n * // save the document\r\n * document.save('output.pdf');\r\n * // destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nvar PdfSolidBrush = /** @class */ (function (_super) {\r\n    __extends(PdfSolidBrush, _super);\r\n    //Constructors\r\n    /**\r\n     * Initializes a new instance of the `PdfSolidBrush` class.\r\n     * ```typescript\r\n     * // create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // add a pages to the document\r\n     * let page1 : PdfPage = document.pages.add();\r\n     * // set font\r\n     * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\r\n     * // set brush\r\n     * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\r\n     * // draw the text\r\n     * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(10, 10));\r\n     * // save the document\r\n     * document.save('output.pdf');\r\n     * // destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     * @param color color of the brush\r\n     */\r\n    function PdfSolidBrush(color) {\r\n        var _this = _super.call(this) || this;\r\n        _this.pdfColor = color;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PdfSolidBrush.prototype, \"color\", {\r\n        //Properties\r\n        /**\r\n         * Gets or sets the `color` of the brush.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfColor;\r\n        },\r\n        set: function (value) {\r\n            this.pdfColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Implementation\r\n    /**\r\n     * `Monitors` the changes of the brush and modify PDF state respectively.\r\n     * @private\r\n     */\r\n    PdfSolidBrush.prototype.monitorChanges = function (brush, streamWriter, getResources, saveChanges, currentColorSpace) {\r\n        if (streamWriter == null) {\r\n            throw new Error('ArgumentNullException:streamWriter');\r\n        }\r\n        var diff = false;\r\n        if (brush == null) {\r\n            diff = true;\r\n            streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\r\n            return diff;\r\n        }\r\n        else {\r\n            var sBrush = brush;\r\n            diff = true;\r\n            streamWriter.setColorAndSpace(this.pdfColor, currentColorSpace, false);\r\n            return diff;\r\n        }\r\n    };\r\n    /**\r\n     * `Resets` the changes, which were made by the brush.\r\n     * @private\r\n     */\r\n    PdfSolidBrush.prototype.resetChanges = function (streamWriter) {\r\n        streamWriter.setColorAndSpace(new PdfColor(0, 0, 0), PdfColorSpace.Rgb, false);\r\n    };\r\n    return PdfSolidBrush;\r\n}(PdfBrush));\r\nexport { PdfSolidBrush };\r\n"]},"metadata":{},"sourceType":"module"}