{"ast":null,"code":"import { isNullOrUndefined, attributes } from '@syncfusion/ej2-base';\nimport { iterateArrayOrObject } from '../base/util';\nimport { CellType } from '../base/enum';\n/**\r\n * `CellMergeRender` module.\r\n *\r\n * @hidden\r\n */\n\nvar CellMergeRender =\n/** @class */\nfunction () {\n  function CellMergeRender(serviceLocator, parent) {\n    this.serviceLocator = serviceLocator;\n    this.parent = parent;\n  }\n\n  CellMergeRender.prototype.render = function (cellArgs, row, i, td) {\n    var cellRendererFact = this.serviceLocator.getService('cellRendererFactory');\n    var cellRenderer = cellRendererFact.getCellRenderer(row.cells[i].cellType || CellType.Data);\n    var colSpan = row.cells[i].cellSpan ? row.cells[i].cellSpan : cellArgs.colSpan + i <= row.cells.length ? cellArgs.colSpan : row.cells.length - i;\n    var rowSpan = cellArgs.rowSpan;\n    var visible = 0;\n    var spannedCell;\n\n    if (row.index > 0) {\n      var cells = this.parent.groupSettings.columns.length > 0 && !this.parent.getRowsObject()[row.index - 1].isDataRow ? this.parent.getRowsObject()[row.index].cells : this.parent.getRowsObject()[row.index - 1].cells;\n      var targetCell_1 = row.cells[i];\n      var uid_1 = 'uid';\n      spannedCell = cells.filter(function (cell) {\n        return cell.column.uid === targetCell_1.column[uid_1];\n      })[0];\n    }\n\n    var colSpanLen = spannedCell && spannedCell.colSpanRange > 1 && spannedCell.rowSpanRange > 1 ? spannedCell.colSpanRange : colSpan;\n\n    for (var j = i + 1; j < i + colSpanLen && j < row.cells.length; j++) {\n      if (row.cells[j].visible === false) {\n        visible++;\n      } else {\n        row.cells[j].isSpanned = true;\n      }\n    }\n\n    if (visible > 0) {\n      for (var j = i + colSpan; j < i + colSpan + visible && j < row.cells.length; j++) {\n        row.cells[j].isSpanned = true;\n      }\n\n      if (i + colSpan + visible >= row.cells.length) {\n        colSpan -= i + colSpan + visible - row.cells.length;\n      }\n    }\n\n    if (row.cells[i].cellSpan) {\n      row.data[cellArgs.column.field] = row.cells[i].spanText;\n      td = cellRenderer.render(row.cells[i], row.data, {\n        'index': !isNullOrUndefined(row.index) ? row.index.toString() : ''\n      });\n    }\n\n    if (colSpan > 1) {\n      attributes(td, {\n        'colSpan': colSpan.toString(),\n        'aria-colSpan': colSpan.toString()\n      });\n    }\n\n    if (rowSpan > 1) {\n      attributes(td, {\n        'rowspan': rowSpan.toString(),\n        'aria-rowspan': rowSpan.toString()\n      });\n      row.cells[i].isRowSpanned = true;\n      row.cells[i].rowSpanRange = Number(rowSpan);\n\n      if (colSpan > 1) {\n        row.cells[i].colSpanRange = Number(colSpan);\n      }\n    }\n\n    if (row.index > 0 && spannedCell.rowSpanRange > 1) {\n      row.cells[i].isSpanned = true;\n      row.cells[i].rowSpanRange = Number(spannedCell.rowSpanRange - 1);\n      row.cells[i].colSpanRange = spannedCell.rowSpanRange > 0 ? spannedCell.colSpanRange : 1;\n    }\n\n    if (this.parent.enableColumnVirtualization && !row.cells[i].cellSpan && !this.containsKey(cellArgs.column.field, cellArgs.data[cellArgs.column.field])) {\n      this.backupMergeCells(cellArgs.column.field, cellArgs.data[cellArgs.column.field], cellArgs.colSpan);\n    }\n\n    return td;\n  };\n\n  CellMergeRender.prototype.backupMergeCells = function (fName, data, span) {\n    this.setMergeCells(this.generteKey(fName, data), span);\n  };\n\n  CellMergeRender.prototype.generteKey = function (fname, data) {\n    return fname + '__' + data.toString();\n  };\n\n  CellMergeRender.prototype.splitKey = function (key) {\n    return key.split('__');\n  };\n\n  CellMergeRender.prototype.containsKey = function (fname, data) {\n    // eslint-disable-next-line no-prototype-builtins\n    return this.getMergeCells().hasOwnProperty(this.generteKey(fname, data));\n  };\n\n  CellMergeRender.prototype.getMergeCells = function () {\n    return this.parent.mergeCells;\n  };\n\n  CellMergeRender.prototype.setMergeCells = function (key, span) {\n    this.parent.mergeCells[key] = span;\n  };\n\n  CellMergeRender.prototype.updateVirtualCells = function (rows) {\n    var mCells = this.getMergeCells();\n\n    for (var _i = 0, _a = Object.keys(mCells); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var value = mCells[key];\n      var merge = this.splitKey(key);\n      var columnIndex = this.getIndexFromAllColumns(merge[0]);\n      var vColumnIndices = this.parent.getColumnIndexesInView();\n      var span = value - (vColumnIndices[0] - columnIndex);\n\n      if (columnIndex < vColumnIndices[0] && span > 1) {\n        for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {\n          var row = rows_1[_b];\n\n          if (row.data[merge[0]].toString() === merge[1].toString()) {\n            row.cells[0].cellSpan = span;\n            row.cells[0].spanText = merge[1];\n            break;\n          }\n        }\n      }\n    }\n\n    return rows;\n  };\n\n  CellMergeRender.prototype.getIndexFromAllColumns = function (field) {\n    var index = iterateArrayOrObject(this.parent.getVisibleColumns(), function (item, index) {\n      if (item.field === field) {\n        return index;\n      }\n\n      return undefined;\n    })[0];\n    return index;\n  };\n\n  return CellMergeRender;\n}();\n\nexport { CellMergeRender };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-merge-renderer.js"],"names":["isNullOrUndefined","attributes","iterateArrayOrObject","CellType","CellMergeRender","serviceLocator","parent","prototype","render","cellArgs","row","i","td","cellRendererFact","getService","cellRenderer","getCellRenderer","cells","cellType","Data","colSpan","cellSpan","length","rowSpan","visible","spannedCell","index","groupSettings","columns","getRowsObject","isDataRow","targetCell_1","uid_1","filter","cell","column","uid","colSpanLen","colSpanRange","rowSpanRange","j","isSpanned","data","field","spanText","toString","isRowSpanned","Number","enableColumnVirtualization","containsKey","backupMergeCells","fName","span","setMergeCells","generteKey","fname","splitKey","key","split","getMergeCells","hasOwnProperty","mergeCells","updateVirtualCells","rows","mCells","_i","_a","Object","keys","value","merge","columnIndex","getIndexFromAllColumns","vColumnIndices","getColumnIndexesInView","_b","rows_1","getVisibleColumns","item","undefined"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, attributes } from '@syncfusion/ej2-base';\r\nimport { iterateArrayOrObject } from '../base/util';\r\nimport { CellType } from '../base/enum';\r\n/**\r\n * `CellMergeRender` module.\r\n *\r\n * @hidden\r\n */\r\nvar CellMergeRender = /** @class */ (function () {\r\n    function CellMergeRender(serviceLocator, parent) {\r\n        this.serviceLocator = serviceLocator;\r\n        this.parent = parent;\r\n    }\r\n    CellMergeRender.prototype.render = function (cellArgs, row, i, td) {\r\n        var cellRendererFact = this.serviceLocator.getService('cellRendererFactory');\r\n        var cellRenderer = cellRendererFact.getCellRenderer(row.cells[i].cellType || CellType.Data);\r\n        var colSpan = row.cells[i].cellSpan ? row.cells[i].cellSpan :\r\n            (cellArgs.colSpan + i) <= row.cells.length ? cellArgs.colSpan : row.cells.length - i;\r\n        var rowSpan = cellArgs.rowSpan;\r\n        var visible = 0;\r\n        var spannedCell;\r\n        if (row.index > 0) {\r\n            var cells = this.parent.groupSettings.columns.length > 0 &&\r\n                !this.parent.getRowsObject()[row.index - 1].isDataRow ? this.parent.getRowsObject()[row.index].cells :\r\n                this.parent.getRowsObject()[row.index - 1].cells;\r\n            var targetCell_1 = row.cells[i];\r\n            var uid_1 = 'uid';\r\n            spannedCell = cells.filter(function (cell) { return cell.column.uid === targetCell_1.column[uid_1]; })[0];\r\n        }\r\n        var colSpanLen = spannedCell && spannedCell.colSpanRange > 1 && spannedCell.rowSpanRange > 1 ?\r\n            spannedCell.colSpanRange : colSpan;\r\n        for (var j = i + 1; j < i + colSpanLen && j < row.cells.length; j++) {\r\n            if (row.cells[j].visible === false) {\r\n                visible++;\r\n            }\r\n            else {\r\n                row.cells[j].isSpanned = true;\r\n            }\r\n        }\r\n        if (visible > 0) {\r\n            for (var j = i + colSpan; j < i + colSpan + visible && j < row.cells.length; j++) {\r\n                row.cells[j].isSpanned = true;\r\n            }\r\n            if (i + colSpan + visible >= row.cells.length) {\r\n                colSpan -= (i + colSpan + visible) - row.cells.length;\r\n            }\r\n        }\r\n        if (row.cells[i].cellSpan) {\r\n            row.data[cellArgs.column.field] = row.cells[i].spanText;\r\n            td = cellRenderer.render(row.cells[i], row.data, { 'index': !isNullOrUndefined(row.index) ? row.index.toString() : '' });\r\n        }\r\n        if (colSpan > 1) {\r\n            attributes(td, { 'colSpan': colSpan.toString(), 'aria-colSpan': colSpan.toString() });\r\n        }\r\n        if (rowSpan > 1) {\r\n            attributes(td, { 'rowspan': rowSpan.toString(), 'aria-rowspan': rowSpan.toString() });\r\n            row.cells[i].isRowSpanned = true;\r\n            row.cells[i].rowSpanRange = Number(rowSpan);\r\n            if (colSpan > 1) {\r\n                row.cells[i].colSpanRange = Number(colSpan);\r\n            }\r\n        }\r\n        if (row.index > 0 && (spannedCell.rowSpanRange > 1)) {\r\n            row.cells[i].isSpanned = true;\r\n            row.cells[i].rowSpanRange = Number(spannedCell.rowSpanRange - 1);\r\n            row.cells[i].colSpanRange = spannedCell.rowSpanRange > 0 ? spannedCell.colSpanRange : 1;\r\n        }\r\n        if (this.parent.enableColumnVirtualization && !row.cells[i].cellSpan &&\r\n            !this.containsKey(cellArgs.column.field, cellArgs.data[cellArgs.column.field])) {\r\n            this.backupMergeCells(cellArgs.column.field, cellArgs.data[cellArgs.column.field], cellArgs.colSpan);\r\n        }\r\n        return td;\r\n    };\r\n    CellMergeRender.prototype.backupMergeCells = function (fName, data, span) {\r\n        this.setMergeCells(this.generteKey(fName, data), span);\r\n    };\r\n    CellMergeRender.prototype.generteKey = function (fname, data) {\r\n        return fname + '__' + data.toString();\r\n    };\r\n    CellMergeRender.prototype.splitKey = function (key) {\r\n        return key.split('__');\r\n    };\r\n    CellMergeRender.prototype.containsKey = function (fname, data) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        return this.getMergeCells().hasOwnProperty(this.generteKey(fname, data));\r\n    };\r\n    CellMergeRender.prototype.getMergeCells = function () {\r\n        return this.parent.mergeCells;\r\n    };\r\n    CellMergeRender.prototype.setMergeCells = function (key, span) {\r\n        this.parent.mergeCells[key] = span;\r\n    };\r\n    CellMergeRender.prototype.updateVirtualCells = function (rows) {\r\n        var mCells = this.getMergeCells();\r\n        for (var _i = 0, _a = Object.keys(mCells); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            var value = mCells[key];\r\n            var merge = this.splitKey(key);\r\n            var columnIndex = this.getIndexFromAllColumns(merge[0]);\r\n            var vColumnIndices = this.parent.getColumnIndexesInView();\r\n            var span = value - (vColumnIndices[0] - columnIndex);\r\n            if (columnIndex < vColumnIndices[0] && span > 1) {\r\n                for (var _b = 0, rows_1 = rows; _b < rows_1.length; _b++) {\r\n                    var row = rows_1[_b];\r\n                    if (row.data[merge[0]].toString() === merge[1].toString()) {\r\n                        row.cells[0].cellSpan = span;\r\n                        row.cells[0].spanText = merge[1];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return rows;\r\n    };\r\n    CellMergeRender.prototype.getIndexFromAllColumns = function (field) {\r\n        var index = iterateArrayOrObject(this.parent.getVisibleColumns(), function (item, index) {\r\n            if (item.field === field) {\r\n                return index;\r\n            }\r\n            return undefined;\r\n        })[0];\r\n        return index;\r\n    };\r\n    return CellMergeRender;\r\n}());\r\nexport { CellMergeRender };\r\n"]},"metadata":{},"sourceType":"module"}