{"ast":null,"code":"import { isConstantNode, isFunctionNode, isOperatorNode, isParenthesisNode } from '../../../utils/is.js';\nexport { isConstantNode, isSymbolNode as isVariableNode } from '../../../utils/is.js';\nexport function isNumericNode(x) {\n  return isConstantNode(x) || isOperatorNode(x) && x.isUnary() && isConstantNode(x.args[0]);\n}\nexport function isConstantExpression(x) {\n  if (isConstantNode(x)) {\n    // Basic Constant types\n    return true;\n  }\n\n  if ((isFunctionNode(x) || isOperatorNode(x)) && x.args.every(isConstantExpression)) {\n    // Can be constant depending on arguments\n    return true;\n  }\n\n  if (isParenthesisNode(x) && isConstantExpression(x.content)) {\n    // Parenthesis are transparent\n    return true;\n  }\n\n  return false; // Probably missing some edge cases\n}","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/algebra/simplify/wildcards.js"],"names":["isConstantNode","isFunctionNode","isOperatorNode","isParenthesisNode","isSymbolNode","isVariableNode","isNumericNode","x","isUnary","args","isConstantExpression","every","content"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,iBAAzD,QAAkF,sBAAlF;AACA,SAASH,cAAT,EAAyBI,YAAY,IAAIC,cAAzC,QAA+D,sBAA/D;AACA,OAAO,SAASC,aAAT,CAAuBC,CAAvB,EAA0B;AAC/B,SAAOP,cAAc,CAACO,CAAD,CAAd,IAAqBL,cAAc,CAACK,CAAD,CAAd,IAAqBA,CAAC,CAACC,OAAF,EAArB,IAAoCR,cAAc,CAACO,CAAC,CAACE,IAAF,CAAO,CAAP,CAAD,CAA9E;AACD;AACD,OAAO,SAASC,oBAAT,CAA8BH,CAA9B,EAAiC;AACtC,MAAIP,cAAc,CAACO,CAAD,CAAlB,EAAuB;AACrB;AACA,WAAO,IAAP;AACD;;AACD,MAAI,CAACN,cAAc,CAACM,CAAD,CAAd,IAAqBL,cAAc,CAACK,CAAD,CAApC,KAA4CA,CAAC,CAACE,IAAF,CAAOE,KAAP,CAAaD,oBAAb,CAAhD,EAAoF;AAClF;AACA,WAAO,IAAP;AACD;;AACD,MAAIP,iBAAiB,CAACI,CAAD,CAAjB,IAAwBG,oBAAoB,CAACH,CAAC,CAACK,OAAH,CAAhD,EAA6D;AAC3D;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP,CAbsC,CAaxB;AACf","sourcesContent":["import { isConstantNode, isFunctionNode, isOperatorNode, isParenthesisNode } from '../../../utils/is.js';\r\nexport { isConstantNode, isSymbolNode as isVariableNode } from '../../../utils/is.js';\r\nexport function isNumericNode(x) {\r\n  return isConstantNode(x) || isOperatorNode(x) && x.isUnary() && isConstantNode(x.args[0]);\r\n}\r\nexport function isConstantExpression(x) {\r\n  if (isConstantNode(x)) {\r\n    // Basic Constant types\r\n    return true;\r\n  }\r\n  if ((isFunctionNode(x) || isOperatorNode(x)) && x.args.every(isConstantExpression)) {\r\n    // Can be constant depending on arguments\r\n    return true;\r\n  }\r\n  if (isParenthesisNode(x) && isConstantExpression(x.content)) {\r\n    // Parenthesis are transparent\r\n    return true;\r\n  }\r\n  return false; // Probably missing some edge cases\r\n}"]},"metadata":{},"sourceType":"module"}