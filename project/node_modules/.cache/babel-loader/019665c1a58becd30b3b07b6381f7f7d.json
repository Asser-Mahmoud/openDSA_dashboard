{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\r\n * PdfColorBlend.ts class for EJ2-PDF\r\n */\n\n\nimport { PdfColorSpace } from './../enum';\nimport { PdfSampledFunction } from './../../general/functions/pdf-sampled-function';\nimport { PdfBlend } from './pdf-blend';\n/**\r\n * `PdfColorBlend` Represents the arrays of colors and positions used for\r\n *  interpolating color blending in a multicolor gradient.\r\n * @private\r\n */\n\nvar PdfColorBlend =\n/** @class */\nfunction (_super) {\n  __extends(PdfColorBlend, _super);\n\n  function PdfColorBlend(count) {\n    var _this = _super.call(this) || this;\n\n    if (typeof count === 'number') {\n      _this = _super.call(this, count) || this;\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PdfColorBlend.prototype, \"colors\", {\n    //Properties\n\n    /**\r\n     * Gets or sets the array of colors.\r\n     * @public\r\n     */\n    get: function () {\n      return this.mcolors;\n    },\n    set: function (value) {\n      if (value == null) {\n        throw new Error('ArgumentNullException : Colors');\n      }\n\n      this.mcolors = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\r\n   * Gets the function.\r\n   * @param colorSpace The color space.\r\n   * @public\r\n   */\n\n  PdfColorBlend.prototype.getFunction = function (colorSpace) {\n    var domain = [0, 1];\n    var colourComponents = this.getColorComponentsCount(colorSpace);\n    var maxComponentValue = this.getMaxComponentValue(colorSpace);\n    var range = this.setRange(colourComponents, maxComponentValue);\n    var func = null;\n\n    if (this.mbrush == null && typeof this.mbrush === 'undefined') {\n      var sizes = [1];\n      var samplesCount = void 0;\n      var step = 1;\n\n      if (this.positions.length === 2) {\n        samplesCount = 2;\n      } else {\n        var positions = this.positions;\n        var intervals = this.getIntervals(positions);\n        var gcd = this.gcd(intervals);\n        step = gcd;\n        samplesCount = 1 / gcd + 1;\n      }\n\n      sizes[0] = samplesCount;\n      var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);\n      func = new PdfSampledFunction(domain, range, sizes, samples);\n      return func;\n    }\n\n    return func;\n  };\n  /**\r\n   * 'cloneColorBlend' Clones this instance.\r\n   * @public\r\n   */\n\n\n  PdfColorBlend.prototype.cloneColorBlend = function () {\n    var cBlend = this;\n\n    if (this.mcolors != null && typeof this.mcolors !== 'undefined') {\n      cBlend.colors = this.mcolors;\n    }\n\n    if (this.positions != null && typeof this.positions !== 'undefined') {\n      cBlend.positions = this.positions;\n    }\n\n    return cBlend;\n  };\n  /**\r\n   * Sets the range.\r\n   * @param colourComponents The colour components.\r\n   * @param maxValue The max value.\r\n   */\n\n\n  PdfColorBlend.prototype.setRange = function (colourComponents, maxValue) {\n    var range = [colourComponents * 2];\n\n    for (var i = 0; i < colourComponents; ++i) {\n      range[i * 2] = 0;\n      range[i * 2 + 1] = 1;\n    }\n\n    return range;\n  };\n  /**\r\n   * Calculates the color components count according to colour space.\r\n   * @param colorSpace The color space.\r\n   */\n\n\n  PdfColorBlend.prototype.getColorComponentsCount = function (colorSpace) {\n    var count = 0;\n\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        count = 3;\n        break;\n\n      case PdfColorSpace.Cmyk:\n        count = 4;\n        break;\n\n      case PdfColorSpace.GrayScale:\n        count = 1;\n        break;\n\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n    }\n\n    return count;\n  };\n  /**\r\n   * Gets samples values for specified colour space.\r\n   * @param colorSpace The color space.\r\n   * @param sampleCount The sample count.\r\n   * @param maxComponentValue The max component value.\r\n   * @param step The step.\r\n   */\n\n\n  PdfColorBlend.prototype.getSamplesValues = function (colorSpace, sampleCount, maxComponentValue, step) {\n    var values;\n\n    switch (colorSpace) {\n      case PdfColorSpace.GrayScale:\n        values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);\n        break;\n\n      case PdfColorSpace.Cmyk:\n        values = this.getCmykSamples(sampleCount, maxComponentValue, step);\n        break;\n\n      case PdfColorSpace.Rgb:\n        values = this.getRgbSamples(sampleCount, maxComponentValue, step);\n        break;\n\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\n    }\n\n    return values;\n  };\n  /**\r\n   * Gets the grayscale samples.\r\n   * @param sampleCount The sample count.\r\n   * @param maxComponentValue The max component value.\r\n   * @param step The step.\r\n   */\n\n\n  PdfColorBlend.prototype.getGrayscaleSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 2];\n\n    for (var i = 0; i < sampleCount; ++i) {\n      var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);\n      var index = i * 2;\n    }\n\n    return values;\n  };\n  /**\r\n   * Gets the RGB samples.\r\n   * @param sampleCount The sample count.\r\n   * @param maxComponentValue The max component value.\r\n   * @param step The step.\r\n   */\n\n\n  PdfColorBlend.prototype.getRgbSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 3];\n\n    for (var i = 0; i < sampleCount; ++i) {\n      var color = this.getNextColor(i, step, PdfColorSpace.Rgb);\n      var index = i * 3;\n      values[index] = color.r;\n      values[index + 1] = color.g;\n      values[index + 2] = color.b;\n    }\n\n    return values;\n  };\n  /**\r\n   * Gets the CMYK samples.\r\n   * @param sampleCount The sample count.\r\n   * @param maxComponentValue The max component value.\r\n   * @param step The step.\r\n   */\n\n\n  PdfColorBlend.prototype.getCmykSamples = function (sampleCount, maxComponentValue, step) {\n    var values = [sampleCount * 4];\n\n    for (var i = 0; i < sampleCount; i++) {\n      var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);\n      var index = i * 4;\n      values[index] = color.c * maxComponentValue;\n      values[index + 1] = color.m * maxComponentValue;\n      values[index + 2] = color.y * maxComponentValue;\n      values[index + 3] = color.k * maxComponentValue;\n    }\n\n    return values;\n  };\n  /**\r\n   * Calculates the color that should be at the specified index.\r\n   * @param index The index.\r\n   * @param step The step.\r\n   * @param colorSpace The color space.\r\n   */\n\n\n  PdfColorBlend.prototype.getNextColor = function (index, step, colorSpace) {\n    var position = step * index;\n    var indexHi;\n    var indexLow;\n    var result = this.getIndices(position, indexLow, indexHi);\n    indexLow = result.indexLow;\n    indexHi = result.indexHi;\n    var color;\n\n    if (indexLow === indexHi) {\n      color = this.mcolors[indexLow];\n    } else {\n      var positionLow = this.positions[indexLow];\n      var positionHi = this.positions[indexHi];\n      var colorLow = this.mcolors[indexLow];\n      var colorHi = this.mcolors[indexHi];\n      var t = (position - positionLow) / (positionHi - positionLow);\n      color = this.interpolate(t, colorLow, colorHi, colorSpace);\n    }\n\n    return color;\n  };\n  /**\r\n   * Gets the indices.\r\n   * @param position The position.\r\n   * @param indexLow The index low.\r\n   * @param indexHi The index hi.\r\n   */\n\n\n  PdfColorBlend.prototype.getIndices = function (position, indexLow, indexHi) {\n    var positions = this.positions;\n    indexLow = 0;\n    indexHi = 0;\n\n    for (var i = 0; i < this.mcolors.length; ++i) {\n      var currPos = positions[i];\n\n      if (currPos === position) {\n        indexHi = i;\n        indexLow = i;\n        break;\n      } else if (currPos > position) {\n        indexHi = i;\n        break;\n      }\n\n      indexLow = i;\n      indexHi = i;\n    }\n\n    return {\n      indexLow: indexLow,\n      indexHi: indexHi\n    };\n  };\n  /**\r\n   * Calculates the max component value.\r\n   * @param colorSpace The color space.\r\n   */\n\n\n  PdfColorBlend.prototype.getMaxComponentValue = function (colorSpace) {\n    var result = 0;\n\n    switch (colorSpace) {\n      case PdfColorSpace.Cmyk:\n      case PdfColorSpace.Rgb:\n        result = 255;\n        break;\n\n      case PdfColorSpace.GrayScale:\n        result = 65535;\n        break;\n\n      default:\n        throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + 'colorSpace');\n    }\n\n    return result;\n  };\n  /**\r\n   * Gets an intervals array from the positions array.\r\n   * @param positions The positions array.\r\n   */\n\n\n  PdfColorBlend.prototype.getIntervals = function (positions) {\n    var count = positions.length;\n    var intervals = [count - 1];\n    var prev = positions[0];\n\n    for (var i = 1; i < count; ++i) {\n      var v = positions[i];\n      intervals[i - 1] = v - prev;\n      prev = v;\n    }\n\n    return intervals;\n  };\n\n  return PdfColorBlend;\n}(PdfBlend);\n\nexport { PdfColorBlend };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/brushes/pdf-color-blend.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfColorSpace","PdfSampledFunction","PdfBlend","PdfColorBlend","_super","count","_this","call","defineProperty","get","mcolors","set","value","Error","enumerable","configurable","getFunction","colorSpace","domain","colourComponents","getColorComponentsCount","maxComponentValue","getMaxComponentValue","range","setRange","func","mbrush","sizes","samplesCount","step","positions","length","intervals","getIntervals","gcd","samples","getSamplesValues","cloneColorBlend","cBlend","colors","maxValue","i","Rgb","Cmyk","GrayScale","sampleCount","values","getGrayscaleSamples","getCmykSamples","getRgbSamples","color","getNextColor","index","r","g","c","m","y","k","position","indexHi","indexLow","result","getIndices","positionLow","positionHi","colorLow","colorHi","t","interpolate","currPos","prev","v"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * PdfColorBlend.ts class for EJ2-PDF\r\n */\r\nimport { PdfColorSpace } from './../enum';\r\nimport { PdfSampledFunction } from './../../general/functions/pdf-sampled-function';\r\nimport { PdfBlend } from './pdf-blend';\r\n/**\r\n * `PdfColorBlend` Represents the arrays of colors and positions used for\r\n *  interpolating color blending in a multicolor gradient.\r\n * @private\r\n */\r\nvar PdfColorBlend = /** @class */ (function (_super) {\r\n    __extends(PdfColorBlend, _super);\r\n    function PdfColorBlend(count) {\r\n        var _this = _super.call(this) || this;\r\n        if (typeof count === 'number') {\r\n            _this = _super.call(this, count) || this;\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(PdfColorBlend.prototype, \"colors\", {\r\n        //Properties\r\n        /**\r\n         * Gets or sets the array of colors.\r\n         * @public\r\n         */\r\n        get: function () {\r\n            return this.mcolors;\r\n        },\r\n        set: function (value) {\r\n            if ((value == null)) {\r\n                throw new Error('ArgumentNullException : Colors');\r\n            }\r\n            this.mcolors = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Implementation\r\n    /**\r\n     * Gets the function.\r\n     * @param colorSpace The color space.\r\n     * @public\r\n     */\r\n    PdfColorBlend.prototype.getFunction = function (colorSpace) {\r\n        var domain = [0, 1];\r\n        var colourComponents = this.getColorComponentsCount(colorSpace);\r\n        var maxComponentValue = this.getMaxComponentValue(colorSpace);\r\n        var range = this.setRange(colourComponents, maxComponentValue);\r\n        var func = null;\r\n        if ((this.mbrush == null && typeof this.mbrush === 'undefined')) {\r\n            var sizes = [1];\r\n            var samplesCount = void 0;\r\n            var step = 1;\r\n            if (this.positions.length === 2) {\r\n                samplesCount = 2;\r\n            }\r\n            else {\r\n                var positions = this.positions;\r\n                var intervals = this.getIntervals(positions);\r\n                var gcd = this.gcd(intervals);\r\n                step = gcd;\r\n                samplesCount = (((1 / gcd)) + 1);\r\n            }\r\n            sizes[0] = samplesCount;\r\n            var samples = this.getSamplesValues(colorSpace, samplesCount, maxComponentValue, step);\r\n            func = new PdfSampledFunction(domain, range, sizes, samples);\r\n            return func;\r\n        }\r\n        return func;\r\n    };\r\n    /**\r\n     * 'cloneColorBlend' Clones this instance.\r\n     * @public\r\n     */\r\n    PdfColorBlend.prototype.cloneColorBlend = function () {\r\n        var cBlend = this;\r\n        if ((this.mcolors != null && typeof this.mcolors !== 'undefined')) {\r\n            cBlend.colors = (this.mcolors);\r\n        }\r\n        if ((this.positions != null && typeof this.positions !== 'undefined')) {\r\n            cBlend.positions = (this.positions);\r\n        }\r\n        return cBlend;\r\n    };\r\n    /**\r\n     * Sets the range.\r\n     * @param colourComponents The colour components.\r\n     * @param maxValue The max value.\r\n     */\r\n    PdfColorBlend.prototype.setRange = function (colourComponents, maxValue) {\r\n        var range = [(colourComponents * 2)];\r\n        for (var i = 0; (i < colourComponents); ++i) {\r\n            range[(i * 2)] = 0;\r\n            range[((i * 2) + 1)] = 1;\r\n        }\r\n        return range;\r\n    };\r\n    /**\r\n     * Calculates the color components count according to colour space.\r\n     * @param colorSpace The color space.\r\n     */\r\n    PdfColorBlend.prototype.getColorComponentsCount = function (colorSpace) {\r\n        var count = 0;\r\n        switch (colorSpace) {\r\n            case PdfColorSpace.Rgb:\r\n                count = 3;\r\n                break;\r\n            case PdfColorSpace.Cmyk:\r\n                count = 4;\r\n                break;\r\n            case PdfColorSpace.GrayScale:\r\n                count = 1;\r\n                break;\r\n            default:\r\n                throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\r\n        }\r\n        return count;\r\n    };\r\n    /**\r\n     * Gets samples values for specified colour space.\r\n     * @param colorSpace The color space.\r\n     * @param sampleCount The sample count.\r\n     * @param maxComponentValue The max component value.\r\n     * @param step The step.\r\n     */\r\n    PdfColorBlend.prototype.getSamplesValues = function (colorSpace, sampleCount, maxComponentValue, step) {\r\n        var values;\r\n        switch (colorSpace) {\r\n            case PdfColorSpace.GrayScale:\r\n                values = this.getGrayscaleSamples(sampleCount, maxComponentValue, step);\r\n                break;\r\n            case PdfColorSpace.Cmyk:\r\n                values = this.getCmykSamples(sampleCount, maxComponentValue, step);\r\n                break;\r\n            case PdfColorSpace.Rgb:\r\n                values = this.getRgbSamples(sampleCount, maxComponentValue, step);\r\n                break;\r\n            default:\r\n                throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + ' colorSpace');\r\n        }\r\n        return values;\r\n    };\r\n    /**\r\n     * Gets the grayscale samples.\r\n     * @param sampleCount The sample count.\r\n     * @param maxComponentValue The max component value.\r\n     * @param step The step.\r\n     */\r\n    PdfColorBlend.prototype.getGrayscaleSamples = function (sampleCount, maxComponentValue, step) {\r\n        var values = [(sampleCount * 2)];\r\n        for (var i = 0; (i < sampleCount); ++i) {\r\n            var color = this.getNextColor(i, step, PdfColorSpace.GrayScale);\r\n            var index = (i * 2);\r\n        }\r\n        return values;\r\n    };\r\n    /**\r\n     * Gets the RGB samples.\r\n     * @param sampleCount The sample count.\r\n     * @param maxComponentValue The max component value.\r\n     * @param step The step.\r\n     */\r\n    PdfColorBlend.prototype.getRgbSamples = function (sampleCount, maxComponentValue, step) {\r\n        var values = [(sampleCount * 3)];\r\n        for (var i = 0; (i < sampleCount); ++i) {\r\n            var color = this.getNextColor(i, step, PdfColorSpace.Rgb);\r\n            var index = (i * 3);\r\n            values[index] = color.r;\r\n            values[(index + 1)] = color.g;\r\n            values[(index + 2)] = color.b;\r\n        }\r\n        return values;\r\n    };\r\n    /**\r\n     * Gets the CMYK samples.\r\n     * @param sampleCount The sample count.\r\n     * @param maxComponentValue The max component value.\r\n     * @param step The step.\r\n     */\r\n    PdfColorBlend.prototype.getCmykSamples = function (sampleCount, maxComponentValue, step) {\r\n        var values = [(sampleCount * 4)];\r\n        for (var i = 0; (i < sampleCount); i++) {\r\n            var color = this.getNextColor(i, step, PdfColorSpace.Cmyk);\r\n            var index = (i * 4);\r\n            values[index] = ((color.c * maxComponentValue));\r\n            values[(index + 1)] = ((color.m * maxComponentValue));\r\n            values[(index + 2)] = ((color.y * maxComponentValue));\r\n            values[(index + 3)] = ((color.k * maxComponentValue));\r\n        }\r\n        return values;\r\n    };\r\n    /**\r\n     * Calculates the color that should be at the specified index.\r\n     * @param index The index.\r\n     * @param step The step.\r\n     * @param colorSpace The color space.\r\n     */\r\n    PdfColorBlend.prototype.getNextColor = function (index, step, colorSpace) {\r\n        var position = (step * index);\r\n        var indexHi;\r\n        var indexLow;\r\n        var result = this.getIndices(position, indexLow, indexHi);\r\n        indexLow = result.indexLow;\r\n        indexHi = result.indexHi;\r\n        var color;\r\n        if (indexLow === indexHi) {\r\n            color = this.mcolors[indexLow];\r\n        }\r\n        else {\r\n            var positionLow = this.positions[indexLow];\r\n            var positionHi = this.positions[indexHi];\r\n            var colorLow = this.mcolors[indexLow];\r\n            var colorHi = this.mcolors[indexHi];\r\n            var t = ((position - positionLow) / (positionHi - positionLow));\r\n            color = this.interpolate(t, colorLow, colorHi, colorSpace);\r\n        }\r\n        return color;\r\n    };\r\n    /**\r\n     * Gets the indices.\r\n     * @param position The position.\r\n     * @param indexLow The index low.\r\n     * @param indexHi The index hi.\r\n     */\r\n    PdfColorBlend.prototype.getIndices = function (position, indexLow, indexHi) {\r\n        var positions = this.positions;\r\n        indexLow = 0;\r\n        indexHi = 0;\r\n        for (var i = 0; (i < this.mcolors.length); ++i) {\r\n            var currPos = positions[i];\r\n            if ((currPos === position)) {\r\n                indexHi = i;\r\n                indexLow = i;\r\n                break;\r\n            }\r\n            else if ((currPos > position)) {\r\n                indexHi = i;\r\n                break;\r\n            }\r\n            indexLow = i;\r\n            indexHi = i;\r\n        }\r\n        return { indexLow: indexLow, indexHi: indexHi };\r\n    };\r\n    /**\r\n     * Calculates the max component value.\r\n     * @param colorSpace The color space.\r\n     */\r\n    PdfColorBlend.prototype.getMaxComponentValue = function (colorSpace) {\r\n        var result = 0;\r\n        switch (colorSpace) {\r\n            case PdfColorSpace.Cmyk:\r\n            case PdfColorSpace.Rgb:\r\n                result = 255;\r\n                break;\r\n            case PdfColorSpace.GrayScale:\r\n                result = 65535;\r\n                break;\r\n            default:\r\n                throw new Error('ArgumentException - Unsupported color space: ' + colorSpace + 'colorSpace');\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Gets an intervals array from the positions array.\r\n     * @param positions The positions array.\r\n     */\r\n    PdfColorBlend.prototype.getIntervals = function (positions) {\r\n        var count = positions.length;\r\n        var intervals = [(count - 1)];\r\n        var prev = positions[0];\r\n        for (var i = 1; (i < count); ++i) {\r\n            var v = positions[i];\r\n            intervals[(i - 1)] = (v - prev);\r\n            prev = v;\r\n        }\r\n        return intervals;\r\n    };\r\n    return PdfColorBlend;\r\n}(PdfBlend));\r\nexport { PdfColorBlend };\r\n"]},"metadata":{},"sourceType":"module"}