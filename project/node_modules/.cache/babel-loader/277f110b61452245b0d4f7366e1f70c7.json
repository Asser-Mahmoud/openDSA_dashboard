{"ast":null,"code":"import { PdfGridCell } from './pdf-grid-cell';\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\n/**\r\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\r\n */\n\nvar PdfGridColumn =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\r\n   * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\r\n   * @private\r\n   */\n  function PdfGridColumn(grid) {\n    /**\r\n     * The `width` of the column.\r\n     * @default 0\r\n     * @private\r\n     */\n    this.columnWidth = 0;\n    this.grid = grid;\n  }\n\n  Object.defineProperty(PdfGridColumn.prototype, \"width\", {\n    /**\r\n     * Gets or sets the `width` of the 'PdfGridColumn'.\r\n     * @private\r\n     */\n    get: function () {\n      return this.columnWidth;\n    },\n    set: function (value) {\n      this.isCustomWidth = true;\n      this.columnWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumn.prototype, \"format\", {\n    /**\r\n     * Gets or sets the information about the text `formatting`.\r\n     * @private\r\n     */\n    get: function () {\n      if (this.stringFormat == null) {\n        this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\n      }\n\n      return this.stringFormat;\n    },\n    set: function (value) {\n      this.stringFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridColumn;\n}();\n\nexport { PdfGridColumn };\n/**\r\n * `PdfGridColumnCollection` class provides access to an ordered,\r\n * strongly typed collection of 'PdfGridColumn' objects.\r\n * @private\r\n */\n\nvar PdfGridColumnCollection =\n/** @class */\nfunction () {\n  //properties\n  //Constructors\n\n  /**\r\n   * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\r\n   * @private\r\n   */\n  function PdfGridColumnCollection(grid) {\n    /**\r\n     * @hidden\r\n     * @private\r\n     */\n    this.internalColumns = [];\n    /**\r\n     * @hidden\r\n     * @private\r\n     */\n\n    this.columnWidth = 0;\n    this.grid = grid;\n    this.internalColumns = [];\n  } //Iplementation\n\n  /**\r\n   * `Add` a new column to the 'PdfGrid'.\r\n   * @private\r\n   */\n\n\n  PdfGridColumnCollection.prototype.add = function (count) {\n    // public add(column : PdfGridColumn) : void\n    // public add(arg : number|PdfGridColumn) : void {\n    // if (typeof arg === 'number') {\n    for (var i = 0; i < count; i++) {\n      this.internalColumns.push(new PdfGridColumn(this.grid));\n\n      for (var index = 0; index < this.grid.rows.count; index++) {\n        var row = this.grid.rows.getRow(index);\n        var cell = new PdfGridCell();\n        cell.value = '';\n        row.cells.add(cell);\n      }\n    } // } else {\n    //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\n    //     this.columns.push(column);\n    //     return column;\n    // }\n\n  };\n\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\n    /**\r\n     * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\r\n     * @private\r\n     */\n    get: function () {\n      return this.internalColumns.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\n    /**\r\n     * Gets the `widths`.\r\n     * @private\r\n     */\n    get: function () {\n      if (this.columnWidth === 0) {\n        this.columnWidth = this.measureColumnsWidth();\n      }\n\n      if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\n        this.columnWidth = this.grid.initialWidth;\n        this.grid.isPageWidth = true;\n      }\n\n      return this.columnWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\n    /**\r\n     * Gets the `array of PdfGridColumn`.[Read-Only]\r\n     * @private\r\n     */\n    get: function () {\n      return this.internalColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Gets the `PdfGridColumn` from the specified index.[Read-Only]\r\n   * @private\r\n   */\n\n  PdfGridColumnCollection.prototype.getColumn = function (index) {\n    if (index >= 0 && index <= this.columns.length) {\n      return this.columns[index];\n    } else {\n      throw Error('can not get the column from the index: ' + index);\n    }\n  }; //Implementation\n\n  /**\r\n   * `Calculates the column widths`.\r\n   * @private\r\n   */\n\n\n  PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\n    var totalWidth = 0;\n    this.grid.measureColumnsWidth();\n\n    for (var i = 0, count = this.internalColumns.length; i < count; i++) {\n      totalWidth += this.internalColumns[i].width;\n    }\n\n    return totalWidth;\n  };\n  /**\r\n   * Gets the `widths of the columns`.\r\n   * @private\r\n   */\n\n\n  PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\n    var widths = [];\n    var summ = 0.0;\n    var subFactor = this.count;\n\n    for (var i = 0; i < this.count; i++) {\n      if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\n        this.internalColumns[i].width = 0;\n      } else {\n        widths[i] = this.internalColumns[i].width;\n\n        if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\n          totalWidth -= this.internalColumns[i].width;\n          subFactor--;\n        } else {\n          widths[i] = 0;\n        }\n      }\n    }\n\n    for (var i = 0; i < this.count; i++) {\n      var width = totalWidth / subFactor;\n\n      if (widths[i] <= 0) {\n        widths[i] = width;\n      }\n    }\n\n    return widths;\n  };\n\n  return PdfGridColumnCollection;\n}();\n\nexport { PdfGridColumnCollection };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-column.js"],"names":["PdfGridCell","PdfStringFormat","PdfGridColumn","grid","columnWidth","Object","defineProperty","prototype","get","set","value","isCustomWidth","enumerable","configurable","stringFormat","PdfGridColumnCollection","internalColumns","add","count","i","push","index","rows","row","getRow","cell","cells","length","measureColumnsWidth","initialWidth","style","allowHorizontalOverflow","isPageWidth","getColumn","columns","Error","totalWidth","width","getDefaultWidths","widths","summ","subFactor"],"mappings":"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","sourcesContent":["import { PdfGridCell } from './pdf-grid-cell';\r\nimport { PdfStringFormat } from './../../graphics/fonts/pdf-string-format';\r\n/**\r\n * `PdfGridColumn` class represents the schema of a column in a 'PdfGrid'.\r\n */\r\nvar PdfGridColumn = /** @class */ (function () {\r\n    //Constructors\r\n    /**\r\n     * Initializes a new instance of the `PdfGridColumn` class with the parent grid.\r\n     * @private\r\n     */\r\n    function PdfGridColumn(grid) {\r\n        /**\r\n         * The `width` of the column.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.columnWidth = 0;\r\n        this.grid = grid;\r\n    }\r\n    Object.defineProperty(PdfGridColumn.prototype, \"width\", {\r\n        /**\r\n         * Gets or sets the `width` of the 'PdfGridColumn'.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.columnWidth;\r\n        },\r\n        set: function (value) {\r\n            this.isCustomWidth = true;\r\n            this.columnWidth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridColumn.prototype, \"format\", {\r\n        /**\r\n         * Gets or sets the information about the text `formatting`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (this.stringFormat == null) {\r\n                this.stringFormat = new PdfStringFormat(); //GetDefaultFormat();\r\n            }\r\n            return this.stringFormat;\r\n        },\r\n        set: function (value) {\r\n            this.stringFormat = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PdfGridColumn;\r\n}());\r\nexport { PdfGridColumn };\r\n/**\r\n * `PdfGridColumnCollection` class provides access to an ordered,\r\n * strongly typed collection of 'PdfGridColumn' objects.\r\n * @private\r\n */\r\nvar PdfGridColumnCollection = /** @class */ (function () {\r\n    //properties\r\n    //Constructors\r\n    /**\r\n     * Initializes a new instance of the `PdfGridColumnCollection` class with the parent grid.\r\n     * @private\r\n     */\r\n    function PdfGridColumnCollection(grid) {\r\n        /**\r\n         * @hidden\r\n         * @private\r\n         */\r\n        this.internalColumns = [];\r\n        /**\r\n         * @hidden\r\n         * @private\r\n         */\r\n        this.columnWidth = 0;\r\n        this.grid = grid;\r\n        this.internalColumns = [];\r\n    }\r\n    //Iplementation\r\n    /**\r\n     * `Add` a new column to the 'PdfGrid'.\r\n     * @private\r\n     */\r\n    PdfGridColumnCollection.prototype.add = function (count) {\r\n        // public add(column : PdfGridColumn) : void\r\n        // public add(arg : number|PdfGridColumn) : void {\r\n        // if (typeof arg === 'number') {\r\n        for (var i = 0; i < count; i++) {\r\n            this.internalColumns.push(new PdfGridColumn(this.grid));\r\n            for (var index = 0; index < this.grid.rows.count; index++) {\r\n                var row = this.grid.rows.getRow(index);\r\n                var cell = new PdfGridCell();\r\n                cell.value = '';\r\n                row.cells.add(cell);\r\n            }\r\n        }\r\n        // } else {\r\n        //     let column : PdfGridColumn = new PdfGridColumn(this.grid);\r\n        //     this.columns.push(column);\r\n        //     return column;\r\n        // }\r\n    };\r\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"count\", {\r\n        /**\r\n         * Gets the `number of columns` in the 'PdfGrid'.[Read-Only].\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.internalColumns.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"width\", {\r\n        /**\r\n         * Gets the `widths`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (this.columnWidth === 0) {\r\n                this.columnWidth = this.measureColumnsWidth();\r\n            }\r\n            if (this.grid.initialWidth !== 0 && this.columnWidth !== this.grid.initialWidth && !this.grid.style.allowHorizontalOverflow) {\r\n                this.columnWidth = this.grid.initialWidth;\r\n                this.grid.isPageWidth = true;\r\n            }\r\n            return this.columnWidth;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfGridColumnCollection.prototype, \"columns\", {\r\n        /**\r\n         * Gets the `array of PdfGridColumn`.[Read-Only]\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.internalColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Gets the `PdfGridColumn` from the specified index.[Read-Only]\r\n     * @private\r\n     */\r\n    PdfGridColumnCollection.prototype.getColumn = function (index) {\r\n        if (index >= 0 && index <= this.columns.length) {\r\n            return this.columns[index];\r\n        }\r\n        else {\r\n            throw Error('can not get the column from the index: ' + index);\r\n        }\r\n    };\r\n    //Implementation\r\n    /**\r\n     * `Calculates the column widths`.\r\n     * @private\r\n     */\r\n    PdfGridColumnCollection.prototype.measureColumnsWidth = function () {\r\n        var totalWidth = 0;\r\n        this.grid.measureColumnsWidth();\r\n        for (var i = 0, count = this.internalColumns.length; i < count; i++) {\r\n            totalWidth += this.internalColumns[i].width;\r\n        }\r\n        return totalWidth;\r\n    };\r\n    /**\r\n     * Gets the `widths of the columns`.\r\n     * @private\r\n     */\r\n    PdfGridColumnCollection.prototype.getDefaultWidths = function (totalWidth) {\r\n        var widths = [];\r\n        var summ = 0.0;\r\n        var subFactor = this.count;\r\n        for (var i = 0; i < this.count; i++) {\r\n            if (this.grid.isPageWidth && totalWidth >= 0 && !this.internalColumns[i].isCustomWidth) {\r\n                this.internalColumns[i].width = 0;\r\n            }\r\n            else {\r\n                widths[i] = this.internalColumns[i].width;\r\n                if (this.internalColumns[i].width > 0 && this.internalColumns[i].isCustomWidth) {\r\n                    totalWidth -= this.internalColumns[i].width;\r\n                    subFactor--;\r\n                }\r\n                else {\r\n                    widths[i] = 0;\r\n                }\r\n            }\r\n        }\r\n        for (var i = 0; i < this.count; i++) {\r\n            var width = totalWidth / subFactor;\r\n            if (widths[i] <= 0) {\r\n                widths[i] = width;\r\n            }\r\n        }\r\n        return widths;\r\n    };\r\n    return PdfGridColumnCollection;\r\n}());\r\nexport { PdfGridColumnCollection };\r\n"]},"metadata":{},"sourceType":"module"}