{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n  const [selectedExercise, setSelectedExercise] = useState(0);\n\n  const handleChangeExercise = event => {\n    setSelectedExercise(event.target.value);\n    updatePlotData(event.target.value);\n  };\n\n  const updatePlotData = exercise => {\n    var _result$Ability, _result$Discriminatio, _result$Difficulty$ex;\n\n    // Perform the necessary calculations and update the plot data based on the selected exercise\n    const x = (_result$Ability = result.Ability) !== null && _result$Ability !== void 0 ? _result$Ability : [];\n    const a = (_result$Discriminatio = result.Discrimination[exercise]) !== null && _result$Discriminatio !== void 0 ? _result$Discriminatio : [];\n    const b = (_result$Difficulty$ex = result.Difficulty[exercise]) !== null && _result$Difficulty$ex !== void 0 ? _result$Difficulty$ex : [];\n\n    const sigmoid = (x, a, b) => {\n      const denominator = 1 + Math.exp(-a * (x - b));\n      return denominator === 0 ? NaN : 1 / denominator;\n    };\n\n    const y = x.map(val => sigmoid(val, a[0], b[0]));\n    const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n    const sortedX = sortedData.map(pair => pair[0]);\n    const sortedY = sortedData.map(pair => pair[1]);\n    const meanA = math.mean(result.Discrimination[exercise]);\n    const meanB = math.mean(result.Difficulty[exercise]);\n    const minAbility = Math.min(...result.Ability);\n    const maxAbility = Math.max(...result.Ability);\n    const range = maxAbility - minAbility;\n    const step = range / 100;\n    const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n    const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB));\n    setPlotData({\n      icc: {\n        x: sortedX,\n        y: sortedY\n      },\n      tcc: {\n        x: abilityValues,\n        y: y2\n      }\n    });\n  };\n\n  const handleClick = () => {\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\n\n    axios.post(`http://localhost:4000/estimate/${data}`).then(response => {\n      setResult(response.data);\n      updatePlotData(selectedExercise); // Update the plot data with the default selected exercise\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedExercise,\n      onChange: handleChangeExercise,\n      children: result && result.Discrimination.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index,\n        children: [\"Exercise \", index + 1]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Item Response Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.icc.x,\n            y: plotData.icc.y,\n            type: 'scatter',\n            mode: 'lines+markers',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Item Response Curve',\n            xaxis: {\n              title: 'Latent Trait'\n            },\n            yaxis: {\n              title: 'Item Response'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Test Characteristic Curve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: plotData.tcc.x,\n            y: plotData.tcc.y,\n            type: 'scatter',\n            mode: 'lines',\n            line: {\n              color: 'black'\n            },\n            marker: {\n              symbol: 'circle',\n              size: 8\n            }\n          }],\n          layout: {\n            width: 550,\n            height: 600,\n            title: 'IRT Model - Test Characteristic Curve'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IRT, \"1+7Yct5HKnCFl+QwCS2poW9WTKc=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","selectedExercise","setSelectedExercise","handleChangeExercise","event","target","value","updatePlotData","exercise","Ability","a","Discrimination","b","Difficulty","sigmoid","denominator","Math","exp","NaN","map","val","sortedData","index","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","handleClick","data","post","then","response","catch","error","console","display","flex","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all)\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] }});\r\n  const [selectedExercise, setSelectedExercise] = useState(0); \r\n\r\n  const handleChangeExercise = (event) => {\r\n    setSelectedExercise(event.target.value);\r\n    updatePlotData(event.target.value);\r\n  };\r\n\r\n  const updatePlotData = (exercise) => {\r\n    // Perform the necessary calculations and update the plot data based on the selected exercise\r\n    const x = result.Ability ?? [];\r\n    const a = result.Discrimination[exercise] ?? [];\r\n    const b = result.Difficulty[exercise] ?? [];\r\n    const sigmoid = (x, a, b) => {\r\n      const denominator = 1 + Math.exp(-a * (x - b));\r\n      return denominator === 0 ? NaN : 1 / denominator;\r\n    };\r\n    const y = x.map((val) => sigmoid(val, a[0], b[0]));\r\n    const sortedData = x.map((value, index) => [value, y[index]])\r\n      .sort((a, b) => a[0] - b[0]);\r\n    const sortedX = sortedData.map(pair => pair[0]);\r\n    const sortedY = sortedData.map(pair => pair[1]);\r\n    const meanA = math.mean(result.Discrimination[exercise]);\r\n    const meanB = math.mean(result.Difficulty[exercise]);\r\n    const minAbility = Math.min(...result.Ability);\r\n    const maxAbility = Math.max(...result.Ability);\r\n    const range = maxAbility - minAbility;\r\n    const step = range / 100;\r\n    const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n    const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n    setPlotData({\r\n      icc: { x: sortedX, y: sortedY },\r\n      tcc: { x: abilityValues, y: y2 }\r\n    });\r\n  };\r\n\r\n  const handleClick = () => {\r\n    const data = 'attemps_test.csv'; // Replace this with the actual file name\r\n    axios\r\n      .post(`http://localhost:4000/estimate/${data}`)\r\n      .then(response => {\r\n        setResult(response.data);\r\n        updatePlotData(selectedExercise); // Update the plot data with the default selected exercise\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <select value={selectedExercise} onChange={handleChangeExercise}>\r\n        {result && result.Discrimination.map((exercise, index) => (\r\n          <option value={index} key={index}>\r\n            Exercise {index + 1}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <div style={{ display: 'flex' }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div>Item Response Curve</div>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.icc.x,\r\n                y: plotData.icc.y,\r\n                type: 'scatter',\r\n                mode: 'lines+markers',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              }\r\n            ]}\r\n            layout={{\r\n              width: 550,\r\n              height: 600,\r\n              title: 'IRT Model - Item Response Curve',\r\n              xaxis: { title: 'Latent Trait' },\r\n              yaxis: { title: 'Item Response' }\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ flex: 1 }}>\r\n          <div>Test Characteristic Curve</div>\r\n          <Plot\r\n            data={[\r\n              {\r\n                x: plotData.tcc.x,\r\n                y: plotData.tcc.y,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n                line: { color: 'black' },\r\n                marker: { symbol: 'circle', size: 8 }\r\n              },\r\n            ]}\r\n            layout={{ width: 550, height: 600, title: 'IRT Model - Test Characteristic Curve' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}