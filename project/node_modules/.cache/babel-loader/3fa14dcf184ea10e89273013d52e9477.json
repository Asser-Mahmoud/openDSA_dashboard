{"ast":null,"code":"/**\r\n * ByteArray class\r\n * Used to keep information about image stream as byte array.\r\n * @private\r\n */\nvar ByteArray =\n/** @class */\nfunction () {\n  /**\r\n   * Initialize the new instance for `byte-array` class\r\n   * @hidden\r\n   * @private\r\n   */\n  function ByteArray(length) {\n    /**\r\n     * Current stream `position`.\r\n     * @default 0\r\n     * @private\r\n     */\n    this.mPosition = 0;\n    this.buffer = new Uint8Array(length);\n    this.dataView = new DataView(this.buffer.buffer);\n  }\n\n  Object.defineProperty(ByteArray.prototype, \"position\", {\n    /**\r\n     * Gets and Sets a current `position` of byte array.\r\n     * @hidden\r\n     * @private\r\n     */\n    get: function () {\n      return this.mPosition;\n    },\n    set: function (value) {\n      this.mPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * `Read` from current stream position.\r\n   * @default 0\r\n   * @hidden\r\n   * @private\r\n   */\n\n  ByteArray.prototype.read = function (buffer, offset, count) {\n    for (var index = offset; index < count; index++) {\n      var position = this.position;\n      buffer.buffer[index] = this.readByte(position);\n      this.position++;\n    }\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  ByteArray.prototype.getBuffer = function (index) {\n    return this.buffer[index];\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  ByteArray.prototype.writeFromBase64String = function (base64) {\n    var arr = this.encodedString(base64);\n    this.buffer = arr;\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  ByteArray.prototype.encodedString = function (input) {\n    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var chr1;\n    var chr2;\n    var chr3;\n    var enc1;\n    var enc2;\n    var enc3;\n    var enc4;\n    var i = 0;\n    var resultIndex = 0;\n    var dataUrlPrefix = 'data:';\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n    var totalLength = input.length * 3 / 4;\n\n    if (input.charAt(input.length - 1) === keyStr.charAt(64)) {\n      totalLength--;\n    }\n\n    var output = new Uint8Array(totalLength | 0);\n\n    while (i < input.length) {\n      enc1 = keyStr.indexOf(input.charAt(i++));\n      enc2 = keyStr.indexOf(input.charAt(i++));\n      enc3 = keyStr.indexOf(input.charAt(i++));\n      enc4 = keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output[resultIndex++] = chr1;\n      output[resultIndex++] = chr2;\n      output[resultIndex++] = chr3;\n    }\n\n    return output;\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  ByteArray.prototype.readByte = function (offset) {\n    return this.buffer[offset];\n  };\n\n  Object.defineProperty(ByteArray.prototype, \"internalBuffer\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function () {\n      return this.buffer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ByteArray.prototype, \"count\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function () {\n      return this.buffer.byteLength;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * 'readNextTwoBytes' stream\r\n   * @hidden\r\n   * @private\r\n   */\n\n  ByteArray.prototype.readNextTwoBytes = function (stream) {\n    var data = stream.readByte(this.position);\n    this.position++;\n    data <<= 8;\n    data |= stream.readByte(this.position);\n    this.position++;\n    return data;\n  };\n\n  return ByteArray;\n}();\n\nexport { ByteArray };","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/byte-array.js"],"names":["ByteArray","length","mPosition","buffer","Uint8Array","dataView","DataView","Object","defineProperty","prototype","get","set","value","enumerable","configurable","read","offset","count","index","position","readByte","getBuffer","writeFromBase64String","base64","arr","encodedString","input","keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","resultIndex","dataUrlPrefix","replace","totalLength","charAt","output","indexOf","byteLength","readNextTwoBytes","stream","data"],"mappings":"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","sourcesContent":["/**\r\n * ByteArray class\r\n * Used to keep information about image stream as byte array.\r\n * @private\r\n */\r\nvar ByteArray = /** @class */ (function () {\r\n    /**\r\n     * Initialize the new instance for `byte-array` class\r\n     * @hidden\r\n     * @private\r\n     */\r\n    function ByteArray(length) {\r\n        /**\r\n         * Current stream `position`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.mPosition = 0;\r\n        this.buffer = new Uint8Array(length);\r\n        this.dataView = new DataView(this.buffer.buffer);\r\n    }\r\n    Object.defineProperty(ByteArray.prototype, \"position\", {\r\n        /**\r\n         * Gets and Sets a current `position` of byte array.\r\n         * @hidden\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.mPosition;\r\n        },\r\n        set: function (value) {\r\n            this.mPosition = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * `Read` from current stream position.\r\n     * @default 0\r\n     * @hidden\r\n     * @private\r\n     */\r\n    ByteArray.prototype.read = function (buffer, offset, count) {\r\n        for (var index = offset; index < count; index++) {\r\n            var position = this.position;\r\n            buffer.buffer[index] = this.readByte(position);\r\n            this.position++;\r\n        }\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    ByteArray.prototype.getBuffer = function (index) {\r\n        return this.buffer[index];\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    ByteArray.prototype.writeFromBase64String = function (base64) {\r\n        var arr = this.encodedString(base64);\r\n        this.buffer = arr;\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    ByteArray.prototype.encodedString = function (input) {\r\n        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n        var chr1;\r\n        var chr2;\r\n        var chr3;\r\n        var enc1;\r\n        var enc2;\r\n        var enc3;\r\n        var enc4;\r\n        var i = 0;\r\n        var resultIndex = 0;\r\n        var dataUrlPrefix = 'data:';\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n        var totalLength = input.length * 3 / 4;\r\n        if (input.charAt(input.length - 1) === keyStr.charAt(64)) {\r\n            totalLength--;\r\n        }\r\n        var output = new Uint8Array(totalLength | 0);\r\n        while (i < input.length) {\r\n            enc1 = keyStr.indexOf(input.charAt(i++));\r\n            enc2 = keyStr.indexOf(input.charAt(i++));\r\n            enc3 = keyStr.indexOf(input.charAt(i++));\r\n            enc4 = keyStr.indexOf(input.charAt(i++));\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n            output[resultIndex++] = chr1;\r\n            output[resultIndex++] = chr2;\r\n            output[resultIndex++] = chr3;\r\n        }\r\n        return output;\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    ByteArray.prototype.readByte = function (offset) {\r\n        return (this.buffer[offset]);\r\n    };\r\n    Object.defineProperty(ByteArray.prototype, \"internalBuffer\", {\r\n        /**\r\n         * @hidden\r\n         */\r\n        get: function () {\r\n            return this.buffer;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ByteArray.prototype, \"count\", {\r\n        /**\r\n         * @hidden\r\n         */\r\n        get: function () {\r\n            return this.buffer.byteLength;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * 'readNextTwoBytes' stream\r\n     * @hidden\r\n     * @private\r\n     */\r\n    ByteArray.prototype.readNextTwoBytes = function (stream) {\r\n        var data = stream.readByte(this.position);\r\n        this.position++;\r\n        data <<= 8;\r\n        data |= stream.readByte(this.position);\r\n        this.position++;\r\n        return data;\r\n    };\r\n    return ByteArray;\r\n}());\r\nexport { ByteArray };\r\n"]},"metadata":{},"sourceType":"module"}