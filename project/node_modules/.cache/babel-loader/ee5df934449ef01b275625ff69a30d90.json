{"ast":null,"code":"import { StreamWriter } from '@syncfusion/ej2-file-utils';\nimport { Encoding } from '@syncfusion/ej2-file-utils';\nimport { PdfDocument } from './pdf-document';\n/**\r\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\r\n * @private\r\n */\n\nvar PdfDocumentBase =\n/** @class */\nfunction () {\n  function PdfDocumentBase(document) {\n    /**\r\n     * If the stream is copied,  then it specifies true.\r\n     * @private\r\n     */\n    this.isStreamCopied = false;\n\n    if (document instanceof PdfDocument) {\n      this.document = document;\n    }\n  }\n\n  Object.defineProperty(PdfDocumentBase.prototype, \"pdfObjects\", {\n    //Prpperties\n\n    /**\r\n     * Gets the `PDF objects` collection, which stores all objects and references to it..\r\n     * @private\r\n     */\n    get: function () {\n      return this.objects;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"crossTable\", {\n    /**\r\n     * Gets the `cross-reference` table.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfCrossTable;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"currentSavingObj\", {\n    /**\r\n     * Gets or sets the current saving `object number`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.currentSavingObject;\n    },\n    set: function (value) {\n      this.currentSavingObject = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfDocumentBase.prototype, \"catalog\", {\n    /**\r\n     * Gets the PDF document `catalog`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfCatalog;\n    },\n    set: function (value) {\n      this.pdfCatalog = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Public methods\n\n  /**\r\n   * Sets the `main object collection`.\r\n   * @private\r\n   */\n\n  PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {\n    this.objects = mainObjectCollection;\n  };\n  /**\r\n   * Sets the `cross table`.\r\n   * @private\r\n   */\n\n\n  PdfDocumentBase.prototype.setCrossTable = function (cTable) {\n    this.pdfCrossTable = cTable;\n  };\n  /**\r\n   * Sets the `catalog`.\r\n   * @private\r\n   */\n\n\n  PdfDocumentBase.prototype.setCatalog = function (catalog) {\n    this.pdfCatalog = catalog;\n  };\n\n  PdfDocumentBase.prototype.save = function (filename) {\n    var _this = this;\n\n    var encoding = new Encoding(true);\n    var SW = new StreamWriter(encoding);\n\n    if (typeof filename === 'undefined') {\n      var encoding_1 = new Encoding(true);\n      var SW_1 = new StreamWriter(encoding_1);\n      return new Promise(function (resolve, reject) {\n        /* tslint:disable-next-line:no-any */\n        var obj = {};\n        obj.blobData = new Blob([_this.document.docSave(SW_1, true)], {\n          type: 'application/pdf'\n        });\n        resolve(obj);\n      });\n    } else {\n      this.document.docSave(SW, filename, true);\n    }\n  };\n  /**\r\n   * `Clone` of parent object - PdfDocument.\r\n   * @private\r\n   */\n\n\n  PdfDocumentBase.prototype.clone = function () {\n    return this.document;\n  };\n\n  return PdfDocumentBase;\n}();\n\nexport { PdfDocumentBase };","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/document/pdf-document-base.js"],"names":["StreamWriter","Encoding","PdfDocument","PdfDocumentBase","document","isStreamCopied","Object","defineProperty","prototype","get","objects","enumerable","configurable","pdfCrossTable","currentSavingObject","set","value","pdfCatalog","setMainObjectCollection","mainObjectCollection","setCrossTable","cTable","setCatalog","catalog","save","filename","_this","encoding","SW","encoding_1","SW_1","Promise","resolve","reject","obj","blobData","Blob","docSave","type","clone"],"mappings":"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","sourcesContent":["import { StreamWriter } from '@syncfusion/ej2-file-utils';\r\nimport { Encoding } from '@syncfusion/ej2-file-utils';\r\nimport { PdfDocument } from './pdf-document';\r\n/**\r\n * `PdfDocumentBase` class represent common properties of PdfDocument classes.\r\n * @private\r\n */\r\nvar PdfDocumentBase = /** @class */ (function () {\r\n    function PdfDocumentBase(document) {\r\n        /**\r\n         * If the stream is copied,  then it specifies true.\r\n         * @private\r\n         */\r\n        this.isStreamCopied = false;\r\n        if (document instanceof PdfDocument) {\r\n            this.document = document;\r\n        }\r\n    }\r\n    Object.defineProperty(PdfDocumentBase.prototype, \"pdfObjects\", {\r\n        //Prpperties\r\n        /**\r\n         * Gets the `PDF objects` collection, which stores all objects and references to it..\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.objects;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfDocumentBase.prototype, \"crossTable\", {\r\n        /**\r\n         * Gets the `cross-reference` table.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfCrossTable;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfDocumentBase.prototype, \"currentSavingObj\", {\r\n        /**\r\n         * Gets or sets the current saving `object number`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.currentSavingObject;\r\n        },\r\n        set: function (value) {\r\n            this.currentSavingObject = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfDocumentBase.prototype, \"catalog\", {\r\n        /**\r\n         * Gets the PDF document `catalog`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfCatalog;\r\n        },\r\n        set: function (value) {\r\n            this.pdfCatalog = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Public methods\r\n    /**\r\n     * Sets the `main object collection`.\r\n     * @private\r\n     */\r\n    PdfDocumentBase.prototype.setMainObjectCollection = function (mainObjectCollection) {\r\n        this.objects = mainObjectCollection;\r\n    };\r\n    /**\r\n     * Sets the `cross table`.\r\n     * @private\r\n     */\r\n    PdfDocumentBase.prototype.setCrossTable = function (cTable) {\r\n        this.pdfCrossTable = cTable;\r\n    };\r\n    /**\r\n     * Sets the `catalog`.\r\n     * @private\r\n     */\r\n    PdfDocumentBase.prototype.setCatalog = function (catalog) {\r\n        this.pdfCatalog = catalog;\r\n    };\r\n    PdfDocumentBase.prototype.save = function (filename) {\r\n        var _this = this;\r\n        var encoding = new Encoding(true);\r\n        var SW = new StreamWriter(encoding);\r\n        if (typeof filename === 'undefined') {\r\n            var encoding_1 = new Encoding(true);\r\n            var SW_1 = new StreamWriter(encoding_1);\r\n            return new Promise(function (resolve, reject) {\r\n                /* tslint:disable-next-line:no-any */\r\n                var obj = {};\r\n                obj.blobData = new Blob([_this.document.docSave(SW_1, true)], { type: 'application/pdf' });\r\n                resolve(obj);\r\n            });\r\n        }\r\n        else {\r\n            this.document.docSave(SW, filename, true);\r\n        }\r\n    };\r\n    /**\r\n     * `Clone` of parent object - PdfDocument.\r\n     * @private\r\n     */\r\n    PdfDocumentBase.prototype.clone = function () {\r\n        return this.document;\r\n    };\r\n    return PdfDocumentBase;\r\n}());\r\nexport { PdfDocumentBase };\r\n"]},"metadata":{},"sourceType":"module"}