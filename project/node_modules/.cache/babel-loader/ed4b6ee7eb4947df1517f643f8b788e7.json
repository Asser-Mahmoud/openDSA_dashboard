{"ast":null,"code":"import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { bitNotNumber } from '../../plain/number/index.js';\nvar name = 'bitNot';\nvar dependencies = ['typed'];\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\r\n   * Bitwise NOT value, `~x`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitNot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitNot(1)               // returns number -2\r\n   *\r\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\r\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\r\n   */\n\n  return typed(name, {\n    number: bitNotNumber,\n    BigNumber: bitNotBigNumber,\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/bitwise/bitNot.js"],"names":["bitNotBigNumber","deepMap","factory","bitNotNumber","name","dependencies","createBitNot","_ref","typed","number","BigNumber","referToSelf","self","x"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kCAAhC;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC3E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEN,YADS;AAEjBO,IAAAA,SAAS,EAAEV,eAFM;AAGjB,sBAAkBQ,KAAK,CAACG,WAAN,CAAkBC,IAAI,IAAIC,CAAC,IAAIZ,OAAO,CAACY,CAAD,EAAID,IAAJ,CAAtC;AAHD,GAAP,CAAZ;AAKD,CA/B+C,CAAzC","sourcesContent":["import { bitNotBigNumber } from '../../utils/bignumber/bitwise.js';\r\nimport { deepMap } from '../../utils/collection.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { bitNotNumber } from '../../plain/number/index.js';\r\nvar name = 'bitNot';\r\nvar dependencies = ['typed'];\r\nexport var createBitNot = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed\r\n  } = _ref;\r\n  /**\r\n   * Bitwise NOT value, `~x`.\r\n   * For matrices, the function is evaluated element wise.\r\n   * For units, the function is evaluated on the best prefix base.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.bitNot(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.bitNot(1)               // returns number -2\r\n   *\r\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, -5]\r\n   *\r\n   * See also:\r\n   *\r\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\r\n   *\r\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\r\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\r\n   */\r\n  return typed(name, {\r\n    number: bitNotNumber,\r\n    BigNumber: bitNotBigNumber,\r\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}