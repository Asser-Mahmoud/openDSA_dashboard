{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amase\\\\Desktop\\\\open_dsa\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    icc: {\n      x: [],\n      y: []\n    },\n    tcc: {\n      x: [],\n      y: []\n    }\n  });\n\n  const handleClick = () => {\n    axios.get('/file.csv') // assuming data.csv is in the public directory\n    .then(response => {\n      const csvData = response.data;\n      const parsedData = Papa.parse(csvData, {\n        header: true\n      }).data;\n      const matrixData = parsedData.map(row => Object.values(row).map(val => parseInt(val)));\n      const data = {\n        matrix: {\n          data: matrixData\n        }\n      };\n      console.log(data); // const data = 'attemps_test.csv'; // Replace this with the actual file name\n\n      axios //       .post(`http://localhost:8000/estimate/${data}`)\n      .post('http://localhost:8000/estimate', data).then(response => {\n        var _response$data$Abilit, _response$data$Discri, _response$data$Diffic;\n\n        const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n        const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : []; // use the first element for all items\n\n        const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n        console.log(x, a[0], b[0]);\n\n        const sigmoid = (x, a, b) => {\n          const denominator = 1 + Math.exp(-a * (x - b));\n          return denominator === 0 ? NaN : 1 / denominator;\n        };\n\n        const y = x.map(val => sigmoid(val, a[18], b[18]));\n        console.log(y);\n        const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n        const sortedX = sortedData.map(pair => pair[0]);\n        const sortedY = sortedData.map(pair => pair[1]); // Calculate mean discrimination and difficulty for all exercises\n\n        const meanA = math.mean(response.data.Discrimination);\n        const meanB = math.mean(response.data.Difficulty); // Calculate item response probabilities for a range of ability values\n\n        const minAbility = Math.min(...response.data.Ability);\n        const maxAbility = Math.max(...response.data.Ability);\n        const range = maxAbility - minAbility;\n        const step = range / 100;\n        const abilityValues = math.range(minAbility, maxAbility, step).toArray();\n        const y2 = abilityValues.map(val => sigmoid(val, meanA, meanB)); // Plot the test characteristic curve\n\n        setPlotData({\n          icc: {\n            x: sortedX,\n            y: sortedY\n          },\n          tcc: {\n            x: abilityValues,\n            y: y2\n          }\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"estimate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: plotData.icc.x,\n        y: plotData.icc.y,\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: {\n          color: 'black'\n        },\n        marker: {\n          symbol: 'circle',\n          size: 8\n        }\n      }],\n      layout: {\n        width: 800,\n        height: 600,\n        title: 'IRT model',\n        xaxis: {\n          title: 'Latent trait'\n        },\n        yaxis: {\n          title: 'Item response'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Characteristic Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: [{\n          x: plotData.tcc.x,\n          y: plotData.tcc.y,\n          type: \"scatter\",\n          mode: \"lines\",\n          line: {\n            color: 'black'\n          },\n          marker: {\n            symbol: 'circle',\n            size: 8\n          }\n        }],\n        layout: {\n          width: 800,\n          height: 600,\n          title: \"Test Characteristic Curve\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IRT, \"EuueaKaXdjyjof6KksRLoA74k20=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","icc","x","y","tcc","handleClick","get","then","response","csvData","data","parsedData","parse","header","matrixData","map","row","Object","values","val","parseInt","matrix","console","log","post","Ability","a","Discrimination","b","Difficulty","sigmoid","denominator","Math","exp","NaN","sortedData","value","index","sort","sortedX","pair","sortedY","meanA","mean","meanB","minAbility","min","maxAbility","max","range","step","abilityValues","toArray","y2","catch","error","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all)\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ icc: { x: [], y: [] }, tcc: { x: [], y: [] }});\r\n\r\n  const handleClick = () => {\r\n    axios.get('/file.csv') // assuming data.csv is in the public directory\r\n      .then(response => {\r\n        const csvData = response.data;\r\n        const parsedData = Papa.parse(csvData, { header: true }).data;\r\n        const matrixData = parsedData.map(row => Object.values(row).map(val => parseInt(val)));\r\n        const data = { matrix: { data: matrixData } };\r\n        console.log(data);\r\n    // const data = 'attemps_test.csv'; // Replace this with the actual file name\r\n        axios\r\n    //       .post(`http://localhost:8000/estimate/${data}`)\r\n          .post('http://localhost:8000/estimate', data)\r\n          .then(response => {\r\n            const x = response.data.Ability ?? [];\r\n            const a = response.data.Discrimination ?? []; // use the first element for all items\r\n            const b = response.data.Difficulty ?? [];\r\n            console.log(x,a[0],b[0])\r\n            const sigmoid = (x, a, b) => {\r\n              const denominator = 1 + Math.exp(-a * (x - b));\r\n              return denominator === 0 ? NaN : 1 / denominator;\r\n            };\r\n            const y = x.map((val) => sigmoid(val, a[18], b[18]));\r\n            console.log(y)\r\n            const sortedData = x.map((value, index) => [value, y[index]])\r\n              .sort((a, b) => a[0] - b[0]);\r\n            const sortedX = sortedData.map(pair => pair[0]);\r\n            const sortedY = sortedData.map(pair => pair[1]);\r\n            // Calculate mean discrimination and difficulty for all exercises\r\n            const meanA = math.mean(response.data.Discrimination);\r\n            const meanB = math.mean(response.data.Difficulty);\r\n\r\n            // Calculate item response probabilities for a range of ability values\r\n            const minAbility = Math.min(...response.data.Ability);\r\n            const maxAbility = Math.max(...response.data.Ability);\r\n            const range = maxAbility - minAbility;\r\n            const step = range / 100;\r\n            const abilityValues = math.range(minAbility, maxAbility, step).toArray();\r\n            const y2 = abilityValues.map((val) => sigmoid(val, meanA, meanB));\r\n\r\n            // Plot the test characteristic curve\r\n            setPlotData({\r\n              icc: { x: sortedX, y: sortedY },\r\n              tcc: { x: abilityValues, y: y2 }\r\n            });\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <button onClick={handleClick}>estimate</button>\r\n      <Plot\r\n        data={[\r\n          {\r\n            x: plotData.icc.x,\r\n            y: plotData.icc.y,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            line: { color: 'black' },\r\n            marker: { symbol: 'circle', size: 8 }\r\n          }\r\n        ]}\r\n        layout={{\r\n          width: 800,\r\n          height: 600,\r\n          title: 'IRT model',\r\n          xaxis: { title: 'Latent trait' },\r\n          yaxis: { title: 'Item response' }\r\n        }}\r\n      />\r\n      <div>\r\n    <h2>Test Characteristic Curve</h2>\r\n    <Plot\r\n      data={[\r\n        {\r\n          x: plotData.tcc.x,\r\n          y: plotData.tcc.y,\r\n          type: \"scatter\",\r\n          mode: \"lines\",\r\n          line: { color: 'black' },\r\n          marker: { symbol: 'circle', size: 8 }\r\n        },\r\n      ]}\r\n      layout={{ width: 800, height: 600, title: \"Test Characteristic Curve\" }}\r\n    />\r\n  </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}