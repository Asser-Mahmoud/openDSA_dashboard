{"ast":null,"code":"/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\r\n * To import utils\r\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n\nvar SvgRenderer =\n/** @class */\nfunction () {\n  /* End-Properties */\n  function SvgRenderer(rootID) {\n    //Internal Variables\n    this.svgLink = 'http://www.w3.org/2000/svg';\n    this.rootId = rootID;\n  } // method to get the attributes value\n  // tslint:disable-next-line:no-any\n\n\n  SvgRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  };\n  /* tslint:enable */\n\n  /**\r\n   * To create a Html5 SVG element\r\n   *\r\n   * @param {SVGAttributes} options - Options to create SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createSvg = function (options) {\n    if (isNullOrUndefined(options.id)) {\n      options.id = this.rootId + '_svg';\n    }\n\n    this.svgObj = document.getElementById(options.id);\n\n    if (isNullOrUndefined(document.getElementById(options.id))) {\n      this.svgObj = document.createElementNS(this.svgLink, 'svg');\n    }\n\n    this.svgObj = this.setElementAttributes(options, this.svgObj);\n    this.setSVGSize(options.width, options.height);\n    return this.svgObj;\n  }; // method to set the height and width for the SVG element\n\n\n  SvgRenderer.prototype.setSVGSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n\n    if (isNullOrUndefined(this.width) || this.width <= 0) {\n      this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.svgObj.setAttribute('width', this.width.toString());\n    }\n\n    if (isNullOrUndefined(this.height) || this.height <= 0) {\n      this.svgObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.svgObj.setAttribute('height', this.height.toString());\n    }\n  };\n  /**\r\n   * To draw a path\r\n   *\r\n   * @param {PathAttributes} options - Options to draw a path in SVG\r\n   * @returns {Element} It returns a appropriate path\r\n   */\n\n\n  SvgRenderer.prototype.drawPath = function (options) {\n    var path = document.getElementById(options.id);\n\n    if (path === null) {\n      path = document.createElementNS(this.svgLink, 'path');\n    }\n\n    path = this.setElementAttributes(options, path);\n    return path;\n  };\n  /**\r\n   * To draw a line\r\n   *\r\n   * @param {LineAttributes} options - Options to draw a line in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawLine = function (options) {\n    var line = document.getElementById(options.id);\n\n    if (line === null) {\n      line = document.createElementNS(this.svgLink, 'line');\n    }\n\n    line = this.setElementAttributes(options, line);\n    return line;\n  };\n  /**\r\n   * To draw a rectangle\r\n   *\r\n   * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawRectangle = function (options) {\n    var rectangle = document.getElementById(options.id);\n\n    if (rectangle === null) {\n      rectangle = document.createElementNS(this.svgLink, 'rect');\n    }\n\n    rectangle = this.setElementAttributes(options, rectangle);\n    return rectangle;\n  };\n  /**\r\n   * To draw a circle\r\n   *\r\n   * @param {CircleAttributes} options - Required options to draw a circle in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawCircle = function (options) {\n    var circle = document.getElementById(options.id);\n\n    if (circle === null) {\n      circle = document.createElementNS(this.svgLink, 'circle');\n    }\n\n    circle = this.setElementAttributes(options, circle);\n    return circle;\n  };\n  /**\r\n   * To draw a polyline\r\n   *\r\n   * @param {PolylineAttributes} options - Options required to draw a polyline\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawPolyline = function (options) {\n    var polyline = document.getElementById(options.id);\n\n    if (polyline === null) {\n      polyline = document.createElementNS(this.svgLink, 'polyline');\n    }\n\n    polyline = this.setElementAttributes(options, polyline);\n    return polyline;\n  };\n  /**\r\n   * To draw an ellipse\r\n   *\r\n   * @param {EllipseAttributes} options - Options required to draw an ellipse\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawEllipse = function (options) {\n    var ellipse = document.getElementById(options.id);\n\n    if (ellipse === null) {\n      ellipse = document.createElementNS(this.svgLink, 'ellipse');\n    }\n\n    ellipse = this.setElementAttributes(options, ellipse);\n    return ellipse;\n  };\n  /**\r\n   * To draw a polygon\r\n   *\r\n   * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawPolygon = function (options) {\n    var polygon = document.getElementById(options.id);\n\n    if (polygon === null) {\n      polygon = document.createElementNS(this.svgLink, 'polygon');\n    }\n\n    polygon = this.setElementAttributes(options, polygon);\n    return polygon;\n  };\n  /**\r\n   * To draw an image\r\n   *\r\n   * @param {ImageAttributes} options - Required options to draw an image in SVG\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawImage = function (options) {\n    var img = document.createElementNS(this.svgLink, 'image');\n    img.setAttributeNS(null, 'height', options.height.toString());\n    img.setAttributeNS(null, 'width', options.width.toString());\n    img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\n    img.setAttributeNS(null, 'x', options.x.toString());\n    img.setAttributeNS(null, 'y', options.y.toString());\n    img.setAttributeNS(null, 'id', options.id);\n    img.setAttributeNS(null, 'visibility', options.visibility);\n\n    if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\n      img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\n    }\n\n    if (!isNullOrUndefined(options.preserveAspectRatio)) {\n      img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\n    }\n\n    return img;\n  };\n  /**\r\n   * To draw a text\r\n   *\r\n   * @param {TextAttributes} options - Options needed to draw a text in SVG\r\n   * @param {string} label - Label of the text\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createText = function (options, label) {\n    var text = document.createElementNS(this.svgLink, 'text');\n    text = this.setElementAttributes(options, text);\n\n    if (!isNullOrUndefined(label)) {\n      text.textContent = label;\n    }\n\n    return text;\n  };\n  /**\r\n   * To create a tSpan\r\n   *\r\n   * @param {TextAttributes} options - Options to create tSpan\r\n   * @param {string} label - The text content which is to be rendered in the tSpan\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createTSpan = function (options, label) {\n    var tSpan = document.createElementNS(this.svgLink, 'tspan');\n    tSpan = this.setElementAttributes(options, tSpan);\n\n    if (!isNullOrUndefined(label)) {\n      tSpan.textContent = label;\n    }\n\n    return tSpan;\n  };\n  /**\r\n   * To create a title\r\n   *\r\n   * @param {string} text - The text content which is to be rendered in the title\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createTitle = function (text) {\n    var title = document.createElementNS(this.svgLink, 'title');\n    title.textContent = text;\n    return title;\n  };\n  /**\r\n   * To create defs element in SVG\r\n   *\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createDefs = function () {\n    var defs = document.createElementNS(this.svgLink, 'defs');\n    return defs;\n  };\n  /**\r\n   * To create clip path in SVG\r\n   *\r\n   * @param {BaseAttibutes} options - Options needed to create clip path\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createClipPath = function (options) {\n    var clipPath = document.createElementNS(this.svgLink, 'clipPath');\n    clipPath = this.setElementAttributes(options, clipPath);\n    return clipPath;\n  };\n  /**\r\n   * To create foreign object in SVG\r\n   *\r\n   * @param {BaseAttibutes} options - Options needed to create foreign object\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createForeignObject = function (options) {\n    var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\n    foreignObject = this.setElementAttributes(options, foreignObject);\n    return foreignObject;\n  };\n  /**\r\n   * To create group element in SVG\r\n   *\r\n   * @param {BaseAttibutes} options - Options needed to create group\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createGroup = function (options) {\n    var group = document.createElementNS(this.svgLink, 'g');\n    group = this.setElementAttributes(options, group);\n    return group;\n  };\n  /**\r\n   * To create pattern in SVG\r\n   *\r\n   * @param {PatternAttributes} options - Required options to create pattern in SVG\r\n   * @param {string} element - Specifies the name of the pattern\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.createPattern = function (options, element) {\n    var pattern = document.createElementNS(this.svgLink, element);\n    pattern = this.setElementAttributes(options, pattern);\n    return pattern;\n  };\n  /**\r\n   * To create radial gradient in SVG\r\n   *\r\n   * @param {string[]} colors - Specifies the colors required to create radial gradient\r\n   * @param {string} name - Specifies the name of the gradient\r\n   * @param {RadialGradient} options - value for radial gradient\r\n   * @returns {string} It returns color name\r\n   */\n\n\n  SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'radialGradient',\n        'cx': options.cx + '%',\n        'cy': options.cy + '%',\n        'r': options.r + '%',\n        'fx': options.fx + '%',\n        'fy': options.fy + '%'\n      };\n      this.drawGradient('radialGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\r\n   * To create linear gradient in SVG\r\n   *\r\n   * @param {GradientColor[]} colors - Array of string specifies the values for color\r\n   * @param {string} name - Specifies the name of the gradient\r\n   * @param {LinearGradient} options - Specifies the options for gradient\r\n   * @returns {string} It returns color name\r\n   */\n\n\n  SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'linearGradient',\n        'x1': options.x1 + '%',\n        'y1': options.y1 + '%',\n        'x2': options.x2 + '%',\n        'y2': options.y2 + '%'\n      };\n      this.drawGradient('linearGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\r\n   * To render the gradient element in SVG\r\n   *\r\n   * @param {string} gradientType - Specifies the type of the gradient\r\n   * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\r\n   * @param {string[]} colors - Array of string specifies the values for color\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\n    var defs = this.createDefs();\n    var gradient = document.createElementNS(this.svgLink, gradientType);\n    gradient = this.setElementAttributes(options, gradient);\n\n    for (var i = 0; i < colors.length; i++) {\n      var stop_1 = document.createElementNS(this.svgLink, 'stop');\n      stop_1.setAttribute('offset', colors[i].colorStop);\n      stop_1.setAttribute('stop-color', colors[i].color);\n      stop_1.setAttribute('stop-opacity', colors[i].opacity ? colors[i].opacity : '1');\n\n      if (!isNullOrUndefined(colors[i].style)) {\n        stop_1.style.cssText = colors[i].style;\n      }\n\n      gradient.appendChild(stop_1);\n    }\n\n    defs.appendChild(gradient);\n    return defs;\n  };\n  /**\r\n   * To render a clip path\r\n   *\r\n   * @param {BaseAttibutes} options - Options required to render a clip path\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Rect';\n    var rect = this.drawRectangle(options);\n    clipPath.appendChild(rect);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\r\n   * To create circular clip path in SVG\r\n   *\r\n   * @param {CircleAttributes} options - Options required to create circular clip path\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.drawCircularClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Circle';\n    var circle = this.drawCircle(options);\n    clipPath.appendChild(circle);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\r\n   * To set the attributes to the element\r\n   *\r\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\r\n   * @param {Element} element - The element to which the attributes need to be set\r\n   * @returns {Element} It returns a appropriate element\r\n   */\n\n\n  SvgRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n\n    for (var i = 0; i < keys.length; i++) {\n      if (keys[i] === 'style') {\n        element.style.cssText = options[keys[i]];\n      } else {\n        element.setAttribute(keys[i], options[keys[i]]);\n      }\n    }\n\n    return element;\n  };\n  /**\r\n   * To create a Html5 canvas element\r\n   * Dummy method for using canvas/svg render in the same variable name in chart control\r\n   */\n\n\n  SvgRenderer.prototype.createCanvas = function () {\n    return null;\n  };\n\n  return SvgRenderer;\n}();\n\nexport { SvgRenderer };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-svg-base/src/svg-render/svg-renderer.js"],"names":["isNullOrUndefined","SvgRenderer","rootID","svgLink","rootId","prototype","getOptionValue","options","key","createSvg","id","svgObj","document","getElementById","createElementNS","setElementAttributes","setSVGSize","width","height","element","size","getBoundingClientRect","setAttribute","toString","drawPath","path","drawLine","line","drawRectangle","rectangle","drawCircle","circle","drawPolyline","polyline","drawEllipse","ellipse","drawPolygon","polygon","drawImage","img","setAttributeNS","href","x","y","visibility","preserveAspectRatio","createText","label","text","textContent","createTSpan","tSpan","createTitle","title","createDefs","defs","createClipPath","clipPath","createForeignObject","foreignObject","createGroup","group","createPattern","pattern","createRadialGradient","colors","name","colorName","colorStop","newOptions","cx","cy","r","fx","fy","drawGradient","color","createLinearGradient","x1","y1","x2","y2","gradientType","gradient","i","length","stop_1","opacity","style","cssText","appendChild","drawClipPath","rect","drawCircularClipPath","keys","Object","createCanvas"],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-returns */\r\n/* eslint-disable valid-jsdoc */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * To import utils\r\n */\r\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\r\nvar SvgRenderer = /** @class */ (function () {\r\n    /* End-Properties */\r\n    function SvgRenderer(rootID) {\r\n        //Internal Variables\r\n        this.svgLink = 'http://www.w3.org/2000/svg';\r\n        this.rootId = rootID;\r\n    }\r\n    // method to get the attributes value\r\n    // tslint:disable-next-line:no-any\r\n    SvgRenderer.prototype.getOptionValue = function (options, key) {\r\n        return options[key];\r\n    }; /* tslint:enable */\r\n    /**\r\n     * To create a Html5 SVG element\r\n     *\r\n     * @param {SVGAttributes} options - Options to create SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createSvg = function (options) {\r\n        if (isNullOrUndefined(options.id)) {\r\n            options.id = this.rootId + '_svg';\r\n        }\r\n        this.svgObj = document.getElementById(options.id);\r\n        if (isNullOrUndefined(document.getElementById(options.id))) {\r\n            this.svgObj = document.createElementNS(this.svgLink, 'svg');\r\n        }\r\n        this.svgObj = this.setElementAttributes(options, this.svgObj);\r\n        this.setSVGSize(options.width, options.height);\r\n        return this.svgObj;\r\n    };\r\n    // method to set the height and width for the SVG element\r\n    SvgRenderer.prototype.setSVGSize = function (width, height) {\r\n        var element = document.getElementById(this.rootId);\r\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\r\n        if (isNullOrUndefined(this.width) || this.width <= 0) {\r\n            this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\r\n        }\r\n        else {\r\n            this.svgObj.setAttribute('width', this.width.toString());\r\n        }\r\n        if (isNullOrUndefined(this.height) || this.height <= 0) {\r\n            this.svgObj.setAttribute('height', height ? height.toString() : '450');\r\n        }\r\n        else {\r\n            this.svgObj.setAttribute('height', this.height.toString());\r\n        }\r\n    };\r\n    /**\r\n     * To draw a path\r\n     *\r\n     * @param {PathAttributes} options - Options to draw a path in SVG\r\n     * @returns {Element} It returns a appropriate path\r\n     */\r\n    SvgRenderer.prototype.drawPath = function (options) {\r\n        var path = document.getElementById(options.id);\r\n        if (path === null) {\r\n            path = document.createElementNS(this.svgLink, 'path');\r\n        }\r\n        path = this.setElementAttributes(options, path);\r\n        return path;\r\n    };\r\n    /**\r\n     * To draw a line\r\n     *\r\n     * @param {LineAttributes} options - Options to draw a line in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawLine = function (options) {\r\n        var line = document.getElementById(options.id);\r\n        if (line === null) {\r\n            line = document.createElementNS(this.svgLink, 'line');\r\n        }\r\n        line = this.setElementAttributes(options, line);\r\n        return line;\r\n    };\r\n    /**\r\n     * To draw a rectangle\r\n     *\r\n     * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawRectangle = function (options) {\r\n        var rectangle = document.getElementById(options.id);\r\n        if (rectangle === null) {\r\n            rectangle = document.createElementNS(this.svgLink, 'rect');\r\n        }\r\n        rectangle = this.setElementAttributes(options, rectangle);\r\n        return rectangle;\r\n    };\r\n    /**\r\n     * To draw a circle\r\n     *\r\n     * @param {CircleAttributes} options - Required options to draw a circle in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawCircle = function (options) {\r\n        var circle = document.getElementById(options.id);\r\n        if (circle === null) {\r\n            circle = document.createElementNS(this.svgLink, 'circle');\r\n        }\r\n        circle = this.setElementAttributes(options, circle);\r\n        return circle;\r\n    };\r\n    /**\r\n     * To draw a polyline\r\n     *\r\n     * @param {PolylineAttributes} options - Options required to draw a polyline\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawPolyline = function (options) {\r\n        var polyline = document.getElementById(options.id);\r\n        if (polyline === null) {\r\n            polyline = document.createElementNS(this.svgLink, 'polyline');\r\n        }\r\n        polyline = this.setElementAttributes(options, polyline);\r\n        return polyline;\r\n    };\r\n    /**\r\n     * To draw an ellipse\r\n     *\r\n     * @param {EllipseAttributes} options - Options required to draw an ellipse\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawEllipse = function (options) {\r\n        var ellipse = document.getElementById(options.id);\r\n        if (ellipse === null) {\r\n            ellipse = document.createElementNS(this.svgLink, 'ellipse');\r\n        }\r\n        ellipse = this.setElementAttributes(options, ellipse);\r\n        return ellipse;\r\n    };\r\n    /**\r\n     * To draw a polygon\r\n     *\r\n     * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawPolygon = function (options) {\r\n        var polygon = document.getElementById(options.id);\r\n        if (polygon === null) {\r\n            polygon = document.createElementNS(this.svgLink, 'polygon');\r\n        }\r\n        polygon = this.setElementAttributes(options, polygon);\r\n        return polygon;\r\n    };\r\n    /**\r\n     * To draw an image\r\n     *\r\n     * @param {ImageAttributes} options - Required options to draw an image in SVG\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawImage = function (options) {\r\n        var img = document.createElementNS(this.svgLink, 'image');\r\n        img.setAttributeNS(null, 'height', options.height.toString());\r\n        img.setAttributeNS(null, 'width', options.width.toString());\r\n        img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\r\n        img.setAttributeNS(null, 'x', options.x.toString());\r\n        img.setAttributeNS(null, 'y', options.y.toString());\r\n        img.setAttributeNS(null, 'id', options.id);\r\n        img.setAttributeNS(null, 'visibility', options.visibility);\r\n        if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\r\n            img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\r\n        }\r\n        if (!isNullOrUndefined(options.preserveAspectRatio)) {\r\n            img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\r\n        }\r\n        return img;\r\n    };\r\n    /**\r\n     * To draw a text\r\n     *\r\n     * @param {TextAttributes} options - Options needed to draw a text in SVG\r\n     * @param {string} label - Label of the text\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createText = function (options, label) {\r\n        var text = document.createElementNS(this.svgLink, 'text');\r\n        text = this.setElementAttributes(options, text);\r\n        if (!isNullOrUndefined(label)) {\r\n            text.textContent = label;\r\n        }\r\n        return text;\r\n    };\r\n    /**\r\n     * To create a tSpan\r\n     *\r\n     * @param {TextAttributes} options - Options to create tSpan\r\n     * @param {string} label - The text content which is to be rendered in the tSpan\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createTSpan = function (options, label) {\r\n        var tSpan = document.createElementNS(this.svgLink, 'tspan');\r\n        tSpan = this.setElementAttributes(options, tSpan);\r\n        if (!isNullOrUndefined(label)) {\r\n            tSpan.textContent = label;\r\n        }\r\n        return tSpan;\r\n    };\r\n    /**\r\n     * To create a title\r\n     *\r\n     * @param {string} text - The text content which is to be rendered in the title\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createTitle = function (text) {\r\n        var title = document.createElementNS(this.svgLink, 'title');\r\n        title.textContent = text;\r\n        return title;\r\n    };\r\n    /**\r\n     * To create defs element in SVG\r\n     *\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createDefs = function () {\r\n        var defs = document.createElementNS(this.svgLink, 'defs');\r\n        return defs;\r\n    };\r\n    /**\r\n     * To create clip path in SVG\r\n     *\r\n     * @param {BaseAttibutes} options - Options needed to create clip path\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createClipPath = function (options) {\r\n        var clipPath = document.createElementNS(this.svgLink, 'clipPath');\r\n        clipPath = this.setElementAttributes(options, clipPath);\r\n        return clipPath;\r\n    };\r\n    /**\r\n     * To create foreign object in SVG\r\n     *\r\n     * @param {BaseAttibutes} options - Options needed to create foreign object\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createForeignObject = function (options) {\r\n        var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\r\n        foreignObject = this.setElementAttributes(options, foreignObject);\r\n        return foreignObject;\r\n    };\r\n    /**\r\n     * To create group element in SVG\r\n     *\r\n     * @param {BaseAttibutes} options - Options needed to create group\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createGroup = function (options) {\r\n        var group = document.createElementNS(this.svgLink, 'g');\r\n        group = this.setElementAttributes(options, group);\r\n        return group;\r\n    };\r\n    /**\r\n     * To create pattern in SVG\r\n     *\r\n     * @param {PatternAttributes} options - Required options to create pattern in SVG\r\n     * @param {string} element - Specifies the name of the pattern\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.createPattern = function (options, element) {\r\n        var pattern = document.createElementNS(this.svgLink, element);\r\n        pattern = this.setElementAttributes(options, pattern);\r\n        return pattern;\r\n    };\r\n    /**\r\n     * To create radial gradient in SVG\r\n     *\r\n     * @param {string[]} colors - Specifies the colors required to create radial gradient\r\n     * @param {string} name - Specifies the name of the gradient\r\n     * @param {RadialGradient} options - value for radial gradient\r\n     * @returns {string} It returns color name\r\n     */\r\n    SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\r\n        var colorName;\r\n        if (!isNullOrUndefined(colors[0].colorStop)) {\r\n            var newOptions = {\r\n                'id': this.rootId + '_' + name + 'radialGradient',\r\n                'cx': options.cx + '%',\r\n                'cy': options.cy + '%',\r\n                'r': options.r + '%',\r\n                'fx': options.fx + '%',\r\n                'fy': options.fy + '%'\r\n            };\r\n            this.drawGradient('radialGradient', newOptions, colors);\r\n            colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\r\n        }\r\n        else {\r\n            colorName = colors[0].color.toString();\r\n        }\r\n        return colorName;\r\n    };\r\n    /**\r\n     * To create linear gradient in SVG\r\n     *\r\n     * @param {GradientColor[]} colors - Array of string specifies the values for color\r\n     * @param {string} name - Specifies the name of the gradient\r\n     * @param {LinearGradient} options - Specifies the options for gradient\r\n     * @returns {string} It returns color name\r\n     */\r\n    SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\r\n        var colorName;\r\n        if (!isNullOrUndefined(colors[0].colorStop)) {\r\n            var newOptions = {\r\n                'id': this.rootId + '_' + name + 'linearGradient',\r\n                'x1': options.x1 + '%',\r\n                'y1': options.y1 + '%',\r\n                'x2': options.x2 + '%',\r\n                'y2': options.y2 + '%'\r\n            };\r\n            this.drawGradient('linearGradient', newOptions, colors);\r\n            colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\r\n        }\r\n        else {\r\n            colorName = colors[0].color.toString();\r\n        }\r\n        return colorName;\r\n    };\r\n    /**\r\n     * To render the gradient element in SVG\r\n     *\r\n     * @param {string} gradientType - Specifies the type of the gradient\r\n     * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\r\n     * @param {string[]} colors - Array of string specifies the values for color\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\r\n        var defs = this.createDefs();\r\n        var gradient = document.createElementNS(this.svgLink, gradientType);\r\n        gradient = this.setElementAttributes(options, gradient);\r\n        for (var i = 0; i < colors.length; i++) {\r\n            var stop_1 = document.createElementNS(this.svgLink, 'stop');\r\n            stop_1.setAttribute('offset', colors[i].colorStop);\r\n            stop_1.setAttribute('stop-color', colors[i].color);\r\n            stop_1.setAttribute('stop-opacity', colors[i].opacity ? (colors[i].opacity) : '1');\r\n            if (!isNullOrUndefined(colors[i].style)) {\r\n                stop_1.style.cssText = colors[i].style;\r\n            }\r\n            gradient.appendChild(stop_1);\r\n        }\r\n        defs.appendChild(gradient);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To render a clip path\r\n     *\r\n     * @param {BaseAttibutes} options - Options required to render a clip path\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawClipPath = function (options) {\r\n        var defs = this.createDefs();\r\n        var clipPath = this.createClipPath({ 'id': options.id });\r\n        options.id = options.id + '_Rect';\r\n        var rect = this.drawRectangle(options);\r\n        clipPath.appendChild(rect);\r\n        defs.appendChild(clipPath);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To create circular clip path in SVG\r\n     *\r\n     * @param {CircleAttributes} options - Options required to create circular clip path\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.drawCircularClipPath = function (options) {\r\n        var defs = this.createDefs();\r\n        var clipPath = this.createClipPath({ 'id': options.id });\r\n        options.id = options.id + '_Circle';\r\n        var circle = this.drawCircle(options);\r\n        clipPath.appendChild(circle);\r\n        defs.appendChild(clipPath);\r\n        return defs;\r\n    };\r\n    /**\r\n     * To set the attributes to the element\r\n     *\r\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\r\n     * @param {Element} element - The element to which the attributes need to be set\r\n     * @returns {Element} It returns a appropriate element\r\n     */\r\n    SvgRenderer.prototype.setElementAttributes = function (options, element) {\r\n        var keys = Object.keys(options);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            if (keys[i] === 'style') {\r\n                element.style.cssText = options[keys[i]];\r\n            }\r\n            else {\r\n                element.setAttribute(keys[i], options[keys[i]]);\r\n            }\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * To create a Html5 canvas element\r\n     * Dummy method for using canvas/svg render in the same variable name in chart control\r\n     */\r\n    SvgRenderer.prototype.createCanvas = function () {\r\n        return null;\r\n    };\r\n    return SvgRenderer;\r\n}());\r\nexport { SvgRenderer };\r\n"]},"metadata":{},"sourceType":"module"}