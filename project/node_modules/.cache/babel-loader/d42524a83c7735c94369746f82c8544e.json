{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\x\\\\Desktop\\\\openDSA\\\\openDSA_dashboard\\\\project\\\\src\\\\components\\\\Charts\\\\IRT.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Plot from 'react-plotly.js';\nimport { create, all } from 'mathjs';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst math = create(all);\n\nfunction IRT() {\n  _s();\n\n  const [result, setResult] = useState(null);\n  const [plotData, setPlotData] = useState({\n    x: [],\n    y: []\n  });\n\n  const handleClick = () => {\n    axios.get('/file.csv') // assuming data.csv is in the public directory\n    .then(response => {\n      const csvData = response.data;\n      const parsedData = Papa.parse(csvData, {\n        header: true\n      }).data;\n      const matrixData = parsedData.map(row => Object.values(row).map(val => parseInt(val)));\n      const data = {\n        matrix: {\n          data: matrixData\n        }\n      };\n      console.log(data);\n      axios.post('http://localhost:8000/estimate', data).then(response => {\n        var _response$data$Abilit, _response$data$Discri, _response$data$Diffic;\n\n        const x = (_response$data$Abilit = response.data.Ability) !== null && _response$data$Abilit !== void 0 ? _response$data$Abilit : [];\n        const a = (_response$data$Discri = response.data.Discrimination) !== null && _response$data$Discri !== void 0 ? _response$data$Discri : [];\n        const b = (_response$data$Diffic = response.data.Difficulty) !== null && _response$data$Diffic !== void 0 ? _response$data$Diffic : [];\n\n        const sigmoid = (x, a, b) => {\n          const denominator = 1 + Math.exp(-a * (x - b));\n          return denominator === 0 ? NaN : 1 / denominator;\n        };\n\n        const y = x.map((val, idx) => sigmoid(val, a[idx], b[idx]));\n        const sortedData = x.map((value, index) => [value, y[index]]).sort((a, b) => a[0] - b[0]);\n        const sortedX = sortedData.map(pair => pair[0]);\n        const sortedY = sortedData.map(pair => pair[1]);\n        setPlotData({\n          x: sortedX,\n          y: sortedY\n        });\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"estimate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        x: plotData.x,\n        y: plotData.y,\n        type: 'scatter',\n        mode: 'lines+markers',\n        line: {\n          color: 'black'\n        },\n        marker: {\n          symbol: 'circle',\n          size: 8\n        }\n      }],\n      layout: {\n        width: 500,\n        height: 500,\n        title: 'IRT model',\n        xaxis: {\n          title: 'Latent trait'\n        },\n        yaxis: {\n          title: 'Item response'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IRT, \"FUhbLDmd2Txf/DYvRp24H1aOBag=\");\n\n_c = IRT;\nexport default IRT;\n\nvar _c;\n\n$RefreshReg$(_c, \"IRT\");","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/src/components/Charts/IRT.jsx"],"names":["React","useState","axios","Plot","create","all","Papa","math","IRT","result","setResult","plotData","setPlotData","x","y","handleClick","get","then","response","csvData","data","parsedData","parse","header","matrixData","map","row","Object","values","val","parseInt","matrix","console","log","post","Ability","a","Discrimination","b","Difficulty","sigmoid","denominator","Math","exp","NaN","idx","sortedData","value","index","sort","sortedX","pair","sortedY","catch","error","type","mode","line","color","marker","symbol","size","width","height","title","xaxis","yaxis"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Plot from 'react-plotly.js';\r\nimport { create, all } from 'mathjs';\r\nimport Papa from 'papaparse';\r\n\r\nconst math = create(all)\r\n\r\nfunction IRT() {\r\n  const [result, setResult] = useState(null);\r\n  const [plotData, setPlotData] = useState({ x: [], y: [] });\r\n\r\n  const handleClick = () => {\r\n    axios.get('/file.csv') // assuming data.csv is in the public directory\r\n      .then(response => {\r\n        const csvData = response.data;\r\n        const parsedData = Papa.parse(csvData, { header: true }).data;\r\n        const matrixData = parsedData.map(row => Object.values(row).map(val => parseInt(val)));\r\n        const data = { matrix: { data: matrixData } };\r\n        console.log(data);\r\n\r\n        axios\r\n          .post('http://localhost:8000/estimate', data)\r\n          .then(response => {\r\n            const x = response.data.Ability ?? [];\r\n            const a = response.data.Discrimination ?? [];\r\n            const b = response.data.Difficulty ?? [];\r\n            const sigmoid = (x, a, b) => {\r\n              const denominator = 1 + Math.exp(-a * (x - b));\r\n              return denominator === 0 ? NaN : 1 / denominator;\r\n            };\r\n            const y = x.map((val, idx) => sigmoid(val, a[idx], b[idx]));\r\n            const sortedData = x.map((value, index) => [value, y[index]])\r\n              .sort((a, b) => a[0] - b[0]);\r\n            const sortedX = sortedData.map(pair => pair[0]);\r\n            const sortedY = sortedData.map(pair => pair[1]);\r\n            setPlotData({ x: sortedX, y: sortedY });\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleClick}>estimate</button>\r\n      <Plot\r\n        data={[\r\n          {\r\n            x: plotData.x,\r\n            y: plotData.y,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            line: { color: 'black' },\r\n            marker: { symbol: 'circle', size: 8 }\r\n          }\r\n        ]}\r\n        layout={{\r\n          width: 500,\r\n          height: 500,\r\n          title: 'IRT model',\r\n          xaxis: { title: 'Latent trait' },\r\n          yaxis: { title: 'Item response' }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IRT;\r\n"]},"metadata":{},"sourceType":"module"}