{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nvar name = 'AccessorNode';\nvar dependencies = ['subset', 'Node'];\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  /**\r\n   * Are parenthesis needed?\r\n   * @private\r\n   */\n\n  function needParenthesis(node) {\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\n  }\n\n  class AccessorNode extends Node {\n    /**\r\n     * @constructor AccessorNode\r\n     * @extends {Node}\r\n     * Access an object property or get a matrix subset\r\n     *\r\n     * @param {Node} object                 The object from which to retrieve\r\n     *                                      a property or subset.\r\n     * @param {IndexNode} index             IndexNode containing ranges\r\n     */\n    constructor(object, index) {\n      super();\n\n      if (!isNode(object)) {\n        throw new TypeError('Node expected for parameter \"object\"');\n      }\n\n      if (!isIndexNode(index)) {\n        throw new TypeError('IndexNode expected for parameter \"index\"');\n      }\n\n      this.object = object;\n      this.index = index;\n    } // readonly property name\n\n\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isAccessorNode() {\n      return true;\n    }\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\n\n\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n\n      var evalIndex = this.index._compile(math, argNames);\n\n      if (this.index.isObjectProperty()) {\n        var prop = this.index.getObjectProperty();\n        return function evalAccessorNode(scope, args, context) {\n          // get a property from an object evaluated using the scope.\n          return getSafeProperty(evalObject(scope, args, context), prop);\n        };\n      } else {\n        return function evalAccessorNode(scope, args, context) {\n          var object = evalObject(scope, args, context); // we pass just object here instead of context:\n\n          var index = evalIndex(scope, args, object);\n          return access(object, index);\n        };\n      }\n    }\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\n\n\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      callback(this.index, 'index', this);\n    }\n    /**\r\n     * Create a new AccessorNode whose children are the results of calling\r\n     * the provided callback function for each child of the original node.\r\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n     * @returns {AccessorNode} Returns a transformed copy of the node\r\n     */\n\n\n    map(callback) {\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\n    }\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {AccessorNode}\r\n     */\n\n\n    clone() {\n      return new AccessorNode(this.object, this.index);\n    }\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string}\r\n     */\n\n\n    _toString(options) {\n      var object = this.object.toString(options);\n\n      if (needParenthesis(this.object)) {\n        object = '(' + object + ')';\n      }\n\n      return object + this.index.toString(options);\n    }\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string}\r\n     */\n\n\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n\n      if (needParenthesis(this.object)) {\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\n      }\n\n      return object + this.index.toHTML(options);\n    }\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string}\r\n     */\n\n\n    _toTex(options) {\n      var object = this.object.toTex(options);\n\n      if (needParenthesis(this.object)) {\n        object = '\\\\left(\\' + object + \\'\\\\right)';\n      }\n\n      return object + this.index.toTex(options);\n    }\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index\n      };\n    }\n    /**\r\n     * Instantiate an AccessorNode from its JSON representation\r\n     * @param {Object} json\r\n     *     An object structured like\r\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\r\n     *     where mathjs is optional\r\n     * @returns {AccessorNode}\r\n     */\n\n\n    static fromJSON(json) {\n      return new AccessorNode(json.object, json.index);\n    }\n\n  }\n\n  _defineProperty(AccessorNode, \"name\", name);\n\n  return AccessorNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/expression/node/AccessorNode.js"],"names":["_defineProperty","isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isNode","isObjectNode","isParenthesisNode","isSymbolNode","getSafeProperty","factory","accessFactory","name","dependencies","createAccessorNode","_ref","subset","Node","access","needParenthesis","node","AccessorNode","constructor","object","index","TypeError","isObjectProperty","getObjectProperty","type","_compile","math","argNames","evalObject","evalIndex","prop","evalAccessorNode","scope","args","context","forEach","callback","map","_ifNode","clone","_toString","options","toString","toHTML","_toTex","toTex","toJSON","mathjs","fromJSON","json","isClass"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\r\nimport { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isNode, isObjectNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\r\nimport { getSafeProperty } from '../../utils/customs.js';\r\nimport { factory } from '../../utils/factory.js';\r\nimport { accessFactory } from './utils/access.js';\r\nvar name = 'AccessorNode';\r\nvar dependencies = ['subset', 'Node'];\r\nexport var createAccessorNode = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    subset,\r\n    Node\r\n  } = _ref;\r\n  var access = accessFactory({\r\n    subset\r\n  });\r\n\r\n  /**\r\n   * Are parenthesis needed?\r\n   * @private\r\n   */\r\n  function needParenthesis(node) {\r\n    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?\r\n    return !(isAccessorNode(node) || isArrayNode(node) || isConstantNode(node) || isFunctionNode(node) || isObjectNode(node) || isParenthesisNode(node) || isSymbolNode(node));\r\n  }\r\n  class AccessorNode extends Node {\r\n    /**\r\n     * @constructor AccessorNode\r\n     * @extends {Node}\r\n     * Access an object property or get a matrix subset\r\n     *\r\n     * @param {Node} object                 The object from which to retrieve\r\n     *                                      a property or subset.\r\n     * @param {IndexNode} index             IndexNode containing ranges\r\n     */\r\n    constructor(object, index) {\r\n      super();\r\n      if (!isNode(object)) {\r\n        throw new TypeError('Node expected for parameter \"object\"');\r\n      }\r\n      if (!isIndexNode(index)) {\r\n        throw new TypeError('IndexNode expected for parameter \"index\"');\r\n      }\r\n      this.object = object;\r\n      this.index = index;\r\n    }\r\n\r\n    // readonly property name\r\n    get name() {\r\n      if (this.index) {\r\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\r\n      } else {\r\n        return this.object.name || '';\r\n      }\r\n    }\r\n    get type() {\r\n      return name;\r\n    }\r\n    get isAccessorNode() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Compile a node into a JavaScript function.\r\n     * This basically pre-calculates as much as possible and only leaves open\r\n     * calculations which depend on a dynamic scope with variables.\r\n     * @param {Object} math     Math.js namespace with functions and constants.\r\n     * @param {Object} argNames An object with argument names as key and `true`\r\n     *                          as value. Used in the SymbolNode to optimize\r\n     *                          for arguments from user assigned functions\r\n     *                          (see FunctionAssignmentNode) or special symbols\r\n     *                          like `end` (see IndexNode).\r\n     * @return {function} Returns a function which can be called like:\r\n     *                        evalNode(scope: Object, args: Object, context: *)\r\n     */\r\n    _compile(math, argNames) {\r\n      var evalObject = this.object._compile(math, argNames);\r\n      var evalIndex = this.index._compile(math, argNames);\r\n      if (this.index.isObjectProperty()) {\r\n        var prop = this.index.getObjectProperty();\r\n        return function evalAccessorNode(scope, args, context) {\r\n          // get a property from an object evaluated using the scope.\r\n          return getSafeProperty(evalObject(scope, args, context), prop);\r\n        };\r\n      } else {\r\n        return function evalAccessorNode(scope, args, context) {\r\n          var object = evalObject(scope, args, context);\r\n          // we pass just object here instead of context:\r\n          var index = evalIndex(scope, args, object);\r\n          return access(object, index);\r\n        };\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Execute a callback for each of the child nodes of this node\r\n     * @param {function(child: Node, path: string, parent: Node)} callback\r\n     */\r\n    forEach(callback) {\r\n      callback(this.object, 'object', this);\r\n      callback(this.index, 'index', this);\r\n    }\r\n\r\n    /**\r\n     * Create a new AccessorNode whose children are the results of calling\r\n     * the provided callback function for each child of the original node.\r\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\r\n     * @returns {AccessorNode} Returns a transformed copy of the node\r\n     */\r\n    map(callback) {\r\n      return new AccessorNode(this._ifNode(callback(this.object, 'object', this)), this._ifNode(callback(this.index, 'index', this)));\r\n    }\r\n\r\n    /**\r\n     * Create a clone of this node, a shallow copy\r\n     * @return {AccessorNode}\r\n     */\r\n    clone() {\r\n      return new AccessorNode(this.object, this.index);\r\n    }\r\n\r\n    /**\r\n     * Get string representation\r\n     * @param {Object} options\r\n     * @return {string}\r\n     */\r\n    _toString(options) {\r\n      var object = this.object.toString(options);\r\n      if (needParenthesis(this.object)) {\r\n        object = '(' + object + ')';\r\n      }\r\n      return object + this.index.toString(options);\r\n    }\r\n\r\n    /**\r\n     * Get HTML representation\r\n     * @param {Object} options\r\n     * @return {string}\r\n     */\r\n    toHTML(options) {\r\n      var object = this.object.toHTML(options);\r\n      if (needParenthesis(this.object)) {\r\n        object = '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + object + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>';\r\n      }\r\n      return object + this.index.toHTML(options);\r\n    }\r\n\r\n    /**\r\n     * Get LaTeX representation\r\n     * @param {Object} options\r\n     * @return {string}\r\n     */\r\n    _toTex(options) {\r\n      var object = this.object.toTex(options);\r\n      if (needParenthesis(this.object)) {\r\n        object = '\\\\left(\\' + object + \\'\\\\right)';\r\n      }\r\n      return object + this.index.toTex(options);\r\n    }\r\n\r\n    /**\r\n     * Get a JSON representation of the node\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n      return {\r\n        mathjs: name,\r\n        object: this.object,\r\n        index: this.index\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Instantiate an AccessorNode from its JSON representation\r\n     * @param {Object} json\r\n     *     An object structured like\r\n     *     `{\"mathjs\": \"AccessorNode\", object: ..., index: ...}`,\r\n     *     where mathjs is optional\r\n     * @returns {AccessorNode}\r\n     */\r\n    static fromJSON(json) {\r\n      return new AccessorNode(json.object, json.index);\r\n    }\r\n  }\r\n  _defineProperty(AccessorNode, \"name\", name);\r\n  return AccessorNode;\r\n}, {\r\n  isClass: true,\r\n  isNode: true\r\n});"]},"metadata":{},"sourceType":"module"}