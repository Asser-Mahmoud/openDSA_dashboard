{"ast":null,"code":"/**\r\n * PdfPen.ts class for EJ2-PDF\r\n */\nimport { PdfColor } from './pdf-color';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfDashStyle, PdfColorSpace } from './enum';\nimport { PdfBrush } from './brushes/pdf-brush';\n/**\r\n * `PdfPen` class defining settings for drawing operations, that determines the color,\r\n * width, and style of the drawing elements.\r\n * ```typescript\r\n * // create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // create a new page\r\n * let page1 : PdfPage = document.pages.add();\r\n * // set pen\r\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n * // draw rectangle\r\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n * // save the document.\r\n * document.save('output.pdf');\r\n * // destroy the document\r\n * document.destroy();\r\n * ```\r\n */\n\nvar PdfPen =\n/** @class */\nfunction () {\n  function PdfPen(arg1, arg2) {\n    //Fields\n\n    /**\r\n     * Specifies the `color of the pen`.\r\n     * @default new PdfColor()\r\n     * @private\r\n     */\n    this.pdfColor = new PdfColor(0, 0, 0);\n    /**\r\n     * Specifies the `dash offset of the pen`.\r\n     * @default 0\r\n     * @private\r\n     */\n\n    this.dashOffsetValue = 0;\n    /**\r\n     * Specifies the `dash pattern of the pen`.\r\n     * @default [0]\r\n     * @private\r\n     */\n\n    this.penDashPattern = [0];\n    /**\r\n     * Specifies the `dash style of the pen`.\r\n     * @default Solid\r\n     * @private\r\n     */\n\n    this.pdfDashStyle = PdfDashStyle.Solid;\n    /**\r\n     * Specifies the `line cap of the pen`.\r\n     * @default 0\r\n     * @private\r\n     */\n\n    this.pdfLineCap = 0;\n    /**\r\n     * Specifies the `line join of the pen`.\r\n     * @default 0\r\n     * @private\r\n     */\n\n    this.pdfLineJoin = 0;\n    /**\r\n     * Specifies the `width of the pen`.\r\n     * @default 1.0\r\n     * @private\r\n     */\n\n    this.penWidth = 1.0;\n    /**\r\n     * Specifies the `mitter limit of the pen`.\r\n     * @default 0.0\r\n     * @private\r\n     */\n\n    this.internalMiterLimit = 0.0;\n    /**\r\n     * Stores the `colorspace` value.\r\n     * @default Rgb\r\n     * @private\r\n     */\n\n    this.colorSpace = PdfColorSpace.Rgb;\n\n    if (arg1 instanceof PdfBrush) {\n      this.setBrush(arg1);\n    } else if (arg1 instanceof PdfColor) {\n      this.color = arg1;\n    }\n\n    if (typeof arg2 === 'number') {\n      this.width = arg2;\n    }\n  }\n\n  Object.defineProperty(PdfPen.prototype, \"color\", {\n    //Properties\n\n    /**\r\n     * Gets or sets the `color of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfColor;\n    },\n    set: function (value) {\n      this.pdfColor = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\n    /**\r\n     * Gets or sets the `dash offset of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\n        return 0;\n      } else {\n        return this.dashOffsetValue;\n      }\n    },\n    set: function (value) {\n      this.dashOffsetValue = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\n    /**\r\n     * Gets or sets the `dash pattern of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.penDashPattern;\n    },\n    set: function (value) {\n      this.penDashPattern = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\n    /**\r\n     * Gets or sets the `dash style of the pen`.\r\n     * ```typescript\r\n     * // create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // create a new page\r\n     * let page1 : PdfPage = document.pages.add();\r\n     * // set pen\r\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n     * //\r\n     * // set pen style\r\n     * pen.dashStyle = PdfDashStyle.DashDot;\r\n     * // get pen style\r\n     * let style : PdfDashStyle = pen.dashStyle;\r\n     * //\r\n     * // draw rectangle\r\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n     * // save the document.\r\n     * document.save('output.pdf');\r\n     * // destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this.pdfDashStyle;\n    },\n    set: function (value) {\n      if (this.pdfDashStyle !== value) {\n        this.pdfDashStyle = value;\n\n        switch (this.pdfDashStyle) {\n          case PdfDashStyle.Custom:\n            break;\n\n          case PdfDashStyle.Dash:\n            this.penDashPattern = [3, 1];\n            break;\n\n          case PdfDashStyle.Dot:\n            this.penDashPattern = [1, 1];\n            break;\n\n          case PdfDashStyle.DashDot:\n            this.penDashPattern = [3, 1, 1, 1];\n            break;\n\n          case PdfDashStyle.DashDotDot:\n            this.penDashPattern = [3, 1, 1, 1, 1, 1];\n            break;\n\n          case PdfDashStyle.Solid:\n            break;\n\n          default:\n            this.pdfDashStyle = PdfDashStyle.Solid;\n            this.penDashPattern = [0];\n            break;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineCap\", {\n    /**\r\n     * Gets or sets the `line cap of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfLineCap;\n    },\n    set: function (value) {\n      this.pdfLineCap = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\n    /**\r\n     * Gets or sets the `line join style of the pen`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.pdfLineJoin;\n    },\n    set: function (value) {\n      this.pdfLineJoin = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\n    /**\r\n     * Gets or sets the `miter limit`.\r\n     * @private\r\n     */\n    get: function () {\n      return this.internalMiterLimit;\n    },\n    set: function (value) {\n      this.internalMiterLimit = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfPen.prototype, \"width\", {\n    /**\r\n     * Gets or sets the `width of the pen`.\r\n     * ```typescript\r\n     * // create a new PDF document\r\n     * let document : PdfDocument = new PdfDocument();\r\n     * // create a new page\r\n     * let page1 : PdfPage = document.pages.add();\r\n     * // set pen\r\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n     * //\r\n     * // set pen width\r\n     * pen.width = 2;\r\n     * //\r\n     * // draw rectangle\r\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n     * // save the document.\r\n     * document.save('output.pdf');\r\n     * // destroy the document\r\n     * document.destroy();\r\n     * ```\r\n     */\n    get: function () {\n      return this.penWidth;\n    },\n    set: function (value) {\n      this.penWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Helper\n\n  /**\r\n   * `Clones` this instance of PdfPen class.\r\n   * @private\r\n   */\n\n  PdfPen.prototype.clone = function () {\n    var pen = this;\n    return pen;\n  };\n  /**\r\n   * `Sets the brush`.\r\n   * @private\r\n   */\n\n\n  PdfPen.prototype.setBrush = function (brush) {\n    var sBrush = brush;\n\n    if (sBrush != null && sBrush instanceof PdfSolidBrush) {\n      this.color = sBrush.color;\n      this.pdfBrush = sBrush;\n    }\n\n    this.color = sBrush.color;\n    this.pdfBrush = sBrush;\n  };\n  /**\r\n   * `Monitors the changes`.\r\n   * @private\r\n   */\n\n\n  PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\n    var diff = false;\n    saveState = true;\n\n    if (currentPen == null) {\n      diff = true;\n    }\n\n    diff = this.dashControl(currentPen, saveState, streamWriter);\n    streamWriter.setLineWidth(this.width);\n    streamWriter.setLineJoin(this.lineJoin);\n    streamWriter.setLineCap(this.lineCap);\n    var miterLimit = this.miterLimit;\n\n    if (miterLimit > 0) {\n      streamWriter.setMiterLimit(miterLimit);\n      diff = true;\n    }\n\n    var brush = this.pdfBrush;\n    streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\n    diff = true;\n    return diff;\n  };\n  /**\r\n   * `Controls the dash style` and behaviour of each line.\r\n   * @private\r\n   */\n\n\n  PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\n    saveState = true;\n    var lineWidth = this.width;\n    var pattern = this.getPattern();\n    streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\n    return saveState;\n  };\n  /**\r\n   * `Gets the pattern` of PdfPen.\r\n   * @private\r\n   */\n\n\n  PdfPen.prototype.getPattern = function () {\n    var pattern = this.dashPattern;\n\n    for (var i = 0; i < pattern.length; ++i) {\n      pattern[i] *= this.width;\n    }\n\n    return pattern;\n  };\n\n  return PdfPen;\n}();\n\nexport { PdfPen };","map":{"version":3,"sources":["C:/Users/amase/Desktop/open_dsa/openDSA_dashboard/project/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-pen.js"],"names":["PdfColor","PdfSolidBrush","PdfDashStyle","PdfColorSpace","PdfBrush","PdfPen","arg1","arg2","pdfColor","dashOffsetValue","penDashPattern","pdfDashStyle","Solid","pdfLineCap","pdfLineJoin","penWidth","internalMiterLimit","colorSpace","Rgb","setBrush","color","width","Object","defineProperty","prototype","get","set","value","enumerable","configurable","Custom","Dash","Dot","DashDot","DashDotDot","clone","pen","brush","sBrush","pdfBrush","monitorChanges","currentPen","streamWriter","getResources","saveState","currentColorSpace","matrix","diff","dashControl","setLineWidth","setLineJoin","lineJoin","setLineCap","lineCap","miterLimit","setMiterLimit","setColorAndSpace","lineWidth","pattern","getPattern","setLineDashPattern","dashOffset","dashPattern","i","length"],"mappings":"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","sourcesContent":["/**\r\n * PdfPen.ts class for EJ2-PDF\r\n */\r\nimport { PdfColor } from './pdf-color';\r\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\r\nimport { PdfDashStyle, PdfColorSpace } from './enum';\r\nimport { PdfBrush } from './brushes/pdf-brush';\r\n/**\r\n * `PdfPen` class defining settings for drawing operations, that determines the color,\r\n * width, and style of the drawing elements.\r\n * ```typescript\r\n * // create a new PDF document\r\n * let document : PdfDocument = new PdfDocument();\r\n * // create a new page\r\n * let page1 : PdfPage = document.pages.add();\r\n * // set pen\r\n * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n * // draw rectangle\r\n * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n * // save the document.\r\n * document.save('output.pdf');\r\n * // destroy the document\r\n * document.destroy();\r\n * ```\r\n */\r\nvar PdfPen = /** @class */ (function () {\r\n    function PdfPen(arg1, arg2) {\r\n        //Fields\r\n        /**\r\n         * Specifies the `color of the pen`.\r\n         * @default new PdfColor()\r\n         * @private\r\n         */\r\n        this.pdfColor = new PdfColor(0, 0, 0);\r\n        /**\r\n         * Specifies the `dash offset of the pen`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.dashOffsetValue = 0;\r\n        /**\r\n         * Specifies the `dash pattern of the pen`.\r\n         * @default [0]\r\n         * @private\r\n         */\r\n        this.penDashPattern = [0];\r\n        /**\r\n         * Specifies the `dash style of the pen`.\r\n         * @default Solid\r\n         * @private\r\n         */\r\n        this.pdfDashStyle = PdfDashStyle.Solid;\r\n        /**\r\n         * Specifies the `line cap of the pen`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.pdfLineCap = 0;\r\n        /**\r\n         * Specifies the `line join of the pen`.\r\n         * @default 0\r\n         * @private\r\n         */\r\n        this.pdfLineJoin = 0;\r\n        /**\r\n         * Specifies the `width of the pen`.\r\n         * @default 1.0\r\n         * @private\r\n         */\r\n        this.penWidth = 1.0;\r\n        /**\r\n         * Specifies the `mitter limit of the pen`.\r\n         * @default 0.0\r\n         * @private\r\n         */\r\n        this.internalMiterLimit = 0.0;\r\n        /**\r\n         * Stores the `colorspace` value.\r\n         * @default Rgb\r\n         * @private\r\n         */\r\n        this.colorSpace = PdfColorSpace.Rgb;\r\n        if (arg1 instanceof PdfBrush) {\r\n            this.setBrush(arg1);\r\n        }\r\n        else if (arg1 instanceof PdfColor) {\r\n            this.color = arg1;\r\n        }\r\n        if (typeof arg2 === 'number') {\r\n            this.width = arg2;\r\n        }\r\n    }\r\n    Object.defineProperty(PdfPen.prototype, \"color\", {\r\n        //Properties\r\n        /**\r\n         * Gets or sets the `color of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfColor;\r\n        },\r\n        set: function (value) {\r\n            this.pdfColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"dashOffset\", {\r\n        /**\r\n         * Gets or sets the `dash offset of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            if (typeof this.dashOffsetValue === 'undefined' || this.dashOffsetValue == null) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return this.dashOffsetValue;\r\n            }\r\n        },\r\n        set: function (value) {\r\n            this.dashOffsetValue = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"dashPattern\", {\r\n        /**\r\n         * Gets or sets the `dash pattern of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.penDashPattern;\r\n        },\r\n        set: function (value) {\r\n            this.penDashPattern = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"dashStyle\", {\r\n        /**\r\n         * Gets or sets the `dash style of the pen`.\r\n         * ```typescript\r\n         * // create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // create a new page\r\n         * let page1 : PdfPage = document.pages.add();\r\n         * // set pen\r\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n         * //\r\n         * // set pen style\r\n         * pen.dashStyle = PdfDashStyle.DashDot;\r\n         * // get pen style\r\n         * let style : PdfDashStyle = pen.dashStyle;\r\n         * //\r\n         * // draw rectangle\r\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n         * // save the document.\r\n         * document.save('output.pdf');\r\n         * // destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this.pdfDashStyle;\r\n        },\r\n        set: function (value) {\r\n            if (this.pdfDashStyle !== value) {\r\n                this.pdfDashStyle = value;\r\n                switch (this.pdfDashStyle) {\r\n                    case PdfDashStyle.Custom:\r\n                        break;\r\n                    case PdfDashStyle.Dash:\r\n                        this.penDashPattern = [3, 1];\r\n                        break;\r\n                    case PdfDashStyle.Dot:\r\n                        this.penDashPattern = [1, 1];\r\n                        break;\r\n                    case PdfDashStyle.DashDot:\r\n                        this.penDashPattern = [3, 1, 1, 1];\r\n                        break;\r\n                    case PdfDashStyle.DashDotDot:\r\n                        this.penDashPattern = [3, 1, 1, 1, 1, 1];\r\n                        break;\r\n                    case PdfDashStyle.Solid:\r\n                        break;\r\n                    default:\r\n                        this.pdfDashStyle = PdfDashStyle.Solid;\r\n                        this.penDashPattern = [0];\r\n                        break;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"lineCap\", {\r\n        /**\r\n         * Gets or sets the `line cap of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfLineCap;\r\n        },\r\n        set: function (value) {\r\n            this.pdfLineCap = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"lineJoin\", {\r\n        /**\r\n         * Gets or sets the `line join style of the pen`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.pdfLineJoin;\r\n        },\r\n        set: function (value) {\r\n            this.pdfLineJoin = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"miterLimit\", {\r\n        /**\r\n         * Gets or sets the `miter limit`.\r\n         * @private\r\n         */\r\n        get: function () {\r\n            return this.internalMiterLimit;\r\n        },\r\n        set: function (value) {\r\n            this.internalMiterLimit = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PdfPen.prototype, \"width\", {\r\n        /**\r\n         * Gets or sets the `width of the pen`.\r\n         * ```typescript\r\n         * // create a new PDF document\r\n         * let document : PdfDocument = new PdfDocument();\r\n         * // create a new page\r\n         * let page1 : PdfPage = document.pages.add();\r\n         * // set pen\r\n         * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\r\n         * //\r\n         * // set pen width\r\n         * pen.width = 2;\r\n         * //\r\n         * // draw rectangle\r\n         * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\r\n         * // save the document.\r\n         * document.save('output.pdf');\r\n         * // destroy the document\r\n         * document.destroy();\r\n         * ```\r\n         */\r\n        get: function () {\r\n            return this.penWidth;\r\n        },\r\n        set: function (value) {\r\n            this.penWidth = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    //Helper\r\n    /**\r\n     * `Clones` this instance of PdfPen class.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.clone = function () {\r\n        var pen = this;\r\n        return pen;\r\n    };\r\n    /**\r\n     * `Sets the brush`.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.setBrush = function (brush) {\r\n        var sBrush = brush;\r\n        if ((sBrush != null && sBrush instanceof PdfSolidBrush)) {\r\n            this.color = sBrush.color;\r\n            this.pdfBrush = sBrush;\r\n        }\r\n        this.color = sBrush.color;\r\n        this.pdfBrush = sBrush;\r\n    };\r\n    /**\r\n     * `Monitors the changes`.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.monitorChanges = function (currentPen, streamWriter, getResources, saveState, currentColorSpace, matrix) {\r\n        var diff = false;\r\n        saveState = true;\r\n        if (currentPen == null) {\r\n            diff = true;\r\n        }\r\n        diff = this.dashControl(currentPen, saveState, streamWriter);\r\n        streamWriter.setLineWidth(this.width);\r\n        streamWriter.setLineJoin(this.lineJoin);\r\n        streamWriter.setLineCap(this.lineCap);\r\n        var miterLimit = this.miterLimit;\r\n        if (miterLimit > 0) {\r\n            streamWriter.setMiterLimit(miterLimit);\r\n            diff = true;\r\n        }\r\n        var brush = this.pdfBrush;\r\n        streamWriter.setColorAndSpace(this.color, currentColorSpace, true);\r\n        diff = true;\r\n        return diff;\r\n    };\r\n    /**\r\n     * `Controls the dash style` and behaviour of each line.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.dashControl = function (pen, saveState, streamWriter) {\r\n        saveState = true;\r\n        var lineWidth = this.width;\r\n        var pattern = this.getPattern();\r\n        streamWriter.setLineDashPattern(pattern, this.dashOffset * lineWidth);\r\n        return saveState;\r\n    };\r\n    /**\r\n     * `Gets the pattern` of PdfPen.\r\n     * @private\r\n     */\r\n    PdfPen.prototype.getPattern = function () {\r\n        var pattern = this.dashPattern;\r\n        for (var i = 0; i < pattern.length; ++i) {\r\n            pattern[i] *= this.width;\r\n        }\r\n        return pattern;\r\n    };\r\n    return PdfPen;\r\n}());\r\nexport { PdfPen };\r\n"]},"metadata":{},"sourceType":"module"}