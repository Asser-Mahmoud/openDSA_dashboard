{"ast":null,"code":"import { flatten as flattenArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'flatten';\nvar dependencies = ['typed', 'matrix'];\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix\n  } = _ref;\n  /**\r\n   * Flatten a multidimensional matrix into a single dimensional matrix.\r\n   * A new matrix is returned, the original matrix is left untouched.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.flatten(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *    concat, resize, size, squeeze\r\n   *\r\n   * @param {Matrix | Array} x   Matrix to be flattened\r\n   * @return {Matrix | Array} Returns the flattened matrix\r\n   */\n\n  return typed(name, {\n    Array: function Array(x) {\n      return flattenArray(x);\n    },\n    Matrix: function Matrix(x) {\n      var flat = flattenArray(x.toArray()); // TODO: return the same matrix type as x (Dense or Sparse Matrix)\n\n      return matrix(flat);\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/matrix/flatten.js"],"names":["flatten","flattenArray","factory","name","dependencies","createFlatten","_ref","typed","matrix","Array","x","Matrix","flat","toArray"],"mappings":"AAAA,SAASA,OAAO,IAAIC,YAApB,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC5E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBM,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACvB,aAAOT,YAAY,CAACS,CAAD,CAAnB;AACD,KAHgB;AAIjBC,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBD,CAAhB,EAAmB;AACzB,UAAIE,IAAI,GAAGX,YAAY,CAACS,CAAC,CAACG,OAAF,EAAD,CAAvB,CADyB,CAEzB;;AACA,aAAOL,MAAM,CAACI,IAAD,CAAb;AACD;AARgB,GAAP,CAAZ;AAUD,CAlCgD,CAA1C","sourcesContent":["import { flatten as flattenArray } from '../../utils/array.js';\r\nimport { factory } from '../../utils/factory.js';\r\nvar name = 'flatten';\r\nvar dependencies = ['typed', 'matrix'];\r\nexport var createFlatten = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    matrix\r\n  } = _ref;\r\n  /**\r\n   * Flatten a multidimensional matrix into a single dimensional matrix.\r\n   * A new matrix is returned, the original matrix is left untouched.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.flatten(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    math.flatten([[1,2], [3,4]])   // returns [1, 2, 3, 4]\r\n   *\r\n   * See also:\r\n   *\r\n   *    concat, resize, size, squeeze\r\n   *\r\n   * @param {Matrix | Array} x   Matrix to be flattened\r\n   * @return {Matrix | Array} Returns the flattened matrix\r\n   */\r\n  return typed(name, {\r\n    Array: function Array(x) {\r\n      return flattenArray(x);\r\n    },\r\n    Matrix: function Matrix(x) {\r\n      var flat = flattenArray(x.toArray());\r\n      // TODO: return the same matrix type as x (Dense or Sparse Matrix)\r\n      return matrix(flat);\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}