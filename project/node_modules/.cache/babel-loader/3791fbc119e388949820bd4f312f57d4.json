{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { sechNumber } from '../../plain/number/index.js';\nvar name = 'sech';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  /**\r\n   * Calculate the hyperbolic secant of a value,\r\n   * defined as `sech(x) = 1 / cosh(x)`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic secant, this function does\r\n   * not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sech(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // sech(x) = 1/ cosh(x)\r\n   *    math.sech(0.5)       // returns 0.886818883970074\r\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, csch, coth\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\r\n   */\n\n  return typed(name, {\n    number: sechNumber,\n    Complex: x => x.sech(),\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\n  });\n});","map":{"version":3,"sources":["C:/Users/x/Desktop/openDSA/openDSA_dashboard/project/node_modules/mathjs/lib/esm/function/trigonometry/sech.js"],"names":["factory","sechNumber","name","dependencies","createSech","_ref","typed","BigNumber","_BigNumber","number","Complex","x","sech","div","cosh"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,SAAS,EAAEC;AAFT,MAGAH,IAHJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBO,IAAAA,MAAM,EAAER,UADS;AAEjBS,IAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAFG;AAGjBL,IAAAA,SAAS,EAAEI,CAAC,IAAI,IAAIH,UAAJ,CAAe,CAAf,EAAkBK,GAAlB,CAAsBF,CAAC,CAACG,IAAF,EAAtB;AAHC,GAAP,CAAZ;AAKD,CAlC6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\r\nimport { sechNumber } from '../../plain/number/index.js';\r\nvar name = 'sech';\r\nvar dependencies = ['typed', 'BigNumber'];\r\nexport var createSech = /* #__PURE__ */factory(name, dependencies, _ref => {\r\n  var {\r\n    typed,\r\n    BigNumber: _BigNumber\r\n  } = _ref;\r\n  /**\r\n   * Calculate the hyperbolic secant of a value,\r\n   * defined as `sech(x) = 1 / cosh(x)`.\r\n   *\r\n   * To avoid confusion with the matrix hyperbolic secant, this function does\r\n   * not apply to matrices.\r\n   *\r\n   * Syntax:\r\n   *\r\n   *    math.sech(x)\r\n   *\r\n   * Examples:\r\n   *\r\n   *    // sech(x) = 1/ cosh(x)\r\n   *    math.sech(0.5)       // returns 0.886818883970074\r\n   *    1 / math.cosh(0.5)   // returns 0.886818883970074\r\n   *\r\n   * See also:\r\n   *\r\n   *    cosh, csch, coth\r\n   *\r\n   * @param {number | BigNumber | Complex} x  Function input\r\n   * @return {number | BigNumber | Complex} Hyperbolic secant of x\r\n   */\r\n  return typed(name, {\r\n    number: sechNumber,\r\n    Complex: x => x.sech(),\r\n    BigNumber: x => new _BigNumber(1).div(x.cosh())\r\n  });\r\n});"]},"metadata":{},"sourceType":"module"}